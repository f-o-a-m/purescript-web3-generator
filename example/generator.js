// Generated by purs bundle 0.14.9
var PS = {};
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };

  exports.ordBooleanImpl = unsafeCompareImpl;
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var zeroRecord = function (dict) {
      return dict.zeroRecord;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringRecordNil = {
      addRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      },
      mulRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      },
      oneRecord: function (v) {
          return function (v1) {
              return {};
          };
      },
      zeroRecord: function (v) {
          return function (v1) {
              return {};
          };
      }
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var oneRecord = function (dict) {
      return dict.oneRecord;
  };
  var one = function (dict) {
      return dict.one;
  };
  var mulRecord = function (dict) {
      return dict.mulRecord;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var addRecord = function (dict) {
      return dict.addRecord;
  };
  var semiringRecord = function () {
      return function (dictSemiringRecord) {
          return {
              add: addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
              mul: mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
              one: oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
              zero: zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringRecordCons = function (dictIsSymbol) {
      return function () {
          return function (dictSemiringRecord) {
              return function (dictSemiring) {
                  return {
                      addRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                              };
                          };
                      },
                      mulRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                              };
                          };
                      },
                      oneRecord: function (v) {
                          return function (v1) {
                              var tail = oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(one(dictSemiring))(tail);
                          };
                      },
                      zeroRecord: function (v) {
                          return function (v1) {
                              var tail = zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              return insert(zero(dictSemiring))(tail);
                          };
                      }
                  };
              };
          };
      };
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringRecord"] = semiringRecord;
  exports["semiringRecordNil"] = semiringRecordNil;
  exports["semiringRecordCons"] = semiringRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var ordBoolean = {
      compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqBoolean;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $60 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($60) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["abs"] = abs;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupRecordNil = {
      appendRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function () {
      return function (dictSemigroupRecord) {
          return {
              append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return {
          append: function (f) {
              return function (g) {
                  return function (x) {
                      return append(dictSemigroup)(f(x))(g(x));
                  };
              };
          }
      };
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function () {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return {
                      appendRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return {
          append: function (v) {
              return function (v1) {
                  if (v instanceof Nothing) {
                      return v1;
                  };
                  if (v1 instanceof Nothing) {
                      return v;
                  };
                  if (v instanceof Just && v1 instanceof Just) {
                      return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [ v.constructor.name, v1.constructor.name ]);
              };
          }
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return {
          mempty: Nothing.value,
          Semigroup0: function () {
              return semigroupMaybe(dictSemigroup);
          }
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var ordMaybe = function (dictOrd) {
      return {
          compare: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return Data_Ordering.EQ.value;
                  };
                  if (x instanceof Nothing) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Nothing) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [ x.constructor.name, y.constructor.name ]);
              };
          },
          Eq0: function () {
              return eqMaybe(dictOrd.Eq0());
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var monoidRecordNil = {
      memptyRecord: function (v) {
          return {};
      },
      SemigroupRecord0: function () {
          return Data_Semigroup.semigroupRecordNil;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function () {
      return function (dictMonoidRecord) {
          return {
              mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
              Semigroup0: function () {
                  return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
              }
          };
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return {
          mempty: function (v) {
              return mempty(dictMonoid);
          },
          Semigroup0: function () {
              return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
          }
      };
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function () {
              return function (dictMonoidRecord) {
                  return {
                      memptyRecord: function (v) {
                          var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(mempty(dictMonoid))(tail);
                      },
                      SemigroupRecord0: function () {
                          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                      }
                  };
              };
          };
      };
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["guard"] = guard;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupConj(dictHeytingAlgebra);
          }
      };
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var wrap = Safe_Coerce.coerce;
  var unwrap = Safe_Coerce.coerce;
  var under = function () {
      return function () {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var un = function () {
      return function (v) {
          return unwrap();
      };
  };
  var over = function () {
      return function () {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function () {
      return function () {
          return function () {
              return function () {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  var ala = function () {
      return function () {
          return function () {
              return function (v) {
                  return function (f) {
                      return Safe_Coerce.coerce()(f(wrap()));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
  exports["under"] = under;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $326 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $327 = Data_Eq.eq(dictEq);
          return function ($328) {
              return $326($327($328));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];                  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return {
          map: function (f) {
              return function (m) {
                  return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
              };
          }
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return {
          foldMap: function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
                  };
              };
          },
          foldl: function (f) {
              return function (b) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
                  };
              };
          },
          foldr: function (f) {
              return function (b) {
                  return function (v) {
                      return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
                  };
              };
          }
      };
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return {
          foldMap1: function (dictSemigroup) {
              return function (f) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(function (s) {
                          return function (a1) {
                              return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                          };
                      })(f(v.value0))(v.value1);
                  };
              };
          },
          foldr1: function (f) {
              return function (v) {
                  return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function (a1) {
                      var $155 = Data_Maybe.maybe(a1)(f(a1));
                      return function ($156) {
                          return Data_Maybe.Just.create($155($156));
                      };
                  })(Data_Maybe.Nothing.value)(v.value1));
              };
          },
          foldl1: function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
              };
          },
          Foldable0: function () {
              return foldableNonEmpty(dictFoldable);
          }
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applyNonEmptyList = {
      apply: function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
          };
      },
      Functor0: function () {
          return functorNonEmptyList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  var applicativeNonEmptyList = {
      pure: (function () {
          var $236 = Data_NonEmpty.singleton(plusList);
          return function ($237) {
              return NonEmptyList($236($237));
          };
      })(),
      Apply0: function () {
          return applyNonEmptyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var showString = {
      show: $foreign.showStringImpl
  };
  var showRecordFieldsNil = {
      showRecordFields: function (v) {
          return function (v1) {
              return [  ];
          };
      }
  };
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function () {
      return function (dictShowRecordFields) {
          return {
              show: function (record) {
                  var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                  if (v.length === 0) {
                      return "{}";
                  };
                  return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
              }
          };
      };
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var showChar = {
      show: $foreign.showCharImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return {
                  showRecordFields: function (v) {
                      return function (record) {
                          var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var focus = Record_Unsafe.unsafeGet(key)(record);
                          return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                      };
                  }
              };
          };
      };
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 95, column 3 - line 98, column 25): " + [ ep.constructor.name ]);
  };
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 173, column 3 - line 189, column 22): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 138, column 3 - line 144, column 23): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 116, column 3 - line 120, column 45): " + [ gp.constructor.name ]);
  };
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 53, column 5 - line 71, column 37): " + [ c.constructor.name ]);
      };
      return function ($624) {
          return (function (v) {
              return prefix + v;
          })(go($624));
      };
  })();
  exports["Graphics"] = Graphics;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["Reset"] = Reset;
  exports["PForeground"] = PForeground;
  exports["Red"] = Red;
  exports["Green"] = Green;
  exports["Yellow"] = Yellow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };
  exports["withGraphics"] = withGraphics;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  exports["guard"] = guard;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var applyEither = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return new Left(v.value0);
              };
              if (v instanceof Right) {
                  return Data_Functor.map(functorEither)(v.value0)(v1);
              };
              throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  var bindEither = {
      bind: either(function (e) {
          return function (v) {
              return new Left(e);
          };
      })(function (a) {
          return function (f) {
              return f(a);
          };
      }),
      Apply0: function () {
          return applyEither;
      }
  };
  var applicativeEither = {
      pure: Right.create,
      Apply0: function () {
          return applyEither;
      }
  };
  var monadEither = {
      Applicative0: function () {
          return applicativeEither;
      },
      Bind1: function () {
          return bindEither;
      }
  };
  var altEither = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["functorEither"] = functorEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Error.Util"] = $PS["Control.Error.Util"] || {};
  var exports = $PS["Control.Error.Util"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var note = function (a) {
      return Data_Maybe.maybe(new Data_Either.Left(a))(Data_Either.Right.create);
  };
  exports["note"] = note;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var throwError = function (dict) {
      return dict.throwError;
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $19 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($20) {
                  return $19(Data_Either.Left.create($20));
              };
          })());
      };
  };
  exports["throwError"] = throwError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Data_Functor.map(dictFunctor)(mapLeft(f))(v);
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["Identity"] = Identity;
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Data_Either = $PS["Data.Either"];              
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($55) {
          return go(f($55));
      };
  };
  var monadRecEither = {
      tailRecM: function (f) {
          return function (a0) {
              var g = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return new Done(new Data_Either.Left(v.value0));
                  };
                  if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                      return new Loop(f(v.value0.value0));
                  };
                  if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                      return new Done(new Data_Either.Right(v.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
              };
              return tailRec(g)(f(a0));
          };
      },
      Monad0: function () {
          return Data_Either.monadEither;
      }
  };
  var bifunctorStep = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Loop) {
                      return new Loop(v(v2.value0));
                  };
                  if (v2 instanceof Done) {
                      return new Done(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];              
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return {
              append: function (v) {
                  return function (v1) {
                      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                  };
              }
          };
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return {
              mempty: new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)),
              Semigroup0: function () {
                  return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
              }
          };
      };
  };
  var functorTuple = {
      map: function (f) {
          return function (m) {
              return new Tuple(m.value0, f(m.value1));
          };
      }
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["ordTuple"] = ordTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];                                              
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: v1,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_v1 = new Data_List_Types.Cons(v.value0, v1);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 274, column 3 - line 274, column 21): " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (aa) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                          return new Data_List_Types.Cons(v, acc);
                      })(function (v) {
                          return reverse(acc);
                      })(aa));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };    
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["manyRec"] = manyRec;
  exports["null"] = $$null;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done1 = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = {
      append: append
  };
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var runFree = function (dictFunctor) {
      return function (k) {
          var go = function ($copy_f) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(f) {
                  var v = toView(f);
                  if (v instanceof Return) {
                      $tco_done = true;
                      return v.value0;
                  };
                  if (v instanceof Bind) {
                      $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
                      return;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_f);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = {
      Applicative0: function () {
          return freeApplicative;
      },
      Bind1: function () {
          return freeBind;
      }
  };
  var freeFunctor = {
      map: function (k) {
          return function (f) {
              return Control_Bind.bindFlipped(freeBind)((function () {
                  var $119 = Control_Applicative.pure(freeApplicative);
                  return function ($120) {
                      return $119(k($120));
                  };
              })())(f);
          };
      }
  };
  var freeBind = {
      bind: function (v) {
          return function (k) {
              return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
          };
      },
      Apply0: function () {
          return freeApply;
      }
  };
  var freeApply = {
      apply: Control_Monad.ap(freeMonad),
      Functor0: function () {
          return freeFunctor;
      }
  };
  var freeApplicative = {
      pure: function ($121) {
          return fromView(Return.create($121));
      },
      Apply0: function () {
          return freeApply;
      }
  };
  var freeMonadRec = {
      tailRecM: function (k) {
          return function (a) {
              return Control_Bind.bind(freeBind)(k(a))(function (v) {
                  if (v instanceof Control_Monad_Rec_Class.Loop) {
                      return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
                  };
                  if (v instanceof Control_Monad_Rec_Class.Done) {
                      return Control_Applicative.pure(freeApplicative)(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
              });
          };
      },
      Monad0: function () {
          return freeMonad;
      }
  };
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $122 = Control_Applicative.pure(freeApplicative);
          return function ($123) {
              return $122($123);
          };
      })()));
  };
  exports["liftF"] = liftF;
  exports["runFree"] = runFree;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonad"] = freeMonad;
  exports["freeMonadRec"] = freeMonadRec;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Reader"] = $PS["Control.Monad.Reader"] || {};
  var exports = $PS["Control.Monad.Reader"];
  var Data_Newtype = $PS["Data.Newtype"];                 
  var runReader = function (v) {
      var $2 = Data_Newtype.unwrap();
      return function ($3) {
          return $2(v($3));
      };
  };
  exports["runReader"] = runReader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"]; 
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = {
      map: $foreign.map_
  };
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["get"] = get;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var monadTransStateT = {
      lift: function (dictMonad) {
          return function (m) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
                  });
              };
          };
      }
  };
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadEffectState = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
              var $111 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($112) {
                  return $110($111($112));
              };
          })(),
          Monad0: function () {
              return monadStateT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Writer.Class"] = $PS["Control.Monad.Writer.Class"] || {};
  var exports = $PS["Control.Monad.Writer.Class"];   
  var tell = function (dict) {
      return dict.tell;
  };
  exports["tell"] = tell;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Writer.Trans"] = $PS["Control.Monad.Writer.Trans"] || {};
  var exports = $PS["Control.Monad.Writer.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];                
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var monadTransWriterT = function (dictMonoid) {
      return {
          lift: function (dictMonad) {
              return function (m) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
                  });
              };
          }
      };
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
                  return new Data_Tuple.Tuple(f(v.value0), v.value1);
              }));
          }
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return {
              apply: function (v) {
                  return function (v1) {
                      var k = function (v3) {
                          return function (v4) {
                              return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                          };
                      };
                      return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
                  };
              },
              Functor0: function () {
                  return functorWriterT(dictApply.Functor0());
              }
          };
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return {
              bind: function (v) {
                  return function (k) {
                      return Control_Bind.bind(dictBind)(v)(function (v1) {
                          var v2 = k(v1.value0);
                          return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                              return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                          })(v2);
                      });
                  };
              },
              Apply0: function () {
                  return applyWriterT(dictSemigroup)(dictBind.Apply0());
              }
          };
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return {
              pure: function (a) {
                  return Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
              },
              Apply0: function () {
                  return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
              }
          };
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return {
              Applicative0: function () {
                  return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
              },
              Bind1: function () {
                  return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
              }
          };
      };
  };
  var monadEffectWriter = function (dictMonoid) {
      return function (dictMonadEffect) {
          return {
              liftEffect: (function () {
                  var $124 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
                  var $125 = Effect_Class.liftEffect(dictMonadEffect);
                  return function ($126) {
                      return $124($125($126));
                  };
              })(),
              Monad0: function () {
                  return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
              }
          };
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return {
              tell: (function () {
                  var $127 = Control_Applicative.pure(dictMonad.Applicative0());
                  var $128 = Data_Tuple.Tuple.create(Data_Unit.unit);
                  return function ($129) {
                      return WriterT($127($128($129)));
                  };
              })(),
              Semigroup0: dictMonoid.Semigroup0,
              Monad1: function () {
                  return monadWriterT(dictMonoid)(dictMonad);
              }
          };
      };
  };
  exports["runWriterT"] = runWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffectWriter"] = monadEffectWriter;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonBoolean"] = caseJsonBoolean;
  exports["caseJsonString"] = caseJsonString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["fromString"] = $foreign.fromString;
  exports["fromObject"] = $foreign.fromObject;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var printJsonDecodeError = function (err) {
      var go = function (v) {
          if (v instanceof TypeMismatch) {
              return "  Expected value of type '" + (v.value0 + "'.");
          };
          if (v instanceof UnexpectedValue) {
              return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
          };
          if (v instanceof AtIndex) {
              return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\x0a" + go(v.value1)));
          };
          if (v instanceof AtKey) {
              return "  At object key '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof Named) {
              return "  Under '" + (v.value0 + ("':\x0a" + go(v.value1)));
          };
          if (v instanceof MissingValue) {
              return "  No value was found.";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [ v.constructor.name ]);
      };
      return "An error occurred while decoding a JSON value:\x0a" + go(err);
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["UnexpectedValue"] = UnexpectedValue;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["printJsonDecodeError"] = printJsonDecodeError;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = {
      foldrWithIndex: function (f) {
          return function (z) {
              var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z);
              var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($169) {
                  return $167($168($169));
              };
          };
      },
      foldlWithIndex: function (f) {
          return function (z) {
              var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z);
              var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($172) {
                  return $170($171($172));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
      },
      Foldable0: function () {
          return Data_Foldable.foldableArray;
      }
  };
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
      traverseWithIndex: function (dictApplicative) {
          return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
      },
      FunctorWithIndex0: function () {
          return Data_FunctorWithIndex.functorWithIndexArray;
      },
      FoldableWithIndex1: function () {
          return Data_FoldableWithIndex.foldableWithIndexArray;
      },
      Traversable2: function () {
          return Data_Traversable.traversableArray;
      }
  };
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = {
      map: function (f) {
          return function (m) {
              return $foreign["_fmapObject"](m, f);
          };
      }
  };
  var functorWithIndexObject = {
      mapWithIndex: mapWithKey,
      Functor0: function () {
          return functorObject;
      }
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = {
      foldl: function (f) {
          return fold(function (z) {
              return function (v) {
                  return f(z);
              };
          });
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return foldMap(dictMonoid)(Data_Function["const"](f));
          };
      }
  };
  var foldableWithIndexObject = {
      foldlWithIndex: function (f) {
          return fold(Data_Function.flip(f));
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMap(dictMonoid);
      },
      Foldable0: function () {
          return foldableObject;
      }
  };
  var traversableWithIndexObject = {
      traverseWithIndex: function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return fold(function (acc) {
                      return function (k) {
                          return function (v) {
                              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                          };
                      };
                  })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
              };
          };
      },
      FunctorWithIndex0: function () {
          return functorWithIndexObject;
      },
      FoldableWithIndex1: function () {
          return foldableWithIndexObject;
      },
      Traversable2: function () {
          return traversableObject;
      }
  };
  var traversableObject = {
      traverse: function (dictApplicative) {
          var $42 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
          return function ($43) {
              return $42(Data_Function["const"]($43));
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorObject;
      },
      Foldable1: function () {
          return foldableObject;
      }
  };
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 209, column 15 - line 211, column 25): " + [ v.constructor.name ]);
          };
      };
  };
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["lookup"] = lookup;
  exports["update"] = update;
  exports["traversableObject"] = traversableObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Foreign_Object = $PS["Foreign.Object"];
  var getField = function (decoder) {
      return function (obj) {
          return function (str) {
              return Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                  var $18 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                  return function ($19) {
                      return $18(decoder($19));
                  };
              })())(Foreign_Object.lookup(str)(obj));
          };
      };
  };
  var decodeString = Data_Argonaut_Core.caseJsonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeJObject = (function () {
      var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
      return function ($21) {
          return $20(Data_Argonaut_Core.toObject($21));
      };
  })();
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeForeignObject = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $56 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
          var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
          return function ($58) {
              return $56($57($58));
          };
      })())(decodeJObject);
  };
  var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeBoolean"] = decodeBoolean;
  exports["decodeString"] = decodeString;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var decodeJsonString = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeString
  };
  var decodeJsonJson = {
      decodeJson: Data_Either.Right.create
  };
  var decodeJsonBoolean = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeBoolean
  };
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeForeignObject = function (dictDecodeJson) {
      return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson))
      };
  };
  var decodeArray = function (dictDecodeJson) {
      return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson))
      };
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonBoolean"] = decodeJsonBoolean;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeForeignObject"] = decodeForeignObject;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Combinators"] = $PS["Data.Argonaut.Decode.Combinators"] || {};
  var exports = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var getField = function (dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
  };
  exports["getField"] = getField;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var encodeString = Data_Argonaut_Core.fromString;
  exports["encodeString"] = encodeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var encodeJsonJString = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeString
  };
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJString"] = encodeJsonJString;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  exports.all = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (!p(xs[i])) return false;
      }
      return true;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var take = function (n) {
      return function (xs) {
          var $58 = n < 1;
          if ($58) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var intercalate = function (dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldMap = function (dictMonoid) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid);
  };
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var drop = function (n) {
      return function (xs) {
          var $80 = n < 1;
          if ($80) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $100 = Data_Maybe.maybe([  ])(singleton);
          return function ($101) {
              return $100(f($101));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["head"] = head;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["modifyAt"] = modifyAt;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldr"] = foldr;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["intercalate"] = intercalate;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["groupBy"] = groupBy;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["all"] = $foreign.all;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.rem = function (x) {
    return function (y) {
      return x % y;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.fromStringImpl = function(str, isFinite, just, nothing) {
    var num = parseFloat(str);
    if (isFinite(num)) {
      return just(num);
    } else {
      return nothing;
    }
  };
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var fromString = function (str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["fromString"] = fromString;
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  exports.ceil = Math.ceil;

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["ceil"] = $foreign.ceil;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
  exports["rem"] = $foreign.rem;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._indexOfStartingAt = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                                           
  var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropRight = function (i) {
      return function (s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["dropRight"] = dropRight;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Text.Parsing.StringParser"] = $PS["Text.Parsing.StringParser"] || {};
  var exports = $PS["Text.Parsing.StringParser"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  };
  var runParser = function (v) {
      return function (s) {
          return Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  };
  var functorParser = {
      map: function (f) {
          return function (v) {
              var $61 = Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return {
                      result: f(v1.result),
                      suffix: v1.suffix
                  };
              });
              return function ($62) {
                  return $61(v($62));
              };
          };
      }
  };
  var fail = function (error) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: error
          });
      };
  };
  var applyParser = {
      apply: function (v) {
          return function (v1) {
              return function (s) {
                  return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                      return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                              result: v2.result(v3.result),
                              suffix: v3.suffix
                          });
                      });
                  });
              };
          };
      },
      Functor0: function () {
          return functorParser;
      }
  };
  var bindParser = {
      bind: function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                      return unParser(f(v1.result))(v1.suffix);
                  });
              };
          };
      },
      Apply0: function () {
          return applyParser;
      }
  };
  var applicativeParser = {
      pure: function (a) {
          return function (s) {
              return new Data_Either.Right({
                  result: a,
                  suffix: s
              });
          };
      },
      Apply0: function () {
          return applyParser;
      }
  };
  var monadParser = {
      Applicative0: function () {
          return applicativeParser;
      },
      Bind1: function () {
          return bindParser;
      }
  };
  var monadRecParser = {
      tailRecM: function (f) {
          return function (a) {
              var split = function (v) {
                  if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                      return new Control_Monad_Rec_Class.Loop({
                          state: v.result.value0,
                          str: v.suffix
                      });
                  };
                  if (v.result instanceof Control_Monad_Rec_Class.Done) {
                      return new Control_Monad_Rec_Class.Done({
                          result: v.result.value0,
                          suffix: v.suffix
                      });
                  };
                  throw new Error("Failed pattern match at Text.Parsing.StringParser (line 90, column 7 - line 90, column 70): " + [ v.constructor.name ]);
              };
              return function (str) {
                  return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                      return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
                  })({
                      state: a,
                      str: str
                  });
              };
          };
      },
      Monad0: function () {
          return monadParser;
      }
  };
  var altParser = {
      alt: function (v) {
          return function (v1) {
              return function (s) {
                  var v2 = v(s);
                  if (v2 instanceof Data_Either.Left) {
                      if (s.pos === v2.value0.pos) {
                          return v1(s);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_Either.Left({
                              error: v2.value0.error,
                              pos: v2.value0.pos
                          });
                      };
                  };
                  return v2;
              };
          };
      },
      Functor0: function () {
          return functorParser;
      }
  };
  var plusParser = {
      empty: fail("No alternative"),
      Alt0: function () {
          return altParser;
      }
  };
  var alternativeParser = {
      Applicative0: function () {
          return applicativeParser;
      },
      Plus1: function () {
          return plusParser;
      }
  };
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadRecParser"] = monadRecParser;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                              
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._codePointAt = function (fallback) {
    return function (Just) {
      return function (Nothing) {
        return function (unsafeCodePointAt0) {
          return function (index) {
            return function (str) {
              var length = str.length;
              if (index < 0 || index >= length) return Nothing;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index;; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing;
                  if (i === 0) return Just(unsafeCodePointAt0(o.value));
                }
              }
              return fallback(index)(str);
            };
          };
        };
      };
    };
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var showCodePoint = {
      show: function (v) {
          return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
      }
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var lastIndexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var ordCodePoint = {
      compare: function (x) {
          return function (y) {
              return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
      },
      Eq0: function () {
          return eqCodePoint;
      }
  };
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var indexOf$prime = function (p) {
      return function (i) {
          return function (s) {
              var s$prime = drop(i)(s);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (k) {
                  return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
              })(Data_String_CodeUnits.indexOf(p)(s$prime));
          };
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };
  var codePointFromChar = (function () {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function ($56) {
          return CodePoint($55($56));
      };
  })();
  var codePointAtFallback = function ($copy_n) {
      return function ($copy_s) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, s) {
              var v = uncons(s);
              if (v instanceof Data_Maybe.Just) {
                  var $44 = n === 0;
                  if ($44) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.head);
                  };
                  $tco_var_n = n - 1 | 0;
                  $copy_s = v.value0.tail;
                  return;
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_s);
          };
          return $tco_result;
      };
  };
  var codePointAt = function (v) {
      return function (v1) {
          if (v < 0) {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0 && v1 === "") {
              return Data_Maybe.Nothing.value;
          };
          if (v === 0) {
              return new Data_Maybe.Just(unsafeCodePointAt0(v1));
          };
          return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
  };
  var boundedCodePoint = {
      bottom: 0,
      top: 1114111,
      Ord0: function () {
          return ordCodePoint;
      }
  };
  var boundedEnumCodePoint = {
      cardinality: 1114111 + 1 | 0,
      fromEnum: function (v) {
          return v;
      },
      toEnum: function (n) {
          if (n >= 0 && n <= 1114111) {
              return new Data_Maybe.Just(n);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [ n.constructor.name ]);
      },
      Bounded0: function () {
          return boundedCodePoint;
      },
      Enum1: function () {
          return enumCodePoint;
      }
  };
  var enumCodePoint = {
      succ: Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),
      pred: Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),
      Ord0: function () {
          return ordCodePoint;
      }
  };
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["codePointAt"] = codePointAt;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
  exports["showCodePoint"] = showCodePoint;
  exports["boundedEnumCodePoint"] = boundedEnumCodePoint;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 97, column 3 - line 99, column 81): " + [ v1.constructor.name ]);
          };
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var singleton = (function () {
      var $171 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($172) {
          return Data_List_Types.NonEmptyList($171($172));
      };
  })();
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["reverse"] = reverse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Text.Parsing.StringParser.Combinators"] = $PS["Text.Parsing.StringParser.Combinators"] || {};
  var exports = $PS["Text.Parsing.StringParser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];                
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var optionMaybe = function (p) {
      return option(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_Maybe.Just.create)(p));
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function () {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List_NonEmpty.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (c) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(Data_List_NonEmpty.cons(c)(acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (x) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(x));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(many1Till(p)(end)));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var lookAhead = function (v) {
      return function (s) {
          var v1 = v(s);
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  result: v1.value0.result,
                  suffix: s
              });
          };
          return v1;
      };
  };
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var many1 = function (p) {
      return Control_Apply.apply(Text_Parsing_StringParser.applyParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(cons$prime)(p))(many(p));
  };
  var choice = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_StringParser.altParser))(Text_Parsing_StringParser.fail("Nothing to parse"));
  };
  exports["lookAhead"] = lookAhead;
  exports["many1"] = many1;
  exports["withError"] = withError;
  exports["optionMaybe"] = optionMaybe;
  exports["choice"] = choice;
  exports["manyTill"] = manyTill;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Text.Parsing.StringParser.CodePoints"] = $PS["Text.Parsing.StringParser.CodePoints"] || {};
  var exports = $PS["Text.Parsing.StringParser.CodePoints"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String_CodePoints.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: "Expected '" + (nt + "'.")
          });
      };
  };
  var eof = function (s) {
      if (s.pos < Data_String_CodePoints.length(s.str)) {
          return new Data_Either.Left({
              pos: s.pos,
              error: "Expected EOF"
          });
      };
      return new Data_Either.Right({
          result: Data_Unit.unit,
          suffix: s
      });
  };
  var anyChar = (function () {
      var toChar = (function () {
          var $38 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
          return function ($39) {
              return Data_Char.fromCharCode($38($39));
          };
      })();
      return function (v) {
          var v1 = Data_String_CodePoints.codePointAt(v.pos)(v.str);
          if (v1 instanceof Data_Maybe.Just) {
              var v2 = toChar(v1.value0);
              if (v2 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v2.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + 1 | 0
                      }
                  });
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left({
                      pos: v.pos,
                      error: "CodePoint " + (Data_Show.show(Data_String_CodePoints.showCodePoint)(v1.value0) + " is not a character")
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 53, column 16 - line 55, column 87): " + [ v2.constructor.name ]);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return new Data_Either.Left({
                  pos: v.pos,
                  error: "Unexpected EOF"
              });
          };
          throw new Error("Failed pattern match at Text.Parsing.StringParser.CodePoints (line 52, column 3 - line 56, column 53): " + [ v1.constructor.name ]);
      };
  })();
  var anyDigit = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
      var $34 = c >= "0" && c <= "9";
      if ($34) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
      };
      return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " is not a digit"));
  }));
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (c) {
          var $36 = f(c);
          if ($36) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(c);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(c) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  exports["eof"] = eof;
  exports["anyDigit"] = anyDigit;
  exports["string"] = string;
  exports["char"] = $$char;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.AbiParser"] = $PS["Data.AbiParser"] || {};
  var exports = $PS["Data.AbiParser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Error_Util = $PS["Control.Error.Util"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = $PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodePoints = $PS["Text.Parsing.StringParser.CodePoints"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var SolidityBool = (function () {
      function SolidityBool() {

      };
      SolidityBool.value = new SolidityBool();
      return SolidityBool;
  })();
  var SolidityAddress = (function () {
      function SolidityAddress() {

      };
      SolidityAddress.value = new SolidityAddress();
      return SolidityAddress;
  })();
  var SolidityUint = (function () {
      function SolidityUint(value0) {
          this.value0 = value0;
      };
      SolidityUint.create = function (value0) {
          return new SolidityUint(value0);
      };
      return SolidityUint;
  })();
  var SolidityInt = (function () {
      function SolidityInt(value0) {
          this.value0 = value0;
      };
      SolidityInt.create = function (value0) {
          return new SolidityInt(value0);
      };
      return SolidityInt;
  })();
  var SolidityString = (function () {
      function SolidityString() {

      };
      SolidityString.value = new SolidityString();
      return SolidityString;
  })();
  var SolidityBytesN = (function () {
      function SolidityBytesN(value0) {
          this.value0 = value0;
      };
      SolidityBytesN.create = function (value0) {
          return new SolidityBytesN(value0);
      };
      return SolidityBytesN;
  })();
  var SolidityBytesD = (function () {
      function SolidityBytesD() {

      };
      SolidityBytesD.value = new SolidityBytesD();
      return SolidityBytesD;
  })();
  var SolidityVector = (function () {
      function SolidityVector(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SolidityVector.create = function (value0) {
          return function (value1) {
              return new SolidityVector(value0, value1);
          };
      };
      return SolidityVector;
  })();
  var SolidityArray = (function () {
      function SolidityArray(value0) {
          this.value0 = value0;
      };
      SolidityArray.create = function (value0) {
          return new SolidityArray(value0);
      };
      return SolidityArray;
  })();
  var SolidityFallback = (function () {
      function SolidityFallback() {

      };
      SolidityFallback.value = new SolidityFallback();
      return SolidityFallback;
  })();
  var IndexedSolidityValue = (function () {
      function IndexedSolidityValue(value0) {
          this.value0 = value0;
      };
      IndexedSolidityValue.create = function (value0) {
          return new IndexedSolidityValue(value0);
      };
      return IndexedSolidityValue;
  })();
  var SolidityEvent = (function () {
      function SolidityEvent(value0) {
          this.value0 = value0;
      };
      SolidityEvent.create = function (value0) {
          return new SolidityEvent(value0);
      };
      return SolidityEvent;
  })();
  var SolidityConstructor = (function () {
      function SolidityConstructor(value0) {
          this.value0 = value0;
      };
      SolidityConstructor.create = function (value0) {
          return new SolidityConstructor(value0);
      };
      return SolidityConstructor;
  })();
  var SolidityFunction = (function () {
      function SolidityFunction(value0) {
          this.value0 = value0;
      };
      SolidityFunction.create = function (value0) {
          return new SolidityFunction(value0);
      };
      return SolidityFunction;
  })();
  var AbiFunction = (function () {
      function AbiFunction(value0) {
          this.value0 = value0;
      };
      AbiFunction.create = function (value0) {
          return new AbiFunction(value0);
      };
      return AbiFunction;
  })();
  var AbiConstructor = (function () {
      function AbiConstructor(value0) {
          this.value0 = value0;
      };
      AbiConstructor.create = function (value0) {
          return new AbiConstructor(value0);
      };
      return AbiConstructor;
  })();
  var AbiEvent = (function () {
      function AbiEvent(value0) {
          this.value0 = value0;
      };
      AbiEvent.create = function (value0) {
          return new AbiEvent(value0);
      };
      return AbiEvent;
  })();
  var AbiFallback = (function () {
      function AbiFallback(value0) {
          this.value0 = value0;
      };
      AbiFallback.create = function (value0) {
          return new AbiFallback(value0);
      };
      return AbiFallback;
  })();
  var parseString = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("string"))(function (v) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(SolidityString.value);
  });
  var parseDigits = Data_Functor.map(Text_Parsing_StringParser.functorParser)((function () {
      var $145 = Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList);
      return function ($146) {
          return Data_String_CodeUnits.fromCharArray($145($146));
      };
  })())(Text_Parsing_StringParser_Combinators.many1(Text_Parsing_StringParser["try"](Text_Parsing_StringParser_CodePoints.anyDigit)));
  var parseBool = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("bool"))(function (v) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(SolidityBool.value);
  });
  var parseAddress = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("address"))(function (v) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(SolidityAddress.value);
  });
  var format = function (dict) {
      return dict.format;
  };
  var formatSolidityType = {
      format: function (s) {
          if (s instanceof SolidityBool) {
              return "bool";
          };
          if (s instanceof SolidityAddress) {
              return "address";
          };
          if (s instanceof SolidityUint) {
              return "uint" + Data_Show.show(Data_Show.showInt)(s.value0);
          };
          if (s instanceof SolidityInt) {
              return "int" + Data_Show.show(Data_Show.showInt)(s.value0);
          };
          if (s instanceof SolidityString) {
              return "string";
          };
          if (s instanceof SolidityBytesN) {
              return "bytes" + Data_Show.show(Data_Show.showInt)(s.value0);
          };
          if (s instanceof SolidityBytesD) {
              return "bytes";
          };
          if (s instanceof SolidityVector) {
              return format(formatSolidityType)(s.value1) + Data_Foldable.foldMap(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(function (n) {
                  return "[" + (Data_Show.show(Data_Show.showInt)(n) + "]");
              })(s.value0);
          };
          if (s instanceof SolidityArray) {
              return format(formatSolidityType)(s.value0) + "[]";
          };
          throw new Error("Failed pattern match at Data.AbiParser (line 60, column 14 - line 69, column 40): " + [ s.constructor.name ]);
      }
  };
  var formatIndexedSolidityValue = {
      format: function (v) {
          return format(formatSolidityType)(v.value0.type);
      }
  };
  var formatInput = {
      format: function (v) {
          return format(formatSolidityType)(v.type);
      }
  };
  var decodeJsonSolidityFallback = {
      decodeJson: function (v) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(SolidityFallback.value);
      }
  };
  var asInt = function (n) {
      var v = Data_Int.fromString(n);
      if (v instanceof Data_Maybe.Nothing) {
          return Text_Parsing_StringParser.fail("Couldn't parse as Int : " + n);
      };
      if (v instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v.value0);
      };
      throw new Error("Failed pattern match at Data.AbiParser (line 93, column 11 - line 96, column 23): " + [ v.constructor.name ]);
  };
  var parseBytes = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("bytes"))(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.optionMaybe(parseDigits))(function (mns) {
          if (mns instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(SolidityBytesD.value);
          };
          if (mns instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(asInt(mns.value0))(function (n) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new SolidityBytesN(n));
              });
          };
          throw new Error("Failed pattern match at Data.AbiParser (line 102, column 3 - line 106, column 30): " + [ mns.constructor.name ]);
      });
  });
  var $$parseInt = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("int"))(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseDigits)(asInt))(function (n) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new SolidityInt(n));
      });
  });
  var parseUint = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodePoints.string("uint"))(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseDigits)(asInt))(function (n) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new SolidityUint(n));
      });
  });
  var solidityBasicTypeParser = Text_Parsing_StringParser_Combinators.choice(Data_Foldable.foldableArray)([ parseUint, $$parseInt, parseAddress, parseBool, parseString, parseBytes, parseAddress ]);
  var vectoDimentionsParser = Text_Parsing_StringParser_Combinators.manyTill(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodePoints["char"]("["))(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(parseDigits)(asInt)))(Text_Parsing_StringParser_CodePoints["char"]("]")))(Text_Parsing_StringParser_Combinators.lookAhead(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor["void"](Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_CodePoints.string("[]")))(Text_Parsing_StringParser_CodePoints.eof)));
  var solidityTypeParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(solidityBasicTypeParser)(function (t) {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(vectoDimentionsParser)(function (mbVectorDims) {
          var t$prime = (function () {
              if (mbVectorDims instanceof Data_List_Types.Nil) {
                  return t;
              };
              if (mbVectorDims instanceof Data_List_Types.Cons) {
                  return new SolidityVector(new Data_NonEmpty.NonEmpty(mbVectorDims.value0, mbVectorDims.value1), t);
              };
              throw new Error("Failed pattern match at Data.AbiParser (line 133, column 10 - line 135, column 61): " + [ mbVectorDims.constructor.name ]);
          })();
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.voidRight(Text_Parsing_StringParser.functorParser)(new SolidityArray(t$prime))(Text_Parsing_StringParser_CodePoints.string("[]")))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(t$prime));
      });
  });
  var parseSolidityType$prime = function (s) {
      return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (err) {
          return "Failed to parse SolidityType " + (Data_Show.show(Data_Show.showString)(s) + (" with error: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "error";
              }
          })(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "pos";
              }
          })(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showString)))(err)));
      })(Text_Parsing_StringParser.runParser(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(solidityTypeParser)(Text_Parsing_StringParser_CodePoints.eof))(s));
  };
  var parseSolidityType = function (s) {
      return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (err) {
          return new Data_Argonaut_Decode_Error.Named(err, new Data_Argonaut_Decode_Error.UnexpectedValue(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(s)));
      })(parseSolidityType$prime(s));
  };
  var decodeFunctionInput = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (n) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("type"))(function (t) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseSolidityType(t))(function (typ) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                              type: typ,
                              name: n
                          });
                      });
                  });
              });
          });
      }
  };
  var decodeJsonSolidityConstructor = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeFunctionInput))(obj)("inputs"))(function (is) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new SolidityConstructor({
                      inputs: is,
                      isUnCurried: Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                          return v.name !== "";
                      })(is) && !Data_Array["null"](is)
                  }));
              });
          });
      }
  };
  var decodeJsonIndexedSolidityValue = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (nm) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("type"))(function (ts) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseSolidityType(ts))(function (t) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(obj)("indexed"))(function (ixed) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new IndexedSolidityValue({
                                  name: nm,
                                  type: t,
                                  indexed: ixed
                              }));
                          });
                      });
                  });
              });
          });
      }
  };
  var decodeJsonSolidityEvent = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (nm) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeJsonIndexedSolidityValue))(obj)("inputs"))(function (is) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(obj)("anonymous"))(function (a) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new SolidityEvent({
                              name: nm,
                              inputs: is,
                              anonymous: a
                          }));
                      });
                  });
              });
          });
      }
  };
  var decodeJsonSolidityType = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("type"))(function (t) {
                  return parseSolidityType(t);
              });
          });
      }
  };
  var decodeJsonSolidityFunction = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("name"))(function (nm) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeFunctionInput))(obj)("inputs"))(function (is) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeJsonSolidityType))(obj)("outputs"))(function (os) {
                          var parseStateMutability = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("stateMutability"))(function (sm) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(sm))(function (str) {
                                  if (str === "pure") {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          constant: true,
                                          payable: false
                                      });
                                  };
                                  if (str === "view") {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          constant: true,
                                          payable: false
                                      });
                                  };
                                  if (str === "payable") {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          constant: false,
                                          payable: true
                                      });
                                  };
                                  if (str === "nonpayable") {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          constant: false,
                                          payable: false
                                      });
                                  };
                                  return new Data_Either.Left(new Data_Argonaut_Decode_Error.Named("Expecting \"stateMutabiltiy\" to be one of \"pure\", \"view\", \"payable\", or \"nonpayable\"", new Data_Argonaut_Decode_Error.UnexpectedValue(sm)));
                              });
                          });
                          var parseConstantPayableFields = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(obj)("constant"))(function (constant) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(obj)("payable"))(function (payable) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                      constant: constant,
                                      payable: payable
                                  });
                              });
                          });
                          var fallback = new Data_Either.Left(new Data_Argonaut_Decode_Error.Named("Expected a \"stateMutability\" field or a combination of \"constant\" and \"payable\" fields", new Data_Argonaut_Decode_Error.UnexpectedValue(json)));
                          return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(parseStateMutability)(parseConstantPayableFields))(fallback))(function (cp) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new SolidityFunction({
                                  name: nm,
                                  inputs: is,
                                  outputs: os,
                                  constant: cp.constant,
                                  payable: cp.payable,
                                  isConstructor: false,
                                  isUnCurried: Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
                                      return v.name !== "";
                                  })(is) && !Data_Array["null"](is)
                              }));
                          });
                      });
                  });
              });
          });
      }
  };
  var decodeJsonAbiType = {
      decodeJson: function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("type"))(function (t) {
                  var json$prime = Data_Argonaut_Core.fromObject(obj);
                  if (t === "function") {
                      return Data_Functor.map(Data_Either.functorEither)(AbiFunction.create)(Data_Argonaut_Decode_Class.decodeJson(decodeJsonSolidityFunction)(json$prime));
                  };
                  if (t === "constructor") {
                      return Data_Functor.map(Data_Either.functorEither)(AbiConstructor.create)(Data_Argonaut_Decode_Class.decodeJson(decodeJsonSolidityConstructor)(json$prime));
                  };
                  if (t === "event") {
                      return Data_Functor.map(Data_Either.functorEither)(AbiEvent.create)(Data_Argonaut_Decode_Class.decodeJson(decodeJsonSolidityEvent)(json$prime));
                  };
                  if (t === "fallback") {
                      return Data_Functor.map(Data_Either.functorEither)(AbiFallback.create)(Data_Argonaut_Decode_Class.decodeJson(decodeJsonSolidityFallback)(json$prime));
                  };
                  return new Data_Either.Left(new Data_Argonaut_Decode_Error.Named("Unkown abi type", new Data_Argonaut_Decode_Error.UnexpectedValue(json)));
              });
          });
      }
  };
  var decodeJsonAbi = {
      decodeJson: function (json) {
          var safeDecode = function (idx) {
              return function (json$prime) {
                  return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (error) {
                      return {
                          idx: idx,
                          error: Data_Argonaut_Decode_Error.printJsonDecodeError(error)
                      };
                  })(Data_Argonaut_Decode_Class.decodeJson(decodeJsonAbiType)(json$prime));
              };
          };
          return Control_Bind.bind(Data_Either.bindEither)(Control_Error_Util.note(new Data_Argonaut_Decode_Error.Named("Failed to decode ABI as Array type.", new Data_Argonaut_Decode_Error.UnexpectedValue(json)))(Data_Argonaut_Core.toArray(json)))(function (arr) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(safeDecode)(arr));
          });
      }
  };
  exports["format"] = format;
  exports["SolidityBool"] = SolidityBool;
  exports["SolidityAddress"] = SolidityAddress;
  exports["SolidityUint"] = SolidityUint;
  exports["SolidityInt"] = SolidityInt;
  exports["SolidityString"] = SolidityString;
  exports["SolidityBytesN"] = SolidityBytesN;
  exports["SolidityBytesD"] = SolidityBytesD;
  exports["SolidityVector"] = SolidityVector;
  exports["SolidityArray"] = SolidityArray;
  exports["SolidityFunction"] = SolidityFunction;
  exports["AbiFunction"] = AbiFunction;
  exports["AbiConstructor"] = AbiConstructor;
  exports["AbiEvent"] = AbiEvent;
  exports["AbiFallback"] = AbiFallback;
  exports["formatInput"] = formatInput;
  exports["formatIndexedSolidityValue"] = formatIndexedSolidityValue;
  exports["decodeJsonAbi"] = decodeJsonAbi;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];
  var Control_Category = $PS["Control.Category"];        
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($8) {
                      return c2d(b2c(a2b($8)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];                 
  var right = function (dict) {
      return dict.right;
  };
  exports["right"] = right;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Prism"] = $PS["Data.Lens.Prism"] || {};
  var exports = $PS["Data.Lens.Prism"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];           
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  var prism$prime = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return prism(to)(function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
              })(dictChoice);
          };
      };
  };
  exports["prism'"] = prism$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Prisms"] = $PS["Data.Argonaut.Prisms"] || {};
  var exports = $PS["Data.Argonaut.Prisms"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Lens_Prism = $PS["Data.Lens.Prism"];
  var _Object = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Argonaut_Core.fromObject)(Data_Argonaut_Core.toObject)(dictChoice);
  };
  exports["_Object"] = _Object;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var NonEmptyArray = function (x) {
      return x;
  };
  var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;                     
  var functorNonEmptyArray = Data_Functor.functorArray;                              
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["semigroupNonEmptyArray"] = semigroupNonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
  exports["applicativeNonEmptyArray"] = applicativeNonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];               
  var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
  var toArray = function (v) {
      return v;
  };
  var snoc$prime = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(xs)(x));
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
  };
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $71 = Data_Maybe.fromJust();
      return function ($72) {
          return $71(f(toArray($72)));
      };
  };
  var head = adaptMaybe(Data_Array.head);
  var tail = adaptMaybe(Data_Array.tail);
  var uncons = adaptMaybe(Data_Array.uncons);
  var unsnoc = adaptMaybe(Data_Array.unsnoc);
  var adaptAny = function (f) {
      return function ($74) {
          return f(toArray($74));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  exports["fromArray"] = fromArray;
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["snoc"] = snoc;
  exports["snoc'"] = snoc$prime;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  var semigroupEffect = function (dictSemigroup) {
      return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
  };
  var monoidEffect = function (dictMonoid) {
      return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function () {
              return semigroupEffect(dictMonoid.Semigroup0());
          }
      };
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  exports["error"] = $foreign.error;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.copyAll = function (a) {
    return function () {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function () {
            buf["write" + ty](value, offset);
          };
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function () {
              return buff.write(value, offset, length, encoding);
            };
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function () {
          buff[offset] = value;
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function () {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function () {
            buf.fill(octet, start, end);
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON();
    return json.data || json;
  };

  exports.toArrayBuffer = function (buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function (ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf["read" + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports.concatToLength = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = {
      show: function (v) {
          if (v instanceof UInt8) {
              return "UInt8";
          };
          if (v instanceof UInt16LE) {
              return "UInt16LE";
          };
          if (v instanceof UInt16BE) {
              return "UInt16BE";
          };
          if (v instanceof UInt32LE) {
              return "UInt32LE";
          };
          if (v instanceof UInt32BE) {
              return "UInt32BE";
          };
          if (v instanceof Int8) {
              return "Int8";
          };
          if (v instanceof Int16LE) {
              return "Int16LE";
          };
          if (v instanceof Int16BE) {
              return "Int16BE";
          };
          if (v instanceof Int32LE) {
              return "Int32LE";
          };
          if (v instanceof Int32BE) {
              return "Int32BE";
          };
          if (v instanceof FloatLE) {
              return "FloatLE";
          };
          if (v instanceof FloatBE) {
              return "FloatBE";
          };
          if (v instanceof DoubleLE) {
              return "DoubleLE";
          };
          if (v instanceof DoubleBE) {
              return "DoubleBE";
          };
          throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [ v.constructor.name ]);
      }
  };
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];    
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = {
      show: function (v) {
          if (v instanceof ASCII) {
              return "ASCII";
          };
          if (v instanceof UTF8) {
              return "UTF8";
          };
          if (v instanceof UTF16LE) {
              return "UTF16LE";
          };
          if (v instanceof UCS2) {
              return "UCS2";
          };
          if (v instanceof Base64) {
              return "Base64";
          };
          if (v instanceof Latin1) {
              return "Latin1";
          };
          if (v instanceof Binary) {
              return "Binary";
          };
          if (v instanceof Hex) {
              return "Hex";
          };
          throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
      }
  };
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["UTF8"] = UTF8;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };
  var read = (function () {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($6) {
          return $foreign.readImpl($5($6));
      };
  })();
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      var $7 = $foreign.fromStringImpl(str);
      return function ($8) {
          return $7(Node_Encoding.encodingToNode($8));
      };
  };
  var concat$prime = $foreign.concatToLength;
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["concat'"] = concat$prime;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($22) {
          return $foreign.writeInternal($21($22));
      };
  };
  var unsafeThaw = function (dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($24) {
          return $23($24);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($26) {
          return $25($26);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];          
  var mutableBufferEffect = {
      create: Node_Buffer_Internal.create(Effect.monadEffect),
      freeze: Node_Buffer_Internal.copyAll,
      unsafeFreeze: Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect),
      thaw: Node_Buffer_Internal.copyAll,
      unsafeThaw: Node_Buffer_Internal.unsafeThaw(Effect.monadEffect),
      fromArray: Node_Buffer_Internal.fromArray(Effect.monadEffect),
      fromString: Node_Buffer_Internal.fromString(Effect.monadEffect),
      fromArrayBuffer: Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect),
      toArrayBuffer: Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect),
      read: Node_Buffer_Internal.read(Effect.monadEffect),
      readString: Node_Buffer_Internal.readString(Effect.monadEffect),
      toString: Node_Buffer_Internal.toString(Effect.monadEffect),
      write: Node_Buffer_Internal.write(Effect.monadEffect),
      writeString: Node_Buffer_Internal.writeString(Effect.monadEffect),
      toArray: Node_Buffer_Internal.toArray(Effect.monadEffect),
      getAtOffset: Node_Buffer_Internal.getAtOffset(Effect.monadEffect),
      setAtOffset: Node_Buffer_Internal.setAtOffset,
      slice: Node_Buffer_Internal.slice,
      size: Node_Buffer_Internal.size(Effect.monadEffect),
      concat: Node_Buffer_Internal.concat,
      "concat'": Node_Buffer_Internal["concat'"](Effect.monadEffect),
      copy: Node_Buffer_Internal.copy,
      fill: Node_Buffer_Internal.fill,
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];
  var toString = function (dict) {
      return dict.toString;
  };
  var toArray = function (dict) {
      return dict.toArray;
  };
  var fromString = function (dict) {
      return dict.fromString;
  };
  var fromArray = function (dict) {
      return dict.fromArray;
  };
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Quotient"] = $PS["Type.Quotient"] || {};
  var exports = $PS["Type.Quotient"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Type_Proxy = $PS["Type.Proxy"];
  var canonicalMod256 = {
      canonical: function (v) {
          var $48 = Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt);
          return function ($49) {
              return $48((function (v1) {
                  return Data_Int.rem(v1)(256);
              })($49));
          };
      }
  };
  var canonical = function (dict) {
      return dict.canonical;
  };
  var runQuotient = function (dictCanonical) {
      return function (v) {
          return canonical(dictCanonical)(Type_Proxy["Proxy"].value)(v);
      };
  };
  exports["runQuotient"] = runQuotient;
  exports["canonicalMod256"] = canonicalMod256;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.ByteString"] = $PS["Data.ByteString"] || {};
  var exports = $PS["Data.ByteString"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Type_Quotient = $PS["Type.Quotient"];                
  var ByteString = function (x) {
      return x;
  };
  var unsafeThaw = function (v) {
      return v;
  };
  var unsafeFreeze = ByteString;
  var unpack = (function () {
      var $22 = Node_Buffer_Class.toArray(Node_Buffer.mutableBufferEffect);
      return function ($23) {
          return Effect_Unsafe.unsafePerformEffect($22(unsafeThaw($23)));
      };
  })();
  var toString = function (s) {
      return function (e) {
          return Effect_Unsafe.unsafePerformEffect(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(e)(unsafeThaw(s)));
      };
  };
  var pack = (function () {
      var $24 = Node_Buffer_Class.fromArray(Node_Buffer.mutableBufferEffect);
      var $25 = Data_Functor.map(Data_Functor.functorArray)(Type_Quotient.runQuotient(Type_Quotient.canonicalMod256));
      return function ($26) {
          return unsafeFreeze(Effect_Unsafe.unsafePerformEffect($24($25($26))));
      };
  })();
  var map = function (f) {
      var $32 = Data_Functor.map(Data_Functor.functorArray)(f);
      return function ($33) {
          return pack($32(unpack($33)));
      };
  };                                                                    
  var fromString = function (s) {
      return function (e) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeFreeze)(Effect_Unsafe.unsafePerformEffect(Effect_Exception.catchException(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value)))(Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(s)(e)))));
      };
  };
  exports["fromString"] = fromString;
  exports["toString"] = toString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["keys"] = keys;
  exports["values"] = values;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var toUnfoldable = function (dictUnfoldable) {
      var $65 = Data_List.toUnfoldable(dictUnfoldable);
      return function ($66) {
          return $65(toList($66));
      };
  };
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  };                  
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $67 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($68) {
                  return $67(toList($68));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $69 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($70) {
                  return $69(toList($70));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $71 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($72) {
                  return $71(toList($72));
              };
          };
      }
  };
  var empty = Data_Map_Internal.empty;
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Network.Ethereum.Core.HexString"] = $PS["Network.Ethereum.Core.HexString"] || {};
  var exports = $PS["Network.Ethereum.Core.HexString"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Node_Encoding = $PS["Node.Encoding"];
  var HexString = function (x) {
      return x;
  };
  var unHex = function (v) {
      return v;
  };                                            
  var mkHexString = function (str) {
      if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_String_CodePoints.length(str))(2) !== 0) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          var hexAlph = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordChar)(Data_String_CodeUnits.toCharArray("0123456789abcdefABCDEF"));
          var go = function ($copy_s) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(s) {
                  var v = Data_Array.uncons(s);
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var $24 = Data_Set.member(Data_Ord.ordChar)(v.value0.head)(hexAlph);
                      if ($24) {
                          $copy_s = v.value0.tail;
                          return;
                      };
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 131, column 16 - line 136, column 27): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_s);
              };
              return $tco_result;
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(HexString)((function () {
              var v = Data_String_CodeUnits.stripPrefix("0x")(str);
              if (v instanceof Data_Maybe.Nothing) {
                  var $29 = Data_Maybe.isJust(go(Data_String_CodeUnits.toCharArray(str)));
                  if ($29) {
                      return new Data_Maybe.Just(Data_String_Common.toLower(str));
                  };
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  var $30 = Data_Maybe.isJust(go(Data_String_CodeUnits.toCharArray(v.value0)));
                  if ($30) {
                      return new Data_Maybe.Just(Data_String_Common.toLower(v.value0));
                  };
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 122, column 7 - line 128, column 35): " + [ v.constructor.name ]);
          })());
      };
      throw new Error("Failed pattern match at Network.Ethereum.Core.HexString (line 118, column 1 - line 118, column 41): " + [ str.constructor.name ]);
  };
  var fromByteString = function (bs) {
      return Data_Maybe.fromJust()(mkHexString(Data_ByteString.toString(bs)(Node_Encoding.Hex.value)));
  };
  exports["unHex"] = unHex;
  exports["fromByteString"] = fromByteString;
})(PS);
(function(exports) {
  "use strict";
  var keccak =require("keccak"); 

  exports._keccak256 = function (a) {
      return keccak('keccak256').update(a).digest();
  };
})(PS["Network.Ethereum.Core.Keccak256"] = PS["Network.Ethereum.Core.Keccak256"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Network.Ethereum.Core.Keccak256"] = $PS["Network.Ethereum.Core.Keccak256"] || {};
  var exports = $PS["Network.Ethereum.Core.Keccak256"];
  var $foreign = $PS["Network.Ethereum.Core.Keccak256"];
  var Data_ByteString = $PS["Data.ByteString"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var keccak256ByteString = {
      keccak256: $foreign["_keccak256"]
  };
  var keccak256 = function (dict) {
      return dict.keccak256;
  };
  var keccak256String = {
      keccak256: (function () {
          var $3 = keccak256(keccak256ByteString);
          var $4 = Data_Maybe.fromJust();
          var $5 = Data_Function.flip(Data_ByteString.fromString)(Node_Encoding.UTF8.value);
          return function ($6) {
              return $3($4($5($6)));
          };
      })()
  };
  exports["keccak256"] = keccak256;
  exports["keccak256String"] = keccak256String;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var functorLazy = {
      map: function (f) {
          return function (l) {
              return $foreign.defer(function (v) {
                  return f($foreign.force(l));
              });
          };
      }
  };
  var applyLazy = {
      apply: function (f) {
          return function (x) {
              return $foreign.defer(function (v) {
                  return $foreign.force(f)($foreign.force(x));
              });
          };
      },
      Functor0: function () {
          return functorLazy;
      }
  };
  var bindLazy = {
      bind: function (l) {
          return function (f) {
              return $foreign.defer(function (v) {
                  return $foreign.force(f($foreign.force(l)));
              });
          };
      },
      Apply0: function () {
          return applyLazy;
      }
  };
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Dodo.Internal"] = $PS["Dodo.Internal"] || {};
  var exports = $PS["Dodo.Internal"];                    
  var Append = (function () {
      function Append(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Append.create = function (value0) {
          return function (value1) {
              return new Append(value0, value1);
          };
      };
      return Append;
  })();
  var Indent = (function () {
      function Indent(value0) {
          this.value0 = value0;
      };
      Indent.create = function (value0) {
          return new Indent(value0);
      };
      return Indent;
  })();
  var Align = (function () {
      function Align(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Align.create = function (value0) {
          return function (value1) {
              return new Align(value0, value1);
          };
      };
      return Align;
  })();
  var Annotate = (function () {
      function Annotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Annotate.create = function (value0) {
          return function (value1) {
              return new Annotate(value0, value1);
          };
      };
      return Annotate;
  })();
  var FlexSelect = (function () {
      function FlexSelect(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FlexSelect.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FlexSelect(value0, value1, value2);
              };
          };
      };
      return FlexSelect;
  })();
  var FlexAlt = (function () {
      function FlexAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlexAlt.create = function (value0) {
          return function (value1) {
              return new FlexAlt(value0, value1);
          };
      };
      return FlexAlt;
  })();
  var WithPosition = (function () {
      function WithPosition(value0) {
          this.value0 = value0;
      };
      WithPosition.create = function (value0) {
          return new WithPosition(value0);
      };
      return WithPosition;
  })();
  var Local = (function () {
      function Local(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Local.create = function (value0) {
          return function (value1) {
              return new Local(value0, value1);
          };
      };
      return Local;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Break = (function () {
      function Break() {

      };
      Break.value = new Break();
      return Break;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var notEmpty = function (f) {
      return function (v) {
          if (v instanceof Empty) {
              return Empty.value;
          };
          return f(v);
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Empty) {
          return true;
      };
      return false;
  };
  var bothNotEmpty = function (f) {
      return function (v) {
          return function (v1) {
              if (v instanceof Empty) {
                  return v1;
              };
              if (v1 instanceof Empty) {
                  return v;
              };
              return f(v)(v1);
          };
      };
  };
  var semigroupDoc = {
      append: bothNotEmpty(function (v) {
          return function (v1) {
              if (v instanceof Text && v1 instanceof Text) {
                  return new Text(v.value0 + v1.value0 | 0, v.value1 + v1.value1);
              };
              return new Append(v, v1);
          };
      })
  };
  var monoidDoc = {
      mempty: Empty.value,
      Semigroup0: function () {
          return semigroupDoc;
      }
  };
  exports["Append"] = Append;
  exports["Indent"] = Indent;
  exports["Align"] = Align;
  exports["Annotate"] = Annotate;
  exports["FlexSelect"] = FlexSelect;
  exports["FlexAlt"] = FlexAlt;
  exports["WithPosition"] = WithPosition;
  exports["Local"] = Local;
  exports["Text"] = Text;
  exports["Break"] = Break;
  exports["Empty"] = Empty;
  exports["bothNotEmpty"] = bothNotEmpty;
  exports["notEmpty"] = notEmpty;
  exports["isEmpty"] = isEmpty;
  exports["semigroupDoc"] = semigroupDoc;
  exports["monoidDoc"] = monoidDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Dodo.Internal.Buffer"] = $PS["Dodo.Internal.Buffer"] || {};
  var exports = $PS["Dodo.Internal.Buffer"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var $$new = function (buffer) {
      return {
          buffer: buffer,
          queue: Data_List_Types.Nil.value
      };
  };
  var modify = function (f) {
      return function (v) {
          if (v.queue instanceof Data_List_Types.Cons) {
              return {
                  buffer: v.buffer,
                  queue: new Data_List_Types.Cons(new Data_List_Types.Cons(f, v.queue.value0), v.queue.value1)
              };
          };
          return {
              buffer: f(v.buffer),
              queue: v.queue
          };
      };
  };
  var commit = function (v) {
      return {
          buffer: Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.flip(Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Function.apply)))(v.buffer)(v.queue),
          queue: Data_List_Types.Nil.value
      };
  };
  var get = function ($20) {
      return (function (v) {
          return v.buffer;
      })(commit($20));
  };
  var branch = function (v) {
      return {
          buffer: v.buffer,
          queue: new Data_List_Types.Cons(Data_List_Types.Nil.value, v.queue)
      };
  };
  exports["branch"] = branch;
  exports["commit"] = commit;
  exports["modify"] = modify;
  exports["get"] = get;
  exports["new"] = $$new;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Dodo"] = $PS["Dodo"] || {};
  var exports = $PS["Dodo"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Dodo_Internal_Buffer = $PS["Dodo.Internal.Buffer"];
  var Doc = (function () {
      function Doc(value0) {
          this.value0 = value0;
      };
      Doc.create = function (value0) {
          return new Doc(value0);
      };
      return Doc;
  })();
  var Dedent = (function () {
      function Dedent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Dedent.create = function (value0) {
          return function (value1) {
              return new Dedent(value0, value1);
          };
      };
      return Dedent;
  })();
  var LeaveAnnotation = (function () {
      function LeaveAnnotation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LeaveAnnotation.create = function (value0) {
          return function (value1) {
              return new LeaveAnnotation(value0, value1);
          };
      };
      return LeaveAnnotation;
  })();
  var LeaveFlexGroup = (function () {
      function LeaveFlexGroup(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LeaveFlexGroup.create = function (value0) {
          return function (value1) {
              return new LeaveFlexGroup(value0, value1);
          };
      };
      return LeaveFlexGroup;
  })();
  var LeaveLocal = (function () {
      function LeaveLocal(value0) {
          this.value0 = value0;
      };
      LeaveLocal.create = function (value0) {
          return new LeaveLocal(value0);
      };
      return LeaveLocal;
  })();
  var NoFlexGroup = (function () {
      function NoFlexGroup() {

      };
      NoFlexGroup.value = new NoFlexGroup();
      return NoFlexGroup;
  })();
  var FlexGroupPending = (function () {
      function FlexGroupPending() {

      };
      FlexGroupPending.value = new FlexGroupPending();
      return FlexGroupPending;
  })();
  var FlexGroupReset = (function () {
      function FlexGroupReset(value0) {
          this.value0 = value0;
      };
      FlexGroupReset.create = function (value0) {
          return new FlexGroupReset(value0);
      };
      return FlexGroupReset;
  })();
  var withPosition = Dodo_Internal.WithPosition.create;
  var text = function (v) {
      if (v === "") {
          return Dodo_Internal.Empty.value;
      };
      return new Dodo_Internal.Text(Data_String_CodePoints.length(v), v);
  };
  var storeState = function (stack) {
      return function (v) {
          return {
              position: v.position,
              buffer: v.buffer,
              annotations: v.annotations,
              indentSpaces: v.indentSpaces,
              stack: stack,
              options: v.options
          };
      };
  };
  var space = text(" ");
  var resetState = function (v) {
      return {
          position: v.position,
          buffer: v.buffer,
          annotations: v.annotations,
          indentSpaces: v.indentSpaces,
          flexGroup: NoFlexGroup.value,
          options: v.options
      };
  };
  var plainText = {
      emptyBuffer: "",
      writeText: function (v) {
          return function (str) {
              return function (buff) {
                  return buff + str;
              };
          };
      },
      writeIndent: function (v) {
          return function (str) {
              return function (buff) {
                  return buff + str;
              };
          };
      },
      writeBreak: function (buff) {
          return buff + "\x0a";
      },
      enterAnnotation: function (v) {
          return function (v1) {
              return function (buff) {
                  return buff;
              };
          };
      },
      leaveAnnotation: function (v) {
          return function (v1) {
              return function (buff) {
                  return buff;
              };
          };
      },
      flushBuffer: function (buff) {
          return buff;
      }
  };
  var locally = Dodo_Internal.Local.create;
  var indent = Dodo_Internal.notEmpty(Dodo_Internal.Indent.create);
  var flexSelect = function (doc1) {
      return function (doc2) {
          return function (doc3) {
              if (Dodo_Internal.isEmpty(doc1)) {
                  return doc2;
              };
              if (Data_Boolean.otherwise) {
                  return new Dodo_Internal.FlexSelect(doc1, doc2, doc3);
              };
              throw new Error("Failed pattern match at Dodo (line 87, column 1 - line 87, column 57): " + [ doc1.constructor.name, doc2.constructor.name, doc3.constructor.name ]);
          };
      };
  };
  var flexGroup = Dodo_Internal.notEmpty(function (v) {
      if (v instanceof Dodo_Internal.FlexSelect && (Dodo_Internal.isEmpty(v.value1) && Dodo_Internal.isEmpty(v.value2))) {
          return v;
      };
      return new Dodo_Internal.FlexSelect(v, Dodo_Internal.Empty.value, Dodo_Internal.Empty.value);
  });
  var flexAlt = Dodo_Internal.FlexAlt.create;
  var calcRibbonWidth = function (v) {
      return function (n) {
          return Data_Ord.max(Data_Ord.ordInt)(0)(Data_Int.ceil(v.ribbonRatio * Data_Int.toNumber(v.pageWidth - n | 0)));
      };
  };
  var storeOptions = function (prevIndent) {
      return function (localOptions) {
          return function (state) {
              var newOptions = {
                  indentUnit: localOptions.indentUnit,
                  indentWidth: localOptions.indentWidth,
                  pageWidth: localOptions.pageWidth,
                  ribbonRatio: localOptions.ribbonRatio
              };
              return {
                  position: {
                      line: state.position.line,
                      column: state.position.column,
                      indent: state.position.indent,
                      nextIndent: localOptions.indent,
                      pageWidth: newOptions.pageWidth,
                      ribbonWidth: calcRibbonWidth(newOptions)(prevIndent)
                  },
                  buffer: state.buffer,
                  annotations: state.annotations,
                  indentSpaces: localOptions.indentSpaces,
                  flexGroup: state.flexGroup,
                  options: newOptions
              };
          };
      };
  };
  var print = function (v) {
      return function (opts) {
          var initOptions = {
              pageWidth: opts.pageWidth,
              ribbonRatio: Data_Ord.max(Data_Ord.ordNumber)(0.0)(Data_Ord.min(Data_Ord.ordNumber)(1.0)(opts.ribbonRatio)),
              indentUnit: opts.indentUnit,
              indentWidth: opts.indentWidth
          };
          var initState = {
              position: {
                  line: 0,
                  column: 0,
                  indent: 0,
                  nextIndent: 0,
                  pageWidth: initOptions.pageWidth,
                  ribbonWidth: calcRibbonWidth(initOptions)(0)
              },
              buffer: Dodo_Internal_Buffer["new"](v.emptyBuffer),
              annotations: Data_List_Types.Nil.value,
              indentSpaces: "",
              flexGroup: NoFlexGroup.value,
              options: initOptions
          };
          var go = function ($copy_stack) {
              return function ($copy_state) {
                  var $tco_var_stack = $copy_stack;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(stack, state) {
                      if (stack instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return v.flushBuffer(Dodo_Internal_Buffer.get(state.buffer));
                      };
                      if (stack instanceof Data_List_Types.Cons) {
                          if (stack.value0 instanceof Doc) {
                              if (stack.value0.value0 instanceof Dodo_Internal.Append) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Text) {
                                  if (state.position.column === 0 && state.position.indent > 0) {
                                      $tco_var_stack = stack;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.indent,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeIndent(state.position.indent)(state.indentSpaces))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if ((state.position.column + stack.value0.value0.value0 | 0) <= (state.position.indent + state.position.ribbonWidth | 0)) {
                                      $tco_var_stack = stack.value1;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column + stack.value0.value0.value0 | 0,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      if (state.flexGroup instanceof FlexGroupReset) {
                                          $tco_var_stack = state.flexGroup.value0.stack;
                                          $copy_state = resetState(state.flexGroup.value0);
                                          return;
                                      };
                                      $tco_var_stack = stack.value1;
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column + stack.value0.value0.value0 | 0,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: Dodo_Internal_Buffer.modify(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: NoFlexGroup.value,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Break) {
                                  if (state.flexGroup instanceof FlexGroupReset) {
                                      $tco_var_stack = state.flexGroup.value0.stack;
                                      $copy_state = resetState(state.flexGroup.value0);
                                      return;
                                  };
                                  $tco_var_stack = stack.value1;
                                  $copy_state = {
                                      position: {
                                          line: state.position.line + 1 | 0,
                                          column: 0,
                                          indent: state.position.nextIndent,
                                          nextIndent: state.position.nextIndent,
                                          pageWidth: state.position.pageWidth,
                                          ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent)
                                      },
                                      buffer: Dodo_Internal_Buffer.modify(v.writeBreak)(state.buffer),
                                      annotations: state.annotations,
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: NoFlexGroup.value,
                                      options: state.options
                                  };
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Indent) {
                                  if (state.position.column === 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.nextIndent + opts.indentWidth | 0,
                                              nextIndent: state.position.nextIndent + opts.indentWidth | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent + opts.indentWidth | 0)
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + opts.indentUnit,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent + opts.indentWidth | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + opts.indentUnit,
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Align) {
                                  if (state.position.column === 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              nextIndent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: calcRibbonWidth(state.options)(state.position.nextIndent + stack.value0.value0.value0 | 0)
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + Data_Monoid.power(Data_Monoid.monoidString)(" ")(stack.value0.value0.value0),
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new Dedent(state.indentSpaces, state.position.nextIndent), stack.value1));
                                      $copy_state = {
                                          position: {
                                              line: state.position.line,
                                              column: state.position.column,
                                              indent: state.position.indent,
                                              nextIndent: state.position.nextIndent + stack.value0.value0.value0 | 0,
                                              pageWidth: state.position.pageWidth,
                                              ribbonWidth: state.position.ribbonWidth
                                          },
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces + Data_Monoid.power(Data_Monoid.monoidString)(" ")(stack.value0.value0.value0),
                                          flexGroup: state.flexGroup,
                                          options: state.options
                                      };
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.FlexSelect) {
                                  if (state.flexGroup instanceof NoFlexGroup) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new LeaveFlexGroup(stack.value0.value0.value1, stack.value0.value0.value2), stack.value1));
                                      $copy_state = {
                                          position: state.position,
                                          buffer: state.buffer,
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: FlexGroupPending.value,
                                          options: state.options
                                      };
                                      return;
                                  };
                                  if (state.flexGroup instanceof FlexGroupPending && state.position.ribbonWidth > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                      $copy_state = {
                                          position: state.position,
                                          buffer: Dodo_Internal_Buffer.branch(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: new FlexGroupReset(storeState(stack)(state)),
                                          options: state.options
                                      };
                                      return;
                                  };
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1));
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.FlexAlt) {
                                  if (state.flexGroup instanceof FlexGroupReset) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                                  if (state.flexGroup instanceof FlexGroupPending && state.position.ribbonWidth > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0), stack.value1);
                                      $copy_state = {
                                          position: state.position,
                                          buffer: Dodo_Internal_Buffer.branch(state.buffer),
                                          annotations: state.annotations,
                                          indentSpaces: state.indentSpaces,
                                          flexGroup: new FlexGroupReset(storeState(new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1))(state)),
                                          options: state.options
                                      };
                                      return;
                                  };
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), stack.value1);
                                  $copy_state = state;
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.WithPosition) {
                                  if (state.position.column === 0 && state.position.nextIndent > 0) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0({
                                          line: state.position.line,
                                          column: state.position.nextIndent,
                                          indent: state.position.indent,
                                          nextIndent: state.position.nextIndent,
                                          pageWidth: state.position.pageWidth,
                                          ribbonWidth: state.position.ribbonWidth
                                      })), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value0(state.position)), stack.value1);
                                      $copy_state = state;
                                      return;
                                  };
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Annotate) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new LeaveAnnotation(stack.value0.value0.value0, state.annotations), stack.value1));
                                  $copy_state = {
                                      position: state.position,
                                      buffer: Dodo_Internal_Buffer.modify(v.enterAnnotation(stack.value0.value0.value0)(state.annotations))(state.buffer),
                                      annotations: new Data_List_Types.Cons(stack.value0.value0.value0, state.annotations),
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: state.flexGroup,
                                      options: state.options
                                  };
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Local) {
                                  var prevOptions = {
                                      indent: state.position.indent,
                                      indentSpaces: state.indentSpaces,
                                      indentUnit: state.options.indentUnit,
                                      indentWidth: state.options.indentWidth,
                                      pageWidth: state.options.pageWidth,
                                      ribbonRatio: state.options.ribbonRatio
                                  };
                                  var localOptions = stack.value0.value0.value0(prevOptions);
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0.value1), new Data_List_Types.Cons(new LeaveLocal(prevOptions), stack.value1));
                                  $copy_state = storeOptions(state.position.indent)(localOptions)(state);
                                  return;
                              };
                              if (stack.value0.value0 instanceof Dodo_Internal.Empty) {
                                  $tco_var_stack = stack.value1;
                                  $copy_state = state;
                                  return;
                              };
                              throw new Error("Failed pattern match at Dodo (line 357, column 18 - line 469, column 23): " + [ stack.value0.value0.constructor.name ]);
                          };
                          if (stack.value0 instanceof LeaveFlexGroup) {
                              if (state.flexGroup instanceof NoFlexGroup) {
                                  $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value1), stack.value1);
                                  $copy_state = {
                                      position: state.position,
                                      buffer: Dodo_Internal_Buffer.commit(state.buffer),
                                      annotations: state.annotations,
                                      indentSpaces: state.indentSpaces,
                                      flexGroup: state.flexGroup,
                                      options: state.options
                                  };
                                  return;
                              };
                              $tco_var_stack = new Data_List_Types.Cons(new Doc(stack.value0.value0), stack.value1);
                              $copy_state = {
                                  position: state.position,
                                  buffer: Dodo_Internal_Buffer.commit(state.buffer),
                                  annotations: state.annotations,
                                  indentSpaces: state.indentSpaces,
                                  flexGroup: NoFlexGroup.value,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof Dedent) {
                              $tco_var_stack = stack.value1;
                              $copy_state = {
                                  position: {
                                      line: state.position.line,
                                      column: state.position.column,
                                      indent: state.position.indent,
                                      nextIndent: stack.value0.value1,
                                      pageWidth: state.position.pageWidth,
                                      ribbonWidth: state.position.ribbonWidth
                                  },
                                  buffer: state.buffer,
                                  annotations: state.annotations,
                                  indentSpaces: stack.value0.value0,
                                  flexGroup: state.flexGroup,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof LeaveAnnotation) {
                              $tco_var_stack = stack.value1;
                              $copy_state = {
                                  position: state.position,
                                  buffer: Dodo_Internal_Buffer.modify(v.leaveAnnotation(stack.value0.value0)(stack.value0.value1))(state.buffer),
                                  annotations: stack.value0.value1,
                                  indentSpaces: state.indentSpaces,
                                  flexGroup: state.flexGroup,
                                  options: state.options
                              };
                              return;
                          };
                          if (stack.value0 instanceof LeaveLocal) {
                              $tco_var_stack = stack.value1;
                              $copy_state = storeOptions(state.position.indent)(stack.value0.value0)(state);
                              return;
                          };
                          throw new Error("Failed pattern match at Dodo (line 356, column 18 - line 491, column 70): " + [ stack.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Dodo (line 353, column 20 - line 491, column 70): " + [ stack.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_stack, $copy_state);
                  };
                  return $tco_result;
              };
          };
          var $108 = Data_Function.flip(go)(initState);
          var $109 = Control_Applicative.pure(Data_List_Types.applicativeList);
          return function ($110) {
              return $108($109(Doc.create($110)));
          };
      };
  };
  var $$break = Dodo_Internal.Break.value;
  var softBreak = flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))($$break);
  var spaceBreak = flexAlt(space)($$break);
  var appendBreak = Dodo_Internal.bothNotEmpty(function (a) {
      return function (b) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(a)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)($$break)(b));
      };
  });
  var lines = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(appendBreak)(Dodo_Internal.Empty.value);
  };
  var align = function (n) {
      return function (doc) {
          if (n > 0) {
              return Dodo_Internal.notEmpty(Dodo_Internal.Align.create(n))(doc);
          };
          if (Data_Boolean.otherwise) {
              return doc;
          };
          throw new Error("Failed pattern match at Dodo (line 62, column 1 - line 62, column 41): " + [ n.constructor.name, doc.constructor.name ]);
      };
  };
  var alignCurrentColumn = Dodo_Internal.notEmpty(function (doc) {
      return withPosition(function (pos) {
          return align(pos.column - pos.nextIndent | 0)(doc);
      });
  });
  exports["indent"] = indent;
  exports["align"] = align;
  exports["alignCurrentColumn"] = alignCurrentColumn;
  exports["withPosition"] = withPosition;
  exports["text"] = text;
  exports["break"] = $$break;
  exports["spaceBreak"] = spaceBreak;
  exports["softBreak"] = softBreak;
  exports["space"] = space;
  exports["lines"] = lines;
  exports["flexAlt"] = flexAlt;
  exports["flexGroup"] = flexGroup;
  exports["flexSelect"] = flexSelect;
  exports["locally"] = locally;
  exports["print"] = print;
  exports["plainText"] = plainText;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["PureScript.CST.Types"] = $PS["PureScript.CST.Types"] || {};
  var exports = $PS["PureScript.CST.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var Unicode = (function () {
      function Unicode() {

      };
      Unicode.value = new Unicode();
      return Unicode;
  })();
  var LF = (function () {
      function LF() {

      };
      LF.value = new LF();
      return LF;
  })();
  var CRLF = (function () {
      function CRLF() {

      };
      CRLF.value = new CRLF();
      return CRLF;
  })();
  var SmallInt = (function () {
      function SmallInt(value0) {
          this.value0 = value0;
      };
      SmallInt.create = function (value0) {
          return new SmallInt(value0);
      };
      return SmallInt;
  })();
  var BigInt = (function () {
      function BigInt(value0) {
          this.value0 = value0;
      };
      BigInt.create = function (value0) {
          return new BigInt(value0);
      };
      return BigInt;
  })();
  var BigHex = (function () {
      function BigHex(value0) {
          this.value0 = value0;
      };
      BigHex.create = function (value0) {
          return new BigHex(value0);
      };
      return BigHex;
  })();
  var TokLeftParen = (function () {
      function TokLeftParen() {

      };
      TokLeftParen.value = new TokLeftParen();
      return TokLeftParen;
  })();
  var TokRightParen = (function () {
      function TokRightParen() {

      };
      TokRightParen.value = new TokRightParen();
      return TokRightParen;
  })();
  var TokLeftBrace = (function () {
      function TokLeftBrace() {

      };
      TokLeftBrace.value = new TokLeftBrace();
      return TokLeftBrace;
  })();
  var TokRightBrace = (function () {
      function TokRightBrace() {

      };
      TokRightBrace.value = new TokRightBrace();
      return TokRightBrace;
  })();
  var TokLeftSquare = (function () {
      function TokLeftSquare() {

      };
      TokLeftSquare.value = new TokLeftSquare();
      return TokLeftSquare;
  })();
  var TokRightSquare = (function () {
      function TokRightSquare() {

      };
      TokRightSquare.value = new TokRightSquare();
      return TokRightSquare;
  })();
  var TokLeftArrow = (function () {
      function TokLeftArrow(value0) {
          this.value0 = value0;
      };
      TokLeftArrow.create = function (value0) {
          return new TokLeftArrow(value0);
      };
      return TokLeftArrow;
  })();
  var TokRightArrow = (function () {
      function TokRightArrow(value0) {
          this.value0 = value0;
      };
      TokRightArrow.create = function (value0) {
          return new TokRightArrow(value0);
      };
      return TokRightArrow;
  })();
  var TokRightFatArrow = (function () {
      function TokRightFatArrow(value0) {
          this.value0 = value0;
      };
      TokRightFatArrow.create = function (value0) {
          return new TokRightFatArrow(value0);
      };
      return TokRightFatArrow;
  })();
  var TokDoubleColon = (function () {
      function TokDoubleColon(value0) {
          this.value0 = value0;
      };
      TokDoubleColon.create = function (value0) {
          return new TokDoubleColon(value0);
      };
      return TokDoubleColon;
  })();
  var TokForall = (function () {
      function TokForall(value0) {
          this.value0 = value0;
      };
      TokForall.create = function (value0) {
          return new TokForall(value0);
      };
      return TokForall;
  })();
  var TokEquals = (function () {
      function TokEquals() {

      };
      TokEquals.value = new TokEquals();
      return TokEquals;
  })();
  var TokPipe = (function () {
      function TokPipe() {

      };
      TokPipe.value = new TokPipe();
      return TokPipe;
  })();
  var TokTick = (function () {
      function TokTick() {

      };
      TokTick.value = new TokTick();
      return TokTick;
  })();
  var TokDot = (function () {
      function TokDot() {

      };
      TokDot.value = new TokDot();
      return TokDot;
  })();
  var TokComma = (function () {
      function TokComma() {

      };
      TokComma.value = new TokComma();
      return TokComma;
  })();
  var TokUnderscore = (function () {
      function TokUnderscore() {

      };
      TokUnderscore.value = new TokUnderscore();
      return TokUnderscore;
  })();
  var TokBackslash = (function () {
      function TokBackslash() {

      };
      TokBackslash.value = new TokBackslash();
      return TokBackslash;
  })();
  var TokAt = (function () {
      function TokAt() {

      };
      TokAt.value = new TokAt();
      return TokAt;
  })();
  var TokLowerName = (function () {
      function TokLowerName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokLowerName.create = function (value0) {
          return function (value1) {
              return new TokLowerName(value0, value1);
          };
      };
      return TokLowerName;
  })();
  var TokUpperName = (function () {
      function TokUpperName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokUpperName.create = function (value0) {
          return function (value1) {
              return new TokUpperName(value0, value1);
          };
      };
      return TokUpperName;
  })();
  var TokOperator = (function () {
      function TokOperator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokOperator.create = function (value0) {
          return function (value1) {
              return new TokOperator(value0, value1);
          };
      };
      return TokOperator;
  })();
  var TokSymbolName = (function () {
      function TokSymbolName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokSymbolName.create = function (value0) {
          return function (value1) {
              return new TokSymbolName(value0, value1);
          };
      };
      return TokSymbolName;
  })();
  var TokSymbolArrow = (function () {
      function TokSymbolArrow(value0) {
          this.value0 = value0;
      };
      TokSymbolArrow.create = function (value0) {
          return new TokSymbolArrow(value0);
      };
      return TokSymbolArrow;
  })();
  var TokHole = (function () {
      function TokHole(value0) {
          this.value0 = value0;
      };
      TokHole.create = function (value0) {
          return new TokHole(value0);
      };
      return TokHole;
  })();
  var TokChar = (function () {
      function TokChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokChar.create = function (value0) {
          return function (value1) {
              return new TokChar(value0, value1);
          };
      };
      return TokChar;
  })();
  var TokString = (function () {
      function TokString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokString.create = function (value0) {
          return function (value1) {
              return new TokString(value0, value1);
          };
      };
      return TokString;
  })();
  var TokRawString = (function () {
      function TokRawString(value0) {
          this.value0 = value0;
      };
      TokRawString.create = function (value0) {
          return new TokRawString(value0);
      };
      return TokRawString;
  })();
  var TokInt = (function () {
      function TokInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokInt.create = function (value0) {
          return function (value1) {
              return new TokInt(value0, value1);
          };
      };
      return TokInt;
  })();
  var TokNumber = (function () {
      function TokNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokNumber.create = function (value0) {
          return function (value1) {
              return new TokNumber(value0, value1);
          };
      };
      return TokNumber;
  })();
  var TokLayoutStart = (function () {
      function TokLayoutStart(value0) {
          this.value0 = value0;
      };
      TokLayoutStart.create = function (value0) {
          return new TokLayoutStart(value0);
      };
      return TokLayoutStart;
  })();
  var TokLayoutSep = (function () {
      function TokLayoutSep(value0) {
          this.value0 = value0;
      };
      TokLayoutSep.create = function (value0) {
          return new TokLayoutSep(value0);
      };
      return TokLayoutSep;
  })();
  var TokLayoutEnd = (function () {
      function TokLayoutEnd(value0) {
          this.value0 = value0;
      };
      TokLayoutEnd.create = function (value0) {
          return new TokLayoutEnd(value0);
      };
      return TokLayoutEnd;
  })();
  var Comment = (function () {
      function Comment(value0) {
          this.value0 = value0;
      };
      Comment.create = function (value0) {
          return new Comment(value0);
      };
      return Comment;
  })();
  var Space = (function () {
      function Space(value0) {
          this.value0 = value0;
      };
      Space.create = function (value0) {
          return new Space(value0);
      };
      return Space;
  })();
  var Line = (function () {
      function Line(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Line.create = function (value0) {
          return function (value1) {
              return new Line(value0, value1);
          };
      };
      return Line;
  })();
  var FixityValue = (function () {
      function FixityValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FixityValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FixityValue(value0, value1, value2);
              };
          };
      };
      return FixityValue;
  })();
  var FixityType = (function () {
      function FixityType(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FixityType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FixityType(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FixityType;
  })();
  var RecordPun = (function () {
      function RecordPun(value0) {
          this.value0 = value0;
      };
      RecordPun.create = function (value0) {
          return new RecordPun(value0);
      };
      return RecordPun;
  })();
  var RecordField = (function () {
      function RecordField(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordField.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordField(value0, value1, value2);
              };
          };
      };
      return RecordField;
  })();
  var Wrapped = function (x) {
      return x;
  };
  var DataAll = (function () {
      function DataAll(value0) {
          this.value0 = value0;
      };
      DataAll.create = function (value0) {
          return new DataAll(value0);
      };
      return DataAll;
  })();
  var DataEnumerated = (function () {
      function DataEnumerated(value0) {
          this.value0 = value0;
      };
      DataEnumerated.create = function (value0) {
          return new DataEnumerated(value0);
      };
      return DataEnumerated;
  })();
  var ExportValue = (function () {
      function ExportValue(value0) {
          this.value0 = value0;
      };
      ExportValue.create = function (value0) {
          return new ExportValue(value0);
      };
      return ExportValue;
  })();
  var ExportOp = (function () {
      function ExportOp(value0) {
          this.value0 = value0;
      };
      ExportOp.create = function (value0) {
          return new ExportOp(value0);
      };
      return ExportOp;
  })();
  var ExportType = (function () {
      function ExportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportType.create = function (value0) {
          return function (value1) {
              return new ExportType(value0, value1);
          };
      };
      return ExportType;
  })();
  var ExportTypeOp = (function () {
      function ExportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportTypeOp.create = function (value0) {
          return function (value1) {
              return new ExportTypeOp(value0, value1);
          };
      };
      return ExportTypeOp;
  })();
  var ExportClass = (function () {
      function ExportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportClass.create = function (value0) {
          return function (value1) {
              return new ExportClass(value0, value1);
          };
      };
      return ExportClass;
  })();
  var ExportKind = (function () {
      function ExportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportKind.create = function (value0) {
          return function (value1) {
              return new ExportKind(value0, value1);
          };
      };
      return ExportKind;
  })();
  var ExportModule = (function () {
      function ExportModule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExportModule.create = function (value0) {
          return function (value1) {
              return new ExportModule(value0, value1);
          };
      };
      return ExportModule;
  })();
  var ExportError = (function () {
      function ExportError(value0) {
          this.value0 = value0;
      };
      ExportError.create = function (value0) {
          return new ExportError(value0);
      };
      return ExportError;
  })();
  var ImportValue = (function () {
      function ImportValue(value0) {
          this.value0 = value0;
      };
      ImportValue.create = function (value0) {
          return new ImportValue(value0);
      };
      return ImportValue;
  })();
  var ImportOp = (function () {
      function ImportOp(value0) {
          this.value0 = value0;
      };
      ImportOp.create = function (value0) {
          return new ImportOp(value0);
      };
      return ImportOp;
  })();
  var ImportType = (function () {
      function ImportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportType.create = function (value0) {
          return function (value1) {
              return new ImportType(value0, value1);
          };
      };
      return ImportType;
  })();
  var ImportTypeOp = (function () {
      function ImportTypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportTypeOp.create = function (value0) {
          return function (value1) {
              return new ImportTypeOp(value0, value1);
          };
      };
      return ImportTypeOp;
  })();
  var ImportClass = (function () {
      function ImportClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportClass.create = function (value0) {
          return function (value1) {
              return new ImportClass(value0, value1);
          };
      };
      return ImportClass;
  })();
  var ImportKind = (function () {
      function ImportKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportKind.create = function (value0) {
          return function (value1) {
              return new ImportKind(value0, value1);
          };
      };
      return ImportKind;
  })();
  var ImportError = (function () {
      function ImportError(value0) {
          this.value0 = value0;
      };
      ImportError.create = function (value0) {
          return new ImportError(value0);
      };
      return ImportError;
  })();
  var One = (function () {
      function One(value0) {
          this.value0 = value0;
      };
      One.create = function (value0) {
          return new One(value0);
      };
      return One;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var TypeVarKinded = (function () {
      function TypeVarKinded(value0) {
          this.value0 = value0;
      };
      TypeVarKinded.create = function (value0) {
          return new TypeVarKinded(value0);
      };
      return TypeVarKinded;
  })();
  var TypeVarName = (function () {
      function TypeVarName(value0) {
          this.value0 = value0;
      };
      TypeVarName.create = function (value0) {
          return new TypeVarName(value0);
      };
      return TypeVarName;
  })();
  var TypeVar = (function () {
      function TypeVar(value0) {
          this.value0 = value0;
      };
      TypeVar.create = function (value0) {
          return new TypeVar(value0);
      };
      return TypeVar;
  })();
  var TypeConstructor = (function () {
      function TypeConstructor(value0) {
          this.value0 = value0;
      };
      TypeConstructor.create = function (value0) {
          return new TypeConstructor(value0);
      };
      return TypeConstructor;
  })();
  var TypeWildcard = (function () {
      function TypeWildcard(value0) {
          this.value0 = value0;
      };
      TypeWildcard.create = function (value0) {
          return new TypeWildcard(value0);
      };
      return TypeWildcard;
  })();
  var TypeHole = (function () {
      function TypeHole(value0) {
          this.value0 = value0;
      };
      TypeHole.create = function (value0) {
          return new TypeHole(value0);
      };
      return TypeHole;
  })();
  var TypeString = (function () {
      function TypeString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeString.create = function (value0) {
          return function (value1) {
              return new TypeString(value0, value1);
          };
      };
      return TypeString;
  })();
  var TypeRow = (function () {
      function TypeRow(value0) {
          this.value0 = value0;
      };
      TypeRow.create = function (value0) {
          return new TypeRow(value0);
      };
      return TypeRow;
  })();
  var TypeRecord = (function () {
      function TypeRecord(value0) {
          this.value0 = value0;
      };
      TypeRecord.create = function (value0) {
          return new TypeRecord(value0);
      };
      return TypeRecord;
  })();
  var TypeForall = (function () {
      function TypeForall(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TypeForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TypeForall(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TypeForall;
  })();
  var TypeKinded = (function () {
      function TypeKinded(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeKinded.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeKinded(value0, value1, value2);
              };
          };
      };
      return TypeKinded;
  })();
  var TypeApp = (function () {
      function TypeApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeApp.create = function (value0) {
          return function (value1) {
              return new TypeApp(value0, value1);
          };
      };
      return TypeApp;
  })();
  var TypeOp = (function () {
      function TypeOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeOp.create = function (value0) {
          return function (value1) {
              return new TypeOp(value0, value1);
          };
      };
      return TypeOp;
  })();
  var TypeOpName = (function () {
      function TypeOpName(value0) {
          this.value0 = value0;
      };
      TypeOpName.create = function (value0) {
          return new TypeOpName(value0);
      };
      return TypeOpName;
  })();
  var TypeArrow = (function () {
      function TypeArrow(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeArrow.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeArrow(value0, value1, value2);
              };
          };
      };
      return TypeArrow;
  })();
  var TypeArrowName = (function () {
      function TypeArrowName(value0) {
          this.value0 = value0;
      };
      TypeArrowName.create = function (value0) {
          return new TypeArrowName(value0);
      };
      return TypeArrowName;
  })();
  var TypeConstrained = (function () {
      function TypeConstrained(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TypeConstrained.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TypeConstrained(value0, value1, value2);
              };
          };
      };
      return TypeConstrained;
  })();
  var TypeParens = (function () {
      function TypeParens(value0) {
          this.value0 = value0;
      };
      TypeParens.create = function (value0) {
          return new TypeParens(value0);
      };
      return TypeParens;
  })();
  var TypeUnaryRow = (function () {
      function TypeUnaryRow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeUnaryRow.create = function (value0) {
          return function (value1) {
              return new TypeUnaryRow(value0, value1);
          };
      };
      return TypeUnaryRow;
  })();
  var $$TypeError = (function () {
      function $$TypeError(value0) {
          this.value0 = value0;
      };
      $$TypeError.create = function (value0) {
          return new $$TypeError(value0);
      };
      return $$TypeError;
  })();
  var ForeignValue = (function () {
      function ForeignValue(value0) {
          this.value0 = value0;
      };
      ForeignValue.create = function (value0) {
          return new ForeignValue(value0);
      };
      return ForeignValue;
  })();
  var ForeignData = (function () {
      function ForeignData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignData.create = function (value0) {
          return function (value1) {
              return new ForeignData(value0, value1);
          };
      };
      return ForeignData;
  })();
  var ForeignKind = (function () {
      function ForeignKind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ForeignKind.create = function (value0) {
          return function (value1) {
              return new ForeignKind(value0, value1);
          };
      };
      return ForeignKind;
  })();
  var FundepDetermined = (function () {
      function FundepDetermined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FundepDetermined.create = function (value0) {
          return function (value1) {
              return new FundepDetermined(value0, value1);
          };
      };
      return FundepDetermined;
  })();
  var FundepDetermines = (function () {
      function FundepDetermines(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FundepDetermines.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FundepDetermines(value0, value1, value2);
              };
          };
      };
      return FundepDetermines;
  })();
  var BinderWildcard = (function () {
      function BinderWildcard(value0) {
          this.value0 = value0;
      };
      BinderWildcard.create = function (value0) {
          return new BinderWildcard(value0);
      };
      return BinderWildcard;
  })();
  var BinderVar = (function () {
      function BinderVar(value0) {
          this.value0 = value0;
      };
      BinderVar.create = function (value0) {
          return new BinderVar(value0);
      };
      return BinderVar;
  })();
  var BinderNamed = (function () {
      function BinderNamed(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNamed.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNamed(value0, value1, value2);
              };
          };
      };
      return BinderNamed;
  })();
  var BinderConstructor = (function () {
      function BinderConstructor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderConstructor.create = function (value0) {
          return function (value1) {
              return new BinderConstructor(value0, value1);
          };
      };
      return BinderConstructor;
  })();
  var BinderBoolean = (function () {
      function BinderBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderBoolean.create = function (value0) {
          return function (value1) {
              return new BinderBoolean(value0, value1);
          };
      };
      return BinderBoolean;
  })();
  var BinderChar = (function () {
      function BinderChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderChar.create = function (value0) {
          return function (value1) {
              return new BinderChar(value0, value1);
          };
      };
      return BinderChar;
  })();
  var BinderString = (function () {
      function BinderString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderString.create = function (value0) {
          return function (value1) {
              return new BinderString(value0, value1);
          };
      };
      return BinderString;
  })();
  var BinderInt = (function () {
      function BinderInt(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderInt.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderInt(value0, value1, value2);
              };
          };
      };
      return BinderInt;
  })();
  var BinderNumber = (function () {
      function BinderNumber(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderNumber.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderNumber(value0, value1, value2);
              };
          };
      };
      return BinderNumber;
  })();
  var BinderArray = (function () {
      function BinderArray(value0) {
          this.value0 = value0;
      };
      BinderArray.create = function (value0) {
          return new BinderArray(value0);
      };
      return BinderArray;
  })();
  var BinderRecord = (function () {
      function BinderRecord(value0) {
          this.value0 = value0;
      };
      BinderRecord.create = function (value0) {
          return new BinderRecord(value0);
      };
      return BinderRecord;
  })();
  var BinderParens = (function () {
      function BinderParens(value0) {
          this.value0 = value0;
      };
      BinderParens.create = function (value0) {
          return new BinderParens(value0);
      };
      return BinderParens;
  })();
  var BinderTyped = (function () {
      function BinderTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      BinderTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new BinderTyped(value0, value1, value2);
              };
          };
      };
      return BinderTyped;
  })();
  var BinderOp = (function () {
      function BinderOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BinderOp.create = function (value0) {
          return function (value1) {
              return new BinderOp(value0, value1);
          };
      };
      return BinderOp;
  })();
  var BinderError = (function () {
      function BinderError(value0) {
          this.value0 = value0;
      };
      BinderError.create = function (value0) {
          return new BinderError(value0);
      };
      return BinderError;
  })();
  var DoLet = (function () {
      function DoLet(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DoLet.create = function (value0) {
          return function (value1) {
              return new DoLet(value0, value1);
          };
      };
      return DoLet;
  })();
  var DoDiscard = (function () {
      function DoDiscard(value0) {
          this.value0 = value0;
      };
      DoDiscard.create = function (value0) {
          return new DoDiscard(value0);
      };
      return DoDiscard;
  })();
  var DoBind = (function () {
      function DoBind(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DoBind.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DoBind(value0, value1, value2);
              };
          };
      };
      return DoBind;
  })();
  var DoError = (function () {
      function DoError(value0) {
          this.value0 = value0;
      };
      DoError.create = function (value0) {
          return new DoError(value0);
      };
      return DoError;
  })();
  var LetBindingSignature = (function () {
      function LetBindingSignature(value0) {
          this.value0 = value0;
      };
      LetBindingSignature.create = function (value0) {
          return new LetBindingSignature(value0);
      };
      return LetBindingSignature;
  })();
  var LetBindingName = (function () {
      function LetBindingName(value0) {
          this.value0 = value0;
      };
      LetBindingName.create = function (value0) {
          return new LetBindingName(value0);
      };
      return LetBindingName;
  })();
  var LetBindingPattern = (function () {
      function LetBindingPattern(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LetBindingPattern.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LetBindingPattern(value0, value1, value2);
              };
          };
      };
      return LetBindingPattern;
  })();
  var LetBindingError = (function () {
      function LetBindingError(value0) {
          this.value0 = value0;
      };
      LetBindingError.create = function (value0) {
          return new LetBindingError(value0);
      };
      return LetBindingError;
  })();
  var Unconditional = (function () {
      function Unconditional(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Unconditional.create = function (value0) {
          return function (value1) {
              return new Unconditional(value0, value1);
          };
      };
      return Unconditional;
  })();
  var Guarded = (function () {
      function Guarded(value0) {
          this.value0 = value0;
      };
      Guarded.create = function (value0) {
          return new Guarded(value0);
      };
      return Guarded;
  })();
  var Where = function (x) {
      return x;
  };
  var ExprHole = (function () {
      function ExprHole(value0) {
          this.value0 = value0;
      };
      ExprHole.create = function (value0) {
          return new ExprHole(value0);
      };
      return ExprHole;
  })();
  var ExprSection = (function () {
      function ExprSection(value0) {
          this.value0 = value0;
      };
      ExprSection.create = function (value0) {
          return new ExprSection(value0);
      };
      return ExprSection;
  })();
  var ExprIdent = (function () {
      function ExprIdent(value0) {
          this.value0 = value0;
      };
      ExprIdent.create = function (value0) {
          return new ExprIdent(value0);
      };
      return ExprIdent;
  })();
  var ExprConstructor = (function () {
      function ExprConstructor(value0) {
          this.value0 = value0;
      };
      ExprConstructor.create = function (value0) {
          return new ExprConstructor(value0);
      };
      return ExprConstructor;
  })();
  var ExprBoolean = (function () {
      function ExprBoolean(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprBoolean.create = function (value0) {
          return function (value1) {
              return new ExprBoolean(value0, value1);
          };
      };
      return ExprBoolean;
  })();
  var ExprChar = (function () {
      function ExprChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprChar.create = function (value0) {
          return function (value1) {
              return new ExprChar(value0, value1);
          };
      };
      return ExprChar;
  })();
  var ExprString = (function () {
      function ExprString(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprString.create = function (value0) {
          return function (value1) {
              return new ExprString(value0, value1);
          };
      };
      return ExprString;
  })();
  var ExprInt = (function () {
      function ExprInt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInt.create = function (value0) {
          return function (value1) {
              return new ExprInt(value0, value1);
          };
      };
      return ExprInt;
  })();
  var ExprNumber = (function () {
      function ExprNumber(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNumber.create = function (value0) {
          return function (value1) {
              return new ExprNumber(value0, value1);
          };
      };
      return ExprNumber;
  })();
  var ExprArray = (function () {
      function ExprArray(value0) {
          this.value0 = value0;
      };
      ExprArray.create = function (value0) {
          return new ExprArray(value0);
      };
      return ExprArray;
  })();
  var ExprRecord = (function () {
      function ExprRecord(value0) {
          this.value0 = value0;
      };
      ExprRecord.create = function (value0) {
          return new ExprRecord(value0);
      };
      return ExprRecord;
  })();
  var ExprParens = (function () {
      function ExprParens(value0) {
          this.value0 = value0;
      };
      ExprParens.create = function (value0) {
          return new ExprParens(value0);
      };
      return ExprParens;
  })();
  var ExprTyped = (function () {
      function ExprTyped(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ExprTyped.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ExprTyped(value0, value1, value2);
              };
          };
      };
      return ExprTyped;
  })();
  var ExprInfix = (function () {
      function ExprInfix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprInfix.create = function (value0) {
          return function (value1) {
              return new ExprInfix(value0, value1);
          };
      };
      return ExprInfix;
  })();
  var ExprOp = (function () {
      function ExprOp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprOp.create = function (value0) {
          return function (value1) {
              return new ExprOp(value0, value1);
          };
      };
      return ExprOp;
  })();
  var ExprOpName = (function () {
      function ExprOpName(value0) {
          this.value0 = value0;
      };
      ExprOpName.create = function (value0) {
          return new ExprOpName(value0);
      };
      return ExprOpName;
  })();
  var ExprNegate = (function () {
      function ExprNegate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprNegate.create = function (value0) {
          return function (value1) {
              return new ExprNegate(value0, value1);
          };
      };
      return ExprNegate;
  })();
  var ExprRecordAccessor = (function () {
      function ExprRecordAccessor(value0) {
          this.value0 = value0;
      };
      ExprRecordAccessor.create = function (value0) {
          return new ExprRecordAccessor(value0);
      };
      return ExprRecordAccessor;
  })();
  var ExprRecordUpdate = (function () {
      function ExprRecordUpdate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprRecordUpdate.create = function (value0) {
          return function (value1) {
              return new ExprRecordUpdate(value0, value1);
          };
      };
      return ExprRecordUpdate;
  })();
  var ExprApp = (function () {
      function ExprApp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprApp.create = function (value0) {
          return function (value1) {
              return new ExprApp(value0, value1);
          };
      };
      return ExprApp;
  })();
  var ExprLambda = (function () {
      function ExprLambda(value0) {
          this.value0 = value0;
      };
      ExprLambda.create = function (value0) {
          return new ExprLambda(value0);
      };
      return ExprLambda;
  })();
  var ExprIf = (function () {
      function ExprIf(value0) {
          this.value0 = value0;
      };
      ExprIf.create = function (value0) {
          return new ExprIf(value0);
      };
      return ExprIf;
  })();
  var ExprCase = (function () {
      function ExprCase(value0) {
          this.value0 = value0;
      };
      ExprCase.create = function (value0) {
          return new ExprCase(value0);
      };
      return ExprCase;
  })();
  var ExprLet = (function () {
      function ExprLet(value0) {
          this.value0 = value0;
      };
      ExprLet.create = function (value0) {
          return new ExprLet(value0);
      };
      return ExprLet;
  })();
  var ExprDo = (function () {
      function ExprDo(value0) {
          this.value0 = value0;
      };
      ExprDo.create = function (value0) {
          return new ExprDo(value0);
      };
      return ExprDo;
  })();
  var ExprAdo = (function () {
      function ExprAdo(value0) {
          this.value0 = value0;
      };
      ExprAdo.create = function (value0) {
          return new ExprAdo(value0);
      };
      return ExprAdo;
  })();
  var ExprError = (function () {
      function ExprError(value0) {
          this.value0 = value0;
      };
      ExprError.create = function (value0) {
          return new ExprError(value0);
      };
      return ExprError;
  })();
  var RecordUpdateLeaf = (function () {
      function RecordUpdateLeaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RecordUpdateLeaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RecordUpdateLeaf(value0, value1, value2);
              };
          };
      };
      return RecordUpdateLeaf;
  })();
  var RecordUpdateBranch = (function () {
      function RecordUpdateBranch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RecordUpdateBranch.create = function (value0) {
          return function (value1) {
              return new RecordUpdateBranch(value0, value1);
          };
      };
      return RecordUpdateBranch;
  })();
  var InstanceBindingSignature = (function () {
      function InstanceBindingSignature(value0) {
          this.value0 = value0;
      };
      InstanceBindingSignature.create = function (value0) {
          return new InstanceBindingSignature(value0);
      };
      return InstanceBindingSignature;
  })();
  var InstanceBindingName = (function () {
      function InstanceBindingName(value0) {
          this.value0 = value0;
      };
      InstanceBindingName.create = function (value0) {
          return new InstanceBindingName(value0);
      };
      return InstanceBindingName;
  })();
  var DeclData = (function () {
      function DeclData(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclData.create = function (value0) {
          return function (value1) {
              return new DeclData(value0, value1);
          };
      };
      return DeclData;
  })();
  var DeclType = (function () {
      function DeclType(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclType.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclType(value0, value1, value2);
              };
          };
      };
      return DeclType;
  })();
  var DeclNewtype = (function () {
      function DeclNewtype(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclNewtype.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclNewtype(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclNewtype;
  })();
  var DeclClass = (function () {
      function DeclClass(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclClass.create = function (value0) {
          return function (value1) {
              return new DeclClass(value0, value1);
          };
      };
      return DeclClass;
  })();
  var DeclInstanceChain = (function () {
      function DeclInstanceChain(value0) {
          this.value0 = value0;
      };
      DeclInstanceChain.create = function (value0) {
          return new DeclInstanceChain(value0);
      };
      return DeclInstanceChain;
  })();
  var DeclDerive = (function () {
      function DeclDerive(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclDerive.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclDerive(value0, value1, value2);
              };
          };
      };
      return DeclDerive;
  })();
  var DeclKindSignature = (function () {
      function DeclKindSignature(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DeclKindSignature.create = function (value0) {
          return function (value1) {
              return new DeclKindSignature(value0, value1);
          };
      };
      return DeclKindSignature;
  })();
  var DeclSignature = (function () {
      function DeclSignature(value0) {
          this.value0 = value0;
      };
      DeclSignature.create = function (value0) {
          return new DeclSignature(value0);
      };
      return DeclSignature;
  })();
  var DeclValue = (function () {
      function DeclValue(value0) {
          this.value0 = value0;
      };
      DeclValue.create = function (value0) {
          return new DeclValue(value0);
      };
      return DeclValue;
  })();
  var DeclFixity = (function () {
      function DeclFixity(value0) {
          this.value0 = value0;
      };
      DeclFixity.create = function (value0) {
          return new DeclFixity(value0);
      };
      return DeclFixity;
  })();
  var DeclForeign = (function () {
      function DeclForeign(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      DeclForeign.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new DeclForeign(value0, value1, value2);
              };
          };
      };
      return DeclForeign;
  })();
  var DeclRole = (function () {
      function DeclRole(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DeclRole.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DeclRole(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DeclRole;
  })();
  var DeclError = (function () {
      function DeclError(value0) {
          this.value0 = value0;
      };
      DeclError.create = function (value0) {
          return new DeclError(value0);
      };
      return DeclError;
  })();
  var ordProper = Data_Ord.ordString;
  var ordOperator = Data_Ord.ordString;
  var ordModuleName = Data_Ord.ordString;
  var ordIdent = Data_Ord.ordString;
  var eqProper = Data_Eq.eqString;  
  var eqModuleName = Data_Eq.eqString;
  var eqIdent = Data_Eq.eqString;
  exports["Comment"] = Comment;
  exports["Space"] = Space;
  exports["Line"] = Line;
  exports["LF"] = LF;
  exports["CRLF"] = CRLF;
  exports["ASCII"] = ASCII;
  exports["Unicode"] = Unicode;
  exports["SmallInt"] = SmallInt;
  exports["BigInt"] = BigInt;
  exports["BigHex"] = BigHex;
  exports["TokLeftParen"] = TokLeftParen;
  exports["TokRightParen"] = TokRightParen;
  exports["TokLeftBrace"] = TokLeftBrace;
  exports["TokRightBrace"] = TokRightBrace;
  exports["TokLeftSquare"] = TokLeftSquare;
  exports["TokRightSquare"] = TokRightSquare;
  exports["TokLeftArrow"] = TokLeftArrow;
  exports["TokRightArrow"] = TokRightArrow;
  exports["TokRightFatArrow"] = TokRightFatArrow;
  exports["TokDoubleColon"] = TokDoubleColon;
  exports["TokForall"] = TokForall;
  exports["TokEquals"] = TokEquals;
  exports["TokPipe"] = TokPipe;
  exports["TokTick"] = TokTick;
  exports["TokDot"] = TokDot;
  exports["TokComma"] = TokComma;
  exports["TokUnderscore"] = TokUnderscore;
  exports["TokBackslash"] = TokBackslash;
  exports["TokAt"] = TokAt;
  exports["TokLowerName"] = TokLowerName;
  exports["TokUpperName"] = TokUpperName;
  exports["TokOperator"] = TokOperator;
  exports["TokSymbolName"] = TokSymbolName;
  exports["TokSymbolArrow"] = TokSymbolArrow;
  exports["TokHole"] = TokHole;
  exports["TokChar"] = TokChar;
  exports["TokString"] = TokString;
  exports["TokRawString"] = TokRawString;
  exports["TokInt"] = TokInt;
  exports["TokNumber"] = TokNumber;
  exports["TokLayoutStart"] = TokLayoutStart;
  exports["TokLayoutSep"] = TokLayoutSep;
  exports["TokLayoutEnd"] = TokLayoutEnd;
  exports["Wrapped"] = Wrapped;
  exports["One"] = One;
  exports["Many"] = Many;
  exports["TypeVar"] = TypeVar;
  exports["TypeConstructor"] = TypeConstructor;
  exports["TypeWildcard"] = TypeWildcard;
  exports["TypeHole"] = TypeHole;
  exports["TypeString"] = TypeString;
  exports["TypeRow"] = TypeRow;
  exports["TypeRecord"] = TypeRecord;
  exports["TypeForall"] = TypeForall;
  exports["TypeKinded"] = TypeKinded;
  exports["TypeApp"] = TypeApp;
  exports["TypeOp"] = TypeOp;
  exports["TypeOpName"] = TypeOpName;
  exports["TypeArrow"] = TypeArrow;
  exports["TypeArrowName"] = TypeArrowName;
  exports["TypeConstrained"] = TypeConstrained;
  exports["TypeParens"] = TypeParens;
  exports["TypeUnaryRow"] = TypeUnaryRow;
  exports["TypeError"] = $$TypeError;
  exports["TypeVarKinded"] = TypeVarKinded;
  exports["TypeVarName"] = TypeVarName;
  exports["ExportValue"] = ExportValue;
  exports["ExportOp"] = ExportOp;
  exports["ExportType"] = ExportType;
  exports["ExportTypeOp"] = ExportTypeOp;
  exports["ExportClass"] = ExportClass;
  exports["ExportKind"] = ExportKind;
  exports["ExportModule"] = ExportModule;
  exports["ExportError"] = ExportError;
  exports["DataAll"] = DataAll;
  exports["DataEnumerated"] = DataEnumerated;
  exports["DeclData"] = DeclData;
  exports["DeclType"] = DeclType;
  exports["DeclNewtype"] = DeclNewtype;
  exports["DeclClass"] = DeclClass;
  exports["DeclInstanceChain"] = DeclInstanceChain;
  exports["DeclDerive"] = DeclDerive;
  exports["DeclKindSignature"] = DeclKindSignature;
  exports["DeclSignature"] = DeclSignature;
  exports["DeclValue"] = DeclValue;
  exports["DeclFixity"] = DeclFixity;
  exports["DeclForeign"] = DeclForeign;
  exports["DeclRole"] = DeclRole;
  exports["DeclError"] = DeclError;
  exports["InstanceBindingSignature"] = InstanceBindingSignature;
  exports["InstanceBindingName"] = InstanceBindingName;
  exports["ImportValue"] = ImportValue;
  exports["ImportOp"] = ImportOp;
  exports["ImportType"] = ImportType;
  exports["ImportTypeOp"] = ImportTypeOp;
  exports["ImportClass"] = ImportClass;
  exports["ImportKind"] = ImportKind;
  exports["ImportError"] = ImportError;
  exports["FundepDetermined"] = FundepDetermined;
  exports["FundepDetermines"] = FundepDetermines;
  exports["FixityValue"] = FixityValue;
  exports["FixityType"] = FixityType;
  exports["Unconditional"] = Unconditional;
  exports["Guarded"] = Guarded;
  exports["ForeignValue"] = ForeignValue;
  exports["ForeignData"] = ForeignData;
  exports["ForeignKind"] = ForeignKind;
  exports["ExprHole"] = ExprHole;
  exports["ExprSection"] = ExprSection;
  exports["ExprIdent"] = ExprIdent;
  exports["ExprConstructor"] = ExprConstructor;
  exports["ExprBoolean"] = ExprBoolean;
  exports["ExprChar"] = ExprChar;
  exports["ExprString"] = ExprString;
  exports["ExprInt"] = ExprInt;
  exports["ExprNumber"] = ExprNumber;
  exports["ExprArray"] = ExprArray;
  exports["ExprRecord"] = ExprRecord;
  exports["ExprParens"] = ExprParens;
  exports["ExprTyped"] = ExprTyped;
  exports["ExprInfix"] = ExprInfix;
  exports["ExprOp"] = ExprOp;
  exports["ExprOpName"] = ExprOpName;
  exports["ExprNegate"] = ExprNegate;
  exports["ExprRecordAccessor"] = ExprRecordAccessor;
  exports["ExprRecordUpdate"] = ExprRecordUpdate;
  exports["ExprApp"] = ExprApp;
  exports["ExprLambda"] = ExprLambda;
  exports["ExprIf"] = ExprIf;
  exports["ExprCase"] = ExprCase;
  exports["ExprLet"] = ExprLet;
  exports["ExprDo"] = ExprDo;
  exports["ExprAdo"] = ExprAdo;
  exports["ExprError"] = ExprError;
  exports["RecordPun"] = RecordPun;
  exports["RecordField"] = RecordField;
  exports["RecordUpdateLeaf"] = RecordUpdateLeaf;
  exports["RecordUpdateBranch"] = RecordUpdateBranch;
  exports["Where"] = Where;
  exports["LetBindingSignature"] = LetBindingSignature;
  exports["LetBindingName"] = LetBindingName;
  exports["LetBindingPattern"] = LetBindingPattern;
  exports["LetBindingError"] = LetBindingError;
  exports["DoLet"] = DoLet;
  exports["DoDiscard"] = DoDiscard;
  exports["DoBind"] = DoBind;
  exports["DoError"] = DoError;
  exports["BinderWildcard"] = BinderWildcard;
  exports["BinderVar"] = BinderVar;
  exports["BinderNamed"] = BinderNamed;
  exports["BinderConstructor"] = BinderConstructor;
  exports["BinderBoolean"] = BinderBoolean;
  exports["BinderChar"] = BinderChar;
  exports["BinderString"] = BinderString;
  exports["BinderInt"] = BinderInt;
  exports["BinderNumber"] = BinderNumber;
  exports["BinderArray"] = BinderArray;
  exports["BinderRecord"] = BinderRecord;
  exports["BinderParens"] = BinderParens;
  exports["BinderTyped"] = BinderTyped;
  exports["BinderOp"] = BinderOp;
  exports["BinderError"] = BinderError;
  exports["eqModuleName"] = eqModuleName;
  exports["ordModuleName"] = ordModuleName;
  exports["eqIdent"] = eqIdent;
  exports["ordIdent"] = ordIdent;
  exports["eqProper"] = eqProper;
  exports["ordProper"] = ordProper;
  exports["ordOperator"] = ordOperator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Void"] = $PS["Data.Void"] || {};
  var exports = $PS["Data.Void"];
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  exports["absurd"] = absurd;
})(PS);
(function(exports) {
  "use strict";

  exports.regexImpl = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                          
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.dotAll) {
              return "s";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })()))));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["unicode"] = unicode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Util"] = $PS["Tidy.Util"] || {};
  var exports = $PS["Tidy.Util"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];                
  var splitStringEscapeLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\\\ *\\r?\\n\\s*\\\\")(Data_String_Regex_Flags.global));
  var splitLines = Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("\\r?\\n")(Data_String_Regex_Flags.global));
  exports["splitLines"] = splitLines;
  exports["splitStringEscapeLines"] = splitStringEscapeLines;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Doc"] = $PS["Tidy.Doc"] || {};
  var exports = $PS["Tidy.Doc"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Tidy_Util = $PS["Tidy.Util"];                
  var ForceNone = (function () {
      function ForceNone() {

      };
      ForceNone.value = new ForceNone();
      return ForceNone;
  })();
  var ForceSpace = (function () {
      function ForceSpace() {

      };
      ForceSpace.value = new ForceSpace();
      return ForceSpace;
  })();
  var ForceBreak = (function () {
      function ForceBreak() {

      };
      ForceBreak.value = new ForceBreak();
      return ForceBreak;
  })();
  var sourceBreak = function (n) {
      return function (v) {
          return {
              doc: v.doc,
              isEmpty: false,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: v.leading.lines + n | 0,
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var softSpaceDoc = Dodo.flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo.space);
  var mapDocs = function (k) {
      return function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              return {
                  doc: k(v.doc),
                  isEmpty: v.isEmpty,
                  leading: {
                      doc: k(v.leading.doc),
                      left: v.leading.left,
                      lines: v.leading.lines,
                      multiline: v.leading.multiline,
                      right: v.leading.right
                  },
                  multiline: v.multiline,
                  trailing: {
                      doc: k(v.trailing.doc),
                      left: v.trailing.left,
                      multiline: v.trailing.multiline,
                      right: v.trailing.right
                  }
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 470, column 1 - line 470, column 68): " + [ k.constructor.name, v.constructor.name ]);
      };
  };
  var locally = function (k) {
      return function (v) {
          return {
              doc: Dodo.locally(k)(v.doc),
              isEmpty: v.isEmpty,
              leading: v.leading,
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var isEmpty = function (v) {
      return v.isEmpty;
  };
  var indent = mapDocs(Dodo.indent);
  var formatBlockComment = function ($156) {
      return (function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Tuple.Tuple(false, Data_Monoid.mempty(Dodo_Internal.monoidDoc));
          };
          if (v instanceof Data_Maybe.Just) {
              var prefixSpaces = Data_Array.head(Data_Array.sort(Data_Ord.ordInt)(Data_Array.mapMaybe(function (str) {
                  var spaces = Data_String_CodeUnits.length(Data_String_CodePoints.takeWhile(Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(Data_String_CodePoints.codePointFromChar(" ")))(str));
                  return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(spaces < Data_String_CodeUnits.length(str)))(spaces);
              })(v.value0.tail)));
              if (prefixSpaces instanceof Data_Maybe.Nothing) {
                  return new Data_Tuple.Tuple(false, Dodo.text(v.value0.head));
              };
              if (prefixSpaces instanceof Data_Maybe.Just) {
                  return new Data_Tuple.Tuple(true, Dodo.withPosition(function (pos) {
                      var newIndent = (function () {
                          var $80 = prefixSpaces.value0 < pos.indent;
                          if ($80) {
                              return 0;
                          };
                          return prefixSpaces.value0;
                      })();
                      var spaces = Data_Monoid.power(Data_Monoid.monoidString)(" ")(newIndent);
                      var tailDocs = Data_Functor.map(Data_Functor.functorArray)(function (str) {
                          return Dodo.text(Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.stripPrefix(spaces)(str)));
                      })(v.value0.tail);
                      return Dodo.lines(Data_Foldable.foldableArray)([ Dodo.text(v.value0.head), Dodo.locally(function (prev) {
                          var $81 = newIndent < prev.indent;
                          if ($81) {
                              return {
                                  indent: newIndent,
                                  indentSpaces: spaces,
                                  indentUnit: prev.indentUnit,
                                  indentWidth: prev.indentWidth,
                                  pageWidth: prev.pageWidth,
                                  ribbonRatio: prev.ribbonRatio
                              };
                          };
                          return prev;
                      })(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Dodo_Internal.monoidDoc)(Dodo["break"])(tailDocs)) ]);
                  }));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 204, column 5 - line 224, column 14): " + [ prefixSpaces.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 200, column 54 - line 234, column 21): " + [ v.constructor.name ]);
      })(Data_Array.uncons(Tidy_Util.splitLines($156)));
  };
  var forceMinSourceBreaks = function (n) {
      return function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              return {
                  doc: v.doc,
                  isEmpty: v.isEmpty,
                  leading: {
                      doc: v.leading.doc,
                      left: v.leading.left,
                      lines: Data_Ord.max(Data_Ord.ordInt)(v.leading.lines)(n),
                      multiline: v.leading.multiline,
                      right: v.leading.right
                  },
                  multiline: v.multiline,
                  trailing: v.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 314, column 1 - line 314, column 68): " + [ n.constructor.name, v.constructor.name ]);
      };
  };
  var force = function (k) {
      return function (f) {
          return function (m) {
              return function (doc) {
                  if (f instanceof ForceBreak) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                  };
                  return new Data_Tuple.Tuple(m, k(doc));
              };
          };
      };
  };
  var flexGroup = function (v) {
      if (v.multiline) {
          return v;
      };
      if (Data_Boolean.otherwise) {
          return {
              doc: Dodo.flexGroup(v.doc),
              isEmpty: v.isEmpty,
              leading: v.leading,
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 289, column 1 - line 289, column 50): " + [ v.constructor.name ]);
  };
  var flattenMax = function (n) {
      return function (v) {
          return {
              doc: v.doc,
              isEmpty: v.isEmpty,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: Data_Ord.min(Data_Ord.ordInt)(v.leading.lines)(n),
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var flatten = flattenMax(0);
  var eqForceBreak = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ForceNone && y instanceof ForceNone) {
                  return true;
              };
              if (x instanceof ForceSpace && y instanceof ForceSpace) {
                  return true;
              };
              if (x instanceof ForceBreak && y instanceof ForceBreak) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordForceBreak = {
      compare: function (x) {
          return function (y) {
              if (x instanceof ForceNone && y instanceof ForceNone) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ForceNone) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ForceNone) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ForceSpace && y instanceof ForceSpace) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ForceSpace) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ForceSpace) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ForceBreak && y instanceof ForceBreak) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 57, column 1 - line 57, column 48): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqForceBreak;
      }
  };
  var breaks = function (fl) {
      return function (n) {
          if (n >= 2) {
              return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Dodo["break"]);
          };
          if (n === 1) {
              return Dodo["break"];
          };
          if (Data_Boolean.otherwise) {
              if (fl instanceof ForceBreak) {
                  return Dodo["break"];
              };
              if (fl instanceof ForceSpace) {
                  return Dodo.space;
              };
              if (fl instanceof ForceNone) {
                  return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 430, column 17 - line 433, column 26): " + [ fl.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 426, column 1 - line 426, column 47): " + [ fl.constructor.name, n.constructor.name ]);
      };
  };
  var breakDoc = function (br) {
      return function (doc) {
          if (Dodo_Internal.isEmpty(doc)) {
              return doc;
          };
          if (Data_Boolean.otherwise) {
              if (br instanceof ForceBreak) {
                  return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc);
              };
              if (br instanceof ForceSpace) {
                  return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc);
              };
              if (br instanceof ForceNone) {
                  return doc;
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 421, column 17 - line 424, column 23): " + [ br.constructor.name ]);
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 418, column 1 - line 418, column 51): " + [ br.constructor.name, doc.constructor.name ]);
      };
  };
  var flexDoubleBreak = function (v) {
      return function (v1) {
          if (v.isEmpty) {
              return v1;
          };
          if (v1.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
              var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
              var $108 = v1.leading.lines >= 2 || v.multiline;
              if ($108) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight))),
                      isEmpty: v.isEmpty,
                      leading: v.leading,
                      multiline: true,
                      trailing: v1.trailing
                  };
              };
              return {
                  doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.flexSelect(docLeft)(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo["break"]))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(docRight)),
                  isEmpty: v.isEmpty,
                  leading: v.leading,
                  multiline: true,
                  trailing: v1.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Doc (line 393, column 1 - line 393, column 49): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var joinDoc = function (spaceFn) {
      return function (v) {
          return function (v1) {
              if (v.isEmpty) {
                  return v1;
              };
              if (v1.isEmpty) {
                  return v;
              };
              if (Data_Boolean.otherwise) {
                  var docLeft = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
                  var docRight = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
                  var $114 = v1.leading.lines > 0;
                  if ($114) {
                      return {
                          doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.leading.lines))(docRight)),
                          isEmpty: v.isEmpty,
                          leading: v.leading,
                          multiline: true,
                          trailing: v1.trailing
                      };
                  };
                  var v2 = spaceFn(Data_Ord.max(ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.multiline || v1.multiline)(docRight);
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(docLeft)(v2.value1),
                      isEmpty: v.isEmpty,
                      leading: v.leading,
                      multiline: v.trailing.multiline || (v.multiline || v2.value0),
                      trailing: v1.trailing
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 435, column 1 - line 435, column 102): " + [ spaceFn.constructor.name, v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var flexSoftBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  if (m) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
                  };
                  return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
              };
              if (f instanceof ForceNone) {
                  if (m) {
                      return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
                  };
                  return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc)));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 358, column 37 - line 370, column 59): " + [ f.constructor.name ]);
          };
      };
  });
  var flexSpaceBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (m) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
              };
              return new Data_Tuple.Tuple(false, Dodo.flexGroup(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc)));
          };
      };
  });
  var semigroupFormatDoc = {
      append: joinDoc(force(Control_Category.identity(Control_Category.categoryFn)))
  };
  var softBreak = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(doc));
              };
              if (f instanceof ForceNone) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.softBreak)(doc));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 373, column 33 - line 379, column 36): " + [ f.constructor.name ]);
          };
      };
  });
  var softSpace = joinDoc(function (f) {
      return function (m) {
          return function (doc) {
              if (f instanceof ForceBreak) {
                  return new Data_Tuple.Tuple(true, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(doc));
              };
              if (f instanceof ForceSpace) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)(doc));
              };
              if (f instanceof ForceNone) {
                  return new Data_Tuple.Tuple(m, Data_Semigroup.append(Dodo_Internal.semigroupDoc)(softSpaceDoc)(doc));
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 382, column 33 - line 388, column 34): " + [ f.constructor.name ]);
          };
      };
  });
  var space = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.space)));
  var spaceBreak = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)));
  var toDoc = function (v) {
      if (v.isEmpty) {
          return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
      };
      if (Data_Boolean.otherwise) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breakDoc(v.leading.right)(v.doc))(breakDoc(v.trailing.left)(v.trailing.doc)));
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 482, column 1 - line 482, column 40): " + [ v.constructor.name ]);
  };
  var semigroupLeadingComment = {
      append: function (v) {
          return function (v1) {
              if (Dodo_Internal.isEmpty(v.doc)) {
                  return {
                      doc: v1.doc,
                      left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                      lines: v.lines + v1.lines | 0,
                      multiline: v1.multiline,
                      right: v1.right
                  };
              };
              if (Dodo_Internal.isEmpty(v1.doc)) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breaks(ForceNone.value)(v1.lines)),
                      left: v.left,
                      lines: v.lines,
                      multiline: v.multiline || v1.lines > 0,
                      right: (function () {
                          var $133 = v1.lines > 0;
                          if ($133) {
                              return ForceNone.value;
                          };
                          return Data_Ord.max(ordForceBreak)(v.right)(v1.right);
                      })()
                  };
              };
              if (Data_Boolean.otherwise) {
                  var br = Data_Ord.max(ordForceBreak)(v.right)(v1.left);
                  var $134 = v1.lines > 0 || Data_Eq.eq(eqForceBreak)(br)(ForceBreak.value);
                  if ($134) {
                      return {
                          doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(ForceBreak.value)(v1.lines))(v1.doc)),
                          left: v.left,
                          lines: v.lines,
                          multiline: true,
                          right: v1.right
                      };
                  };
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(br)(v1.doc)),
                      left: v.left,
                      lines: v.lines,
                      multiline: v.multiline || v1.multiline,
                      right: v1.right
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 74, column 1 - line 104, column 14): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var leadingBlockComment = function (str) {
      return function (v) {
          var v1 = formatBlockComment(str);
          var comm = {
              doc: v1.value1,
              left: ForceSpace.value,
              lines: 0,
              multiline: v1.value0,
              right: ForceSpace.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var leadingLineComment = function (str) {
      return function (v) {
          var comm = {
              doc: Dodo.text(str),
              left: ForceBreak.value,
              lines: 0,
              multiline: false,
              right: ForceBreak.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: Data_Semigroup.append(semigroupLeadingComment)(comm)(v.leading),
              multiline: v.multiline,
              trailing: v.trailing
          };
      };
  };
  var monoidLeadingComment = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          left: ForceNone.value,
          lines: 0,
          multiline: false,
          right: ForceNone.value
      },
      Semigroup0: function () {
          return semigroupLeadingComment;
      }
  };
  var semigroupTrailingComment = {
      append: function (v) {
          return function (v1) {
              if (Dodo_Internal.isEmpty(v.doc)) {
                  return {
                      doc: v1.doc,
                      left: Data_Ord.max(ordForceBreak)(v.left)(v1.left),
                      multiline: v1.multiline,
                      right: v1.right
                  };
              };
              if (Dodo_Internal.isEmpty(v1.doc)) {
                  return {
                      doc: v.doc,
                      left: v.left,
                      multiline: v.multiline,
                      right: Data_Ord.max(ordForceBreak)(v.right)(v1.right)
                  };
              };
              if (Data_Boolean.otherwise) {
                  return {
                      doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(breakDoc(Data_Ord.max(ordForceBreak)(v.right)(v1.left))(v1.doc)),
                      left: v.left,
                      multiline: v.multiline || v1.multiline,
                      right: v1.right
                  };
              };
              throw new Error("Failed pattern match at Tidy.Doc (line 115, column 1 - line 126, column 12): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var trailingBlockComment = function (str) {
      return function (v) {
          var v1 = formatBlockComment(str);
          var comm = {
              doc: v1.value1,
              left: ForceSpace.value,
              multiline: v1.value0,
              right: ForceSpace.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: v.leading,
              multiline: v.multiline,
              trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
          };
      };
  };
  var trailingLineComment = function (str) {
      return function (v) {
          var comm = {
              doc: Dodo.text(str),
              left: ForceSpace.value,
              multiline: false,
              right: ForceBreak.value
          };
          return {
              doc: v.doc,
              isEmpty: false,
              leading: v.leading,
              multiline: v.multiline,
              trailing: Data_Semigroup.append(semigroupTrailingComment)(comm)(v.trailing)
          };
      };
  };
  var monoidTrailingComment = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          left: ForceNone.value,
          multiline: false,
          right: ForceNone.value
      },
      Semigroup0: function () {
          return semigroupTrailingComment;
      }
  };
  var monoidFormatDoc = {
      mempty: {
          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
          leading: Data_Monoid.mempty(monoidLeadingComment),
          isEmpty: true,
          multiline: false,
          trailing: Data_Monoid.mempty(monoidTrailingComment)
      },
      Semigroup0: function () {
          return semigroupFormatDoc;
      }
  };
  var fromDoc = function (doc) {
      if (Dodo_Internal.isEmpty(doc)) {
          return Data_Monoid.mempty(monoidFormatDoc);
      };
      if (Data_Boolean.otherwise) {
          return {
              doc: doc,
              leading: Data_Monoid.mempty(monoidLeadingComment),
              isEmpty: false,
              multiline: false,
              trailing: Data_Monoid.mempty(monoidTrailingComment)
          };
      };
      throw new Error("Failed pattern match at Tidy.Doc (line 158, column 1 - line 158, column 42): " + [ doc.constructor.name ]);
  };
  var text = function ($157) {
      return fromDoc(Dodo.text($157));
  };
  var joinWithMap = function (dictFoldable) {
      return function (op) {
          return function (k) {
              var go = function (a) {
                  return function (b) {
                      if (isEmpty(a)) {
                          return k(b);
                      };
                      if (Data_Boolean.otherwise) {
                          return op(a)(k(b));
                      };
                      throw new Error("Failed pattern match at Tidy.Doc (line 501, column 3 - line 503, column 29): " + [ a.constructor.name, b.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(go)(Data_Monoid.mempty(monoidFormatDoc));
          };
      };
  };
  var joinWith = function (dictFoldable) {
      return Data_Function.flip(joinWithMap(dictFoldable))(Control_Category.identity(Control_Category.categoryFn));
  };
  var $$break = joinDoc(force(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])));
  var anchor = function (v) {
      if (v.leading.lines > 0) {
          return {
              doc: v.doc,
              isEmpty: v.isEmpty,
              leading: {
                  doc: v.leading.doc,
                  left: v.leading.left,
                  lines: 0,
                  multiline: v.leading.multiline,
                  right: v.leading.right
              },
              multiline: true,
              trailing: v.trailing
          };
      };
      return v;
  };
  var alignCurrentColumn = mapDocs(Dodo.alignCurrentColumn);
  var align = function ($158) {
      return mapDocs(Dodo.align($158));
  };
  exports["ForceNone"] = ForceNone;
  exports["ForceSpace"] = ForceSpace;
  exports["ForceBreak"] = ForceBreak;
  exports["text"] = text;
  exports["leadingLineComment"] = leadingLineComment;
  exports["trailingLineComment"] = trailingLineComment;
  exports["leadingBlockComment"] = leadingBlockComment;
  exports["trailingBlockComment"] = trailingBlockComment;
  exports["anchor"] = anchor;
  exports["flatten"] = flatten;
  exports["flattenMax"] = flattenMax;
  exports["indent"] = indent;
  exports["align"] = align;
  exports["alignCurrentColumn"] = alignCurrentColumn;
  exports["locally"] = locally;
  exports["break"] = $$break;
  exports["softBreak"] = softBreak;
  exports["spaceBreak"] = spaceBreak;
  exports["sourceBreak"] = sourceBreak;
  exports["forceMinSourceBreaks"] = forceMinSourceBreaks;
  exports["space"] = space;
  exports["softSpace"] = softSpace;
  exports["flexSpaceBreak"] = flexSpaceBreak;
  exports["flexSoftBreak"] = flexSoftBreak;
  exports["flexDoubleBreak"] = flexDoubleBreak;
  exports["flexGroup"] = flexGroup;
  exports["fromDoc"] = fromDoc;
  exports["toDoc"] = toDoc;
  exports["breakDoc"] = breakDoc;
  exports["joinWithMap"] = joinWithMap;
  exports["joinWith"] = joinWith;
  exports["eqForceBreak"] = eqForceBreak;
  exports["ordForceBreak"] = ordForceBreak;
  exports["monoidLeadingComment"] = monoidLeadingComment;
  exports["semigroupFormatDoc"] = semigroupFormatDoc;
  exports["monoidFormatDoc"] = monoidFormatDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Hang"] = $PS["Tidy.Hang"] || {};
  var exports = $PS["Tidy.Hang"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Tidy_Doc = $PS["Tidy.Doc"];                
  var HangBreak = (function () {
      function HangBreak(value0) {
          this.value0 = value0;
      };
      HangBreak.create = function (value0) {
          return new HangBreak(value0);
      };
      return HangBreak;
  })();
  var HangOps = (function () {
      function HangOps(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangOps.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangOps(value0, value1, value2);
              };
          };
      };
      return HangOps;
  })();
  var HangApp = (function () {
      function HangApp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangApp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangApp(value0, value1, value2);
              };
          };
      };
      return HangApp;
  })();
  var HangingOp = (function () {
      function HangingOp(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      HangingOp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new HangingOp(value0, value1, value2);
              };
          };
      };
      return HangingOp;
  })();
  var overHangHead = function (f) {
      var go = function (v) {
          if (v instanceof HangBreak) {
              return new HangBreak(f(v.value0));
          };
          if (v instanceof HangOps) {
              return new HangOps(v.value0, go(v.value1), v.value2);
          };
          if (v instanceof HangApp) {
              return new HangApp(v.value0, go(v.value1), v.value2);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 62, column 8 - line 65, column 54): " + [ v.constructor.name ]);
      };
      return go;
  };
  var hangWithIndent = function (ind) {
      return function (a) {
          var $166 = Data_Maybe.maybe(a)(HangApp.create(ind)(a));
          return function ($167) {
              return $166(Data_Array_NonEmpty.fromArray($167));
          };
      };
  };
  var hangOps = HangOps.create(Tidy_Doc.indent);
  var hangHead = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof HangBreak) {
              $tco_done = true;
              return v.value0;
          };
          if (v instanceof HangOps) {
              $copy_v = v.value1;
              return;
          };
          if (v instanceof HangApp) {
              $copy_v = v.value1;
              return;
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 54, column 12 - line 57, column 34): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var hangBreak = function ($168) {
      return HangBreak.create(Tidy_Doc.flexGroup($168));
  };
  var hangApp = HangApp.create(Tidy_Doc.indent);
  var hang = function (a) {
      var $169 = HangApp.create(Tidy_Doc.indent)(hangBreak(a));
      var $170 = Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray);
      return function ($171) {
          return $169($170($171));
      };
  };
  var forceBreaks = function (n) {
      if (n >= 2) {
          return Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo["break"])(Dodo["break"]);
      };
      if (Data_Boolean.otherwise) {
          return Dodo["break"];
      };
      throw new Error("Failed pattern match at Tidy.Hang (line 67, column 1 - line 67, column 38): " + [ n.constructor.name ]);
  };
  var breaks = function (fl) {
      return function (n) {
          if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(fl)(Tidy_Doc.ForceBreak.value) || n > 0) {
              return forceBreaks(n);
          };
          if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(fl)(Tidy_Doc.ForceSpace.value)) {
              return Dodo.space;
          };
          if (Data_Boolean.otherwise) {
              return Data_Monoid.mempty(Dodo_Internal.monoidDoc);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 72, column 1 - line 72, column 47): " + [ fl.constructor.name, n.constructor.name ]);
      };
  };
  var toFormatDoc = (function () {
      var realignOp = function ($copy_op) {
          return function ($copy_doc) {
              var $tco_var_op = $copy_op;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(op, doc) {
                  var v = hangHead(doc);
                  if (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.leading.left)(Tidy_Doc.ForceBreak.value) && (op.leading.lines === 0 && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) && v.leading.lines > 0)))) {
                      $tco_var_op = Tidy_Doc.forceMinSourceBreaks(1)(op);
                      $copy_doc = overHangHead(Tidy_Doc.flatten)(doc);
                      return;
                  };
                  var v2 = function (v3) {
                      return new Data_Tuple.Tuple(op, doc);
                  };
                  if (doc instanceof HangBreak) {
                      var $60 = Data_Eq.notEq(Tidy_Doc.eqForceBreak)(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (Data_Eq.notEq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) && (v.leading.lines === 0 && (v.leading.multiline || op.multiline)));
                      if ($60) {
                          $tco_done = true;
                          return new Data_Tuple.Tuple(op, overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(doc));
                      };
                      $tco_done = true;
                      return v2(true);
                  };
                  $tco_done = true;
                  return v2(true);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_op, $copy_doc);
              };
              return $tco_result;
          };
      };
      var indMulti = function (head) {
          return function (ind) {
              return function (doc) {
                  if (head instanceof HangApp) {
                      return doc;
                  };
                  return ind(doc);
              };
          };
      };
      var flexSelectJoin = function (v) {
          return function (v1) {
              return function (v2) {
                  var $$break = (function () {
                      if (Data_Eq.eq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0) {
                          return Dodo["break"];
                      };
                      if (Data_Boolean.otherwise) {
                          return Dodo.spaceBreak;
                      };
                      throw new Error("Failed pattern match at Tidy.Hang (line 255, column 7 - line 257, column 38): " + [  ]);
                  })();
                  var doc1$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)($$break)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v.leading.right)(v.doc))(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc))));
                  var doc2$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                  var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                  var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                  var m1 = v.leading.multiline || (v.multiline || v.trailing.multiline);
                  var doc3$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v2.leading.left))(v2.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v2.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                  return {
                      doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                      leading: Data_Monoid.mempty(Tidy_Doc.monoidLeadingComment),
                      isEmpty: false,
                      multiline: m1 || m2 && m3,
                      trailing: {
                          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
                          left: Tidy_Doc.ForceNone.value,
                          multiline: false,
                          right: Data_Ord.max(Tidy_Doc.ordForceBreak)(v1.trailing.right)(v2.trailing.right)
                      }
                  };
              };
          };
      };
      var flexSelect = function (v) {
          return function (v1) {
              return function (v2) {
                  var doc1$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.doc)(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc));
                  var doc2$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v1.leading.left))(v1.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v1.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                  var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                  var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                  var m1 = v.multiline || v.trailing.multiline;
                  var doc3$prime = Data_Semigroup.append(Dodo_Internal.semigroupDoc)(breaks(Data_Ord.max(Tidy_Doc.ordForceBreak)(v.trailing.right)(v2.leading.left))(v2.leading.lines))(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v2.leading.doc)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                  return {
                      doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                      leading: v.leading,
                      isEmpty: false,
                      multiline: m1 || m2 && m3,
                      trailing: {
                          doc: Data_Monoid.mempty(Dodo_Internal.monoidDoc),
                          left: Tidy_Doc.ForceNone.value,
                          multiline: false,
                          right: Data_Ord.max(Tidy_Doc.ordForceBreak)(v1.trailing.right)(v2.trailing.right)
                      }
                  };
              };
          };
      };
      var docJoin = function (v) {
          if (v.isEmpty) {
              return v;
          };
          if (Data_Boolean.otherwise) {
              var $88 = Data_Eq.eq(Tidy_Doc.eqForceBreak)(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0;
              if ($88) {
                  return v;
              };
              var $89 = v.leading.multiline || v.multiline;
              if ($89) {
                  return Tidy_Doc.forceMinSourceBreaks(1)(v);
              };
              return {
                  doc: Data_Semigroup.append(Dodo_Internal.semigroupDoc)(Dodo.spaceBreak)(Data_Semigroup.append(Dodo_Internal.semigroupDoc)(v.leading.doc)(Tidy_Doc.breakDoc(v.leading.right)(v.doc))),
                  isEmpty: v.isEmpty,
                  leading: Data_Monoid.mempty(Tidy_Doc.monoidLeadingComment),
                  multiline: v.multiline,
                  trailing: v.trailing
              };
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 301, column 3 - line 313, column 14): " + [ v.constructor.name ]);
      };
      var goLastOperand = function (prevAlgn) {
          return function (prevInd) {
              return function (v) {
                  if (v instanceof HangBreak) {
                      var doc$prime = Tidy_Doc.flexGroup(docJoin(v.value0));
                      return new Data_Tuple.Tuple(doc$prime, prevInd(doc$prime));
                  };
                  if (v instanceof HangApp) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit((function () {
                          if (v.value1 instanceof HangApp) {
                              return overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(v.value1);
                          };
                          return v.value1;
                      })()));
                      var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                      var docIndent = indMulti(v.value1)(v.value0)(Data_Tuple.fst(next));
                      var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                      var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  if (v instanceof HangOps) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                      var docIndent = v.value0(Data_Tuple.fst(next));
                      var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                      var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  throw new Error("Failed pattern match at Tidy.Hang (line 181, column 36 - line 204, column 30): " + [ v.constructor.name ]);
              };
          };
      };
      var goLastOp = function (ind) {
          return function (v) {
              var algn = (function () {
                  var $110 = v.value0 <= 1;
                  if ($110) {
                      return Tidy_Doc.align(2);
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })();
              var next = goLastOperand(algn)(ind)(v.value2);
              var docIndent = Data_Tuple.snd(next);
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin(v.value1))(docIndent);
              var docGroup = flexSelectJoin(v.value1)(Data_Tuple.fst(next))(docIndent);
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
      };
      var goLastApp = function (doc) {
          var $$this = goLast(doc);
          var docGroup = Tidy_Doc.flexGroup(Data_Tuple.fst($$this));
          var docBreak = Data_Tuple.snd($$this);
          return new Data_Tuple.Tuple(docGroup, docBreak);
      };
      var goLast = function (v) {
          if (v instanceof HangBreak) {
              var doc$prime = docJoin(v.value0);
              return new Data_Tuple.Tuple(doc$prime, doc$prime);
          };
          if (v instanceof HangApp) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          if (v instanceof HangOps) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(v.value0(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"](docJoin($$this))(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 101, column 12 - line 120, column 30): " + [ v.constructor.name ]);
      };
      var goInitOperand = function (prevAlgn) {
          return function (prevInd) {
              return function (v) {
                  if (v instanceof HangBreak) {
                      var doc$prime = prevInd(Tidy_Doc.flexGroup(docJoin(v.value0)));
                      return new Data_Tuple.Tuple(doc$prime, doc$prime);
                  };
                  if (v instanceof HangApp) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                      var docGroup = flexSelectJoin(prevInd($$this))(indMulti(v.value1)(function ($172) {
                          return prevAlgn(v.value0($172));
                      })(Data_Tuple.fst(next)))(prevInd(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next))));
                      var docBreak = prevInd(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  if (v instanceof HangOps) {
                      var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                      var $$this = Data_Tuple.fst(goInit(v.value1));
                      var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                      var docGroup = flexSelectJoin(prevInd($$this))(prevAlgn(v.value0(Data_Tuple.fst(next))))(prevInd(v.value0(Data_Tuple.fst(next))));
                      var docBreak = prevInd(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                      return new Data_Tuple.Tuple(docGroup, docBreak);
                  };
                  throw new Error("Failed pattern match at Tidy.Hang (line 154, column 36 - line 179, column 30): " + [ v.constructor.name ]);
              };
          };
      };
      var goInitOp = function (ind) {
          return function (v) {
              return function (next) {
                  var v1 = realignOp(v.value1)(v.value2);
                  var algn = (function () {
                      var $146 = v.value0 <= 1;
                      if ($146) {
                          return Tidy_Doc.align(2);
                      };
                      return Control_Category.identity(Control_Category.categoryFn);
                  })();
                  var docOprd = Data_Tuple.fst(goInitOperand(algn)(ind)(v1.value1));
                  var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin(v1.value0))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docOprd)(Data_Tuple.snd(next)));
                  var docGroup = flexSelectJoin(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(v1.value0)(docOprd))(Data_Tuple.fst(next))(Data_Tuple.snd(next));
                  return new Data_Tuple.Tuple(docGroup, docBreak);
              };
          };
      };
      var goInitApp = function (doc) {
          return function (next) {
              var $$this = Data_Tuple.fst(goInit(doc));
              var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(Data_Tuple.snd(next));
              var docBreak = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(docJoin($$this))(Data_Tuple.snd(next));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
      };
      var goInit = function (v) {
          if (v instanceof HangBreak) {
              return new Data_Tuple.Tuple(v.value0, v.value0);
          };
          if (v instanceof HangApp) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
              var docGroup = flexSelect($$this)(v.value0(Data_Tuple.fst(next)))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          if (v instanceof HangOps) {
              var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
              var $$this = Data_Tuple.fst(goInit(v.value1));
              var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
              var docGroup = Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.flexGroup($$this))(v.value0(Data_Tuple.fst(next)));
              var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
              return new Data_Tuple.Tuple(docGroup, docBreak);
          };
          throw new Error("Failed pattern match at Tidy.Hang (line 81, column 12 - line 99, column 30): " + [ v.constructor.name ]);
      };
      return function ($173) {
          return Data_Tuple.fst(goInit($173));
      };
  })();
  exports["HangingOp"] = HangingOp;
  exports["hang"] = hang;
  exports["hangWithIndent"] = hangWithIndent;
  exports["hangBreak"] = hangBreak;
  exports["hangApp"] = hangApp;
  exports["hangOps"] = hangOps;
  exports["toFormatDoc"] = toFormatDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Precedence"] = $PS["Tidy.Precedence"] || {};
  var exports = $PS["Tidy.Precedence"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var OperatorType = (function () {
      function OperatorType() {

      };
      OperatorType.value = new OperatorType();
      return OperatorType;
  })();
  var OperatorValue = (function () {
      function OperatorValue() {

      };
      OperatorValue.value = new OperatorValue();
      return OperatorValue;
  })();
  var QualifiedOperator = (function () {
      function QualifiedOperator(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      QualifiedOperator.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new QualifiedOperator(value0, value1, value2);
              };
          };
      };
      return QualifiedOperator;
  })();
  var OpList = (function () {
      function OpList(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OpList.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OpList(value0, value1, value2);
              };
          };
      };
      return OpList;
  })();
  var OpPure = (function () {
      function OpPure(value0) {
          this.value0 = value0;
      };
      OpPure.create = function (value0) {
          return new OpPure(value0);
      };
      return OpPure;
  })();
  var OpHead = (function () {
      function OpHead(value0) {
          this.value0 = value0;
      };
      OpHead.create = function (value0) {
          return new OpHead(value0);
      };
      return OpHead;
  })();
  var OpPrec = (function () {
      function OpPrec(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OpPrec.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OpPrec(value0, value1, value2);
              };
          };
      };
      return OpPrec;
  })();
  var snoc = function (prevOps) {
      return function (nextPrec) {
          return function (nextOps) {
              var v = Data_Array_NonEmpty.unsnoc(prevOps);
              return Data_Array_NonEmpty["snoc'"](v.init)(new Data_Tuple.Tuple(v.last.value0, new OpList(v.last.value1, nextPrec, nextOps)));
          };
      };
  };
  var unwind = (function () {
      var go = function ($copy_prec) {
          return function ($copy_ops) {
              return function ($copy_v) {
                  var $tco_var_prec = $copy_prec;
                  var $tco_var_ops = $copy_ops;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(prec, ops, v) {
                      if (v instanceof OpHead) {
                          $tco_done = true;
                          return new OpList(v.value0, prec, ops);
                      };
                      if (v instanceof OpPrec) {
                          $tco_var_prec = v.value1;
                          $tco_var_ops = snoc(v.value2)(prec)(ops);
                          $copy_v = v.value0;
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 101, column 17 - line 104, column 46): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_prec, $tco_var_ops, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function (v) {
          if (v instanceof OpHead) {
              return v.value0;
          };
          if (v instanceof OpPrec) {
              return go(v.value1)(v.value2)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy.Precedence (line 97, column 10 - line 99, column 41): " + [ v.constructor.name ]);
      };
  })();
  var push = function ($copy_stk) {
      return function ($copy_chs) {
          var $tco_var_stk = $copy_stk;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(stk, chs) {
              if (chs instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return stk;
              };
              if (chs instanceof Data_List_Types.Cons && chs.value1 instanceof Data_List_Types.Nil) {
                  if (stk instanceof OpHead) {
                      $tco_done = true;
                      return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
                  };
                  if (stk instanceof OpPrec) {
                      var v = Data_Ord.compare(Data_Ord.ordInt)(chs.value0.value0)(stk.value1);
                      if (v instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new OpPrec(stk.value0, stk.value1, Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(stk.value2)(chs.value0.value1));
                      };
                      if (v instanceof Data_Ordering.GT) {
                          $tco_done = true;
                          return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
                      };
                      if (v instanceof Data_Ordering.LT) {
                          $tco_var_stk = stk.value0;
                          $copy_chs = new Data_List_Types.Cons(new Data_Tuple.Tuple(stk.value1, stk.value2), chs);
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 82, column 9 - line 85, column 60): " + [ v.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Precedence (line 78, column 5 - line 85, column 60): " + [ stk.constructor.name ]);
              };
              if (chs instanceof Data_List_Types.Cons) {
                  if (stk instanceof OpHead) {
                      $tco_var_stk = new OpHead(new OpList(stk.value0, chs.value0.value0, chs.value0.value1));
                      $copy_chs = chs.value1;
                      return;
                  };
                  if (stk instanceof OpPrec) {
                      var v = Data_Ord.compare(Data_Ord.ordInt)(chs.value0.value0)(stk.value1);
                      if (v instanceof Data_Ordering.EQ) {
                          $tco_var_stk = new OpPrec(stk.value0, stk.value1, Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray)(stk.value2)(chs.value0.value1));
                          $copy_chs = chs.value1;
                          return;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          $tco_var_stk = new OpPrec(stk.value0, stk.value1, snoc(stk.value2)(chs.value0.value0)(chs.value0.value1));
                          $copy_chs = chs.value1;
                          return;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          $tco_var_stk = stk.value0;
                          $copy_chs = new Data_List_Types.Cons(new Data_Tuple.Tuple(stk.value1, snoc(stk.value2)(chs.value0.value0)(chs.value0.value1)), chs.value1);
                          return;
                      };
                      throw new Error("Failed pattern match at Tidy.Precedence (line 91, column 9 - line 94, column 85): " + [ v.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Precedence (line 87, column 5 - line 94, column 85): " + [ stk.constructor.name ]);
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 75, column 16 - line 94, column 85): " + [ chs.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_stk, $copy_chs);
          };
          return $tco_result;
      };
  };
  var eqOperatorNamespace = {
      eq: function (x) {
          return function (y) {
              if (x instanceof OperatorType && y instanceof OperatorType) {
                  return true;
              };
              if (x instanceof OperatorValue && y instanceof OperatorValue) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordOperatorNamespace = {
      compare: function (x) {
          return function (y) {
              if (x instanceof OperatorType && y instanceof OperatorType) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof OperatorType) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof OperatorType) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof OperatorValue && y instanceof OperatorValue) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 33, column 1 - line 33, column 62): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqOperatorNamespace;
      }
  };
  var insertOperator = function (v) {
      return function (prec) {
          var opKey = new Data_Tuple.Tuple(v.value1, v.value2);
          return Data_Map_Internal.alter(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return new Data_Maybe.Just(Data_Map_Internal.singleton(opKey)(prec));
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(Data_Map_Internal.insert(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(opKey)(prec)(v1.value0));
              };
              throw new Error("Failed pattern match at Tidy.Precedence (line 159, column 5 - line 163, column 41): " + [ v1.constructor.name ]);
          })(v.value0);
      };
  };   
  var defaultPrecedence = 10;
  var toOperatorTree = function (precMap) {
      return function (getOperator) {
          return function (init) {
              var go = function (stk) {
                  return function (v) {
                      var v1 = getOperator(v.value0);
                      var prec = Data_Maybe.fromMaybe(defaultPrecedence)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_Tuple.ordTuple(ordOperatorNamespace)(PureScript_CST_Types.ordOperator))(new Data_Tuple.Tuple(v1.value1, v1.value2)))(Data_Map_Internal.lookup(Data_Maybe.ordMaybe(PureScript_CST_Types.ordModuleName))(v1.value0)(precMap)));
                      var opCh = Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray)(new Data_Tuple.Tuple(v.value0, new OpPure(v.value1)));
                      return push(stk)(Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(prec, opCh)));
                  };
              };
              var $185 = Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(new OpHead(new OpPure(init)));
              return function ($186) {
                  return unwind($185($186));
              };
          };
      };
  };
  exports["QualifiedOperator"] = QualifiedOperator;
  exports["OperatorType"] = OperatorType;
  exports["OperatorValue"] = OperatorValue;
  exports["OpList"] = OpList;
  exports["OpPure"] = OpPure;
  exports["toOperatorTree"] = toOperatorTree;
  exports["insertOperator"] = insertOperator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Token"] = $PS["Tidy.Token"] || {};
  var exports = $PS["Tidy.Token"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var UnicodeSource = (function () {
      function UnicodeSource() {

      };
      UnicodeSource.value = new UnicodeSource();
      return UnicodeSource;
  })();
  var UnicodeAlways = (function () {
      function UnicodeAlways() {

      };
      UnicodeAlways.value = new UnicodeAlways();
      return UnicodeAlways;
  })();
  var UnicodeNever = (function () {
      function UnicodeNever() {

      };
      UnicodeNever.value = new UnicodeNever();
      return UnicodeNever;
  })();
  var printUnicode = function (ascii) {
      return function (uni) {
          return function (style) {
              return function (v) {
                  if (v instanceof UnicodeNever) {
                      return ascii;
                  };
                  if (v instanceof UnicodeAlways) {
                      return uni;
                  };
                  if (v instanceof UnicodeSource) {
                      if (style instanceof PureScript_CST_Types.ASCII) {
                          return ascii;
                      };
                      if (style instanceof PureScript_CST_Types.Unicode) {
                          return uni;
                      };
                      throw new Error("Failed pattern match at Tidy.Token (line 23, column 5 - line 25, column 21): " + [ style.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Tidy.Token (line 19, column 32 - line 25, column 21): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var printQualified = function (moduleName) {
      return function (name) {
          if (moduleName instanceof Data_Maybe.Nothing) {
              return name;
          };
          if (moduleName instanceof Data_Maybe.Just) {
              return moduleName.value0 + ("." + name);
          };
          throw new Error("Failed pattern match at Tidy.Token (line 97, column 34 - line 99, column 44): " + [ moduleName.constructor.name ]);
      };
  };
  var printToken = function (option) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TokLeftParen) {
              return "(";
          };
          if (v instanceof PureScript_CST_Types.TokRightParen) {
              return ")";
          };
          if (v instanceof PureScript_CST_Types.TokLeftBrace) {
              return "{";
          };
          if (v instanceof PureScript_CST_Types.TokRightBrace) {
              return "}";
          };
          if (v instanceof PureScript_CST_Types.TokLeftSquare) {
              return "[";
          };
          if (v instanceof PureScript_CST_Types.TokRightSquare) {
              return "]";
          };
          if (v instanceof PureScript_CST_Types.TokLeftArrow) {
              return printUnicode("<-")("\u2190")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokRightArrow) {
              return printUnicode("->")("\u2192")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
              return printUnicode("=>")("\u21d2")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokDoubleColon) {
              return printUnicode("::")("\u2237")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokForall) {
              return printUnicode("forall")("\u2200")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokEquals) {
              return "=";
          };
          if (v instanceof PureScript_CST_Types.TokPipe) {
              return "|";
          };
          if (v instanceof PureScript_CST_Types.TokTick) {
              return "`";
          };
          if (v instanceof PureScript_CST_Types.TokDot) {
              return ".";
          };
          if (v instanceof PureScript_CST_Types.TokComma) {
              return ",";
          };
          if (v instanceof PureScript_CST_Types.TokUnderscore) {
              return "_";
          };
          if (v instanceof PureScript_CST_Types.TokBackslash) {
              return "\\";
          };
          if (v instanceof PureScript_CST_Types.TokAt) {
              return "@";
          };
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokUpperName) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokOperator) {
              return printQualified(v.value0)(v.value1);
          };
          if (v instanceof PureScript_CST_Types.TokSymbolName) {
              return printQualified(v.value0)("(" + (v.value1 + ")"));
          };
          if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
              return printUnicode("(->)")("(\u2192)")(v.value0)(option);
          };
          if (v instanceof PureScript_CST_Types.TokHole) {
              return "?" + v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokChar) {
              return "'" + (v.value0 + "'");
          };
          if (v instanceof PureScript_CST_Types.TokString) {
              return "\"" + (v.value0 + "\"");
          };
          if (v instanceof PureScript_CST_Types.TokRawString) {
              return "\"\"\"" + (v.value0 + "\"\"\"");
          };
          if (v instanceof PureScript_CST_Types.TokInt) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokNumber) {
              return v.value0;
          };
          if (v instanceof PureScript_CST_Types.TokLayoutStart) {
              return "";
          };
          if (v instanceof PureScript_CST_Types.TokLayoutSep) {
              return "";
          };
          if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
              return "";
          };
          throw new Error("Failed pattern match at Tidy.Token (line 28, column 21 - line 94, column 7): " + [ v.constructor.name ]);
      };
  };
  var eqUnicodeOption = {
      eq: function (x) {
          return function (y) {
              if (x instanceof UnicodeSource && y instanceof UnicodeSource) {
                  return true;
              };
              if (x instanceof UnicodeAlways && y instanceof UnicodeAlways) {
                  return true;
              };
              if (x instanceof UnicodeNever && y instanceof UnicodeNever) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["UnicodeSource"] = UnicodeSource;
  exports["UnicodeAlways"] = UnicodeAlways;
  exports["UnicodeNever"] = UnicodeNever;
  exports["printToken"] = printToken;
  exports["eqUnicodeOption"] = eqUnicodeOption;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy"] = $PS["Tidy"] || {};
  var exports = $PS["Tidy"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Void = $PS["Data.Void"];
  var Dodo = $PS["Dodo"];
  var Dodo_Internal = $PS["Dodo.Internal"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Tidy_Doc = $PS["Tidy.Doc"];
  var Tidy_Hang = $PS["Tidy.Hang"];
  var Tidy_Precedence = $PS["Tidy.Precedence"];
  var Tidy_Token = $PS["Tidy.Token"];
  var Tidy_Util = $PS["Tidy.Util"];                
  var TypeArrowFirst = (function () {
      function TypeArrowFirst() {

      };
      TypeArrowFirst.value = new TypeArrowFirst();
      return TypeArrowFirst;
  })();
  var TypeArrowLast = (function () {
      function TypeArrowLast() {

      };
      TypeArrowLast.value = new TypeArrowLast();
      return TypeArrowLast;
  })();
  var PolyForall = (function () {
      function PolyForall(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      PolyForall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new PolyForall(value0, value1, value2);
              };
          };
      };
      return PolyForall;
  })();
  var PolyArrow = (function () {
      function PolyArrow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PolyArrow.create = function (value0) {
          return function (value1) {
              return new PolyArrow(value0, value1);
          };
      };
      return PolyArrow;
  })();
  var ImportWrapSource = (function () {
      function ImportWrapSource() {

      };
      ImportWrapSource.value = new ImportWrapSource();
      return ImportWrapSource;
  })();
  var ImportWrapAuto = (function () {
      function ImportWrapAuto() {

      };
      ImportWrapAuto.value = new ImportWrapAuto();
      return ImportWrapAuto;
  })();
  var Grouped = (function () {
      function Grouped() {

      };
      Grouped.value = new Grouped();
      return Grouped;
  })();
  var NotGrouped = (function () {
      function NotGrouped() {

      };
      NotGrouped.value = new NotGrouped();
      return NotGrouped;
  })();
  var IfThen = (function () {
      function IfThen(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      IfThen.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new IfThen(value0, value1, value2, value3);
                  };
              };
          };
      };
      return IfThen;
  })();
  var ElseIfThen = (function () {
      function ElseIfThen(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      ElseIfThen.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new ElseIfThen(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return ElseIfThen;
  })();
  var Else = (function () {
      function Else(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Else.create = function (value0) {
          return function (value1) {
              return new Else(value0, value1);
          };
      };
      return Else;
  })();
  var DeclGroupSame = (function () {
      function DeclGroupSame() {

      };
      DeclGroupSame.value = new DeclGroupSame();
      return DeclGroupSame;
  })();
  var DeclGroupHard = (function () {
      function DeclGroupHard() {

      };
      DeclGroupHard.value = new DeclGroupHard();
      return DeclGroupHard;
  })();
  var DeclGroupSoft = (function () {
      function DeclGroupSoft() {

      };
      DeclGroupSoft.value = new DeclGroupSoft();
      return DeclGroupSoft;
  })();
  var DeclGroupValueSignature = (function () {
      function DeclGroupValueSignature(value0) {
          this.value0 = value0;
      };
      DeclGroupValueSignature.create = function (value0) {
          return new DeclGroupValueSignature(value0);
      };
      return DeclGroupValueSignature;
  })();
  var DeclGroupValue = (function () {
      function DeclGroupValue(value0) {
          this.value0 = value0;
      };
      DeclGroupValue.create = function (value0) {
          return new DeclGroupValue(value0);
      };
      return DeclGroupValue;
  })();
  var DeclGroupTypeSignature = (function () {
      function DeclGroupTypeSignature(value0) {
          this.value0 = value0;
      };
      DeclGroupTypeSignature.create = function (value0) {
          return new DeclGroupTypeSignature(value0);
      };
      return DeclGroupTypeSignature;
  })();
  var DeclGroupType = (function () {
      function DeclGroupType(value0) {
          this.value0 = value0;
      };
      DeclGroupType.create = function (value0) {
          return new DeclGroupType(value0);
      };
      return DeclGroupType;
  })();
  var DeclGroupClass = (function () {
      function DeclGroupClass(value0) {
          this.value0 = value0;
      };
      DeclGroupClass.create = function (value0) {
          return new DeclGroupClass(value0);
      };
      return DeclGroupClass;
  })();
  var DeclGroupInstance = (function () {
      function DeclGroupInstance() {

      };
      DeclGroupInstance.value = new DeclGroupInstance();
      return DeclGroupInstance;
  })();
  var DeclGroupFixity = (function () {
      function DeclGroupFixity() {

      };
      DeclGroupFixity.value = new DeclGroupFixity();
      return DeclGroupFixity;
  })();
  var DeclGroupForeign = (function () {
      function DeclGroupForeign() {

      };
      DeclGroupForeign.value = new DeclGroupForeign();
      return DeclGroupForeign;
  })();
  var DeclGroupRole = (function () {
      function DeclGroupRole() {

      };
      DeclGroupRole.value = new DeclGroupRole();
      return DeclGroupRole;
  })();
  var DeclGroupUnknown = (function () {
      function DeclGroupUnknown() {

      };
      DeclGroupUnknown.value = new DeclGroupUnknown();
      return DeclGroupUnknown;
  })();
  var toQualifiedOperatorTree = function (precMap) {
      return function (opNs) {
          return Tidy_Precedence.toOperatorTree(precMap)(function (v) {
              return new Tidy_Precedence.QualifiedOperator(v.module, opNs, v.name);
          });
      };
  };
  var toPolytype = (function () {
      var go = function ($copy_init) {
          return function ($copy_v) {
              var $tco_var_init = $copy_init;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(init, v) {
                  if (v instanceof PureScript_CST_Types.TypeForall) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyForall(v.value0, v.value1, v.value2));
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof PureScript_CST_Types.TypeArrow) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyArrow(v.value0, v.value1));
                      $copy_v = v.value2;
                      return;
                  };
                  if (v instanceof PureScript_CST_Types.TypeConstrained) {
                      $tco_var_init = Data_Array.snoc(init)(new PolyArrow(v.value0, v.value1));
                      $copy_v = v.value2;
                      return;
                  };
                  $tco_done = true;
                  return {
                      init: init,
                      last: v
                  };
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_init, $copy_v);
              };
              return $tco_result;
          };
      };
      return go([  ]);
  })();
  var toElseIfChain = function (ifte) {
      var go = function ($copy_acc) {
          return function ($copy_curr) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, curr) {
                  if (curr["false"] instanceof PureScript_CST_Types.ExprIf) {
                      var chain = new ElseIfThen(curr["else"], curr["false"].value0.keyword, curr["false"].value0.cond, curr["false"].value0.then, curr["false"]["value0"]["true"]);
                      $tco_var_acc = Data_Array_NonEmpty.snoc(acc)(chain);
                      $copy_curr = curr["false"].value0;
                      return;
                  };
                  $tco_done = true;
                  return Data_Array_NonEmpty.snoc(acc)(new Else(curr["else"], curr["false"]));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_curr);
              };
              return $tco_result;
          };
      };
      return go(Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray)(new IfThen(ifte.keyword, ifte.cond, ifte.then, ifte["true"])))(ifte);
  };
  var overLabel = function (k) {
      return function (v) {
          return {
              label: k(v.label),
              separator: v.separator,
              value: v.value
          };
      };
  };
  var formatString = (function () {
      var $774 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(function (v) {
          var v1 = Data_Array.unsnoc(v.tail);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Tidy_Doc.text(v.head);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Tidy_Doc["break"](Tidy_Doc["break"](Tidy_Doc.text(v.head + "\\"))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(function (str) {
                  return Tidy_Doc.text("\\" + (str + "\\"));
              })(v1.value0.init)))(Tidy_Doc.text("\\" + v1.value0.last));
          };
          throw new Error("Failed pattern match at Tidy (line 175, column 3 - line 180, column 41): " + [ v1.constructor.name ]);
      });
      return function ($775) {
          return $774(Data_Array.uncons(Tidy_Util.splitStringEscapeLines($775)));
      };
  })();
  var formatRawString = (function () {
      var $776 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(function (v) {
          var $118 = Data_Array["null"](v.tail);
          if ($118) {
              return Tidy_Doc.text(v.head);
          };
          return Tidy_Doc.fromDoc(Dodo.lines(Data_Foldable.foldableArray)([ Dodo.text(v.head), Dodo.locally(function (v1) {
              return {
                  indent: 0,
                  indentSpaces: "",
                  indentUnit: v1.indentUnit,
                  indentWidth: v1.indentWidth,
                  pageWidth: v1.pageWidth,
                  ribbonRatio: v1.ribbonRatio
              };
          })(Data_Array.intercalate(Dodo_Internal.monoidDoc)(Dodo["break"])(Data_Functor.map(Data_Functor.functorArray)(Dodo.text)(v.tail))) ]));
      });
      return function ($777) {
          return $776(Data_Array.uncons(Tidy_Util.splitLines($777)));
      };
  })();
  var formatListElem = function (alignment) {
      return function (format) {
          return function (conf) {
              return function (b) {
                  return Tidy_Doc.flexGroup(Tidy_Doc.align(alignment)(Tidy_Doc.anchor(format(conf)(b))));
              };
          };
      };
  };
  var formatHangingOperatorTree = function (formatOperator) {
      return function (format) {
          return function (conf) {
              var opWidth = function (v) {
                  return v.token.range.end.column - v.token.range.start.column | 0;
              };
              var go = function (v) {
                  if (v instanceof Tidy_Precedence.OpPure) {
                      return format(conf)(v.value0);
                  };
                  if (v instanceof Tidy_Precedence.OpList) {
                      return Tidy_Hang.hangOps(go(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
                          return new Tidy_Hang.HangingOp(opWidth(v1.value0), formatOperator(conf)(v1.value0), go(v1.value1));
                      })(v.value2));
                  };
                  throw new Error("Failed pattern match at Tidy (line 1063, column 8 - line 1068, column 93): " + [ v.constructor.name ]);
              };
              return go;
          };
      };
  };
  var formatErrorVoid = {
      formatError: Data_Void.absurd
  };
  var formatError = function (dict) {
      return dict.formatError;
  };
  var formatDeclGroups = function (declSeparator) {
      return function (k) {
          return function (format) {
              return function (conf) {
                  var joinDecls = function (acc) {
                      var newDoc = Tidy_Doc.joinWithMap(Data_List_Types.foldableNonEmptyList)(Tidy_Doc["break"])(format(conf))(acc.decls);
                      if (acc.sep instanceof DeclGroupSame) {
                          return Tidy_Doc["break"](newDoc)(acc.doc);
                      };
                      if (acc.sep instanceof DeclGroupSoft) {
                          return Tidy_Doc.flexDoubleBreak(newDoc)(acc.doc);
                      };
                      if (acc.sep instanceof DeclGroupHard) {
                          return Tidy_Doc["break"](newDoc)(Tidy_Doc.forceMinSourceBreaks(2)(acc.doc));
                      };
                      throw new Error("Failed pattern match at Tidy (line 1278, column 19 - line 1284, column 52): " + [ acc.sep.constructor.name ]);
                  };
                  var go = function (decl) {
                      return function ($778) {
                          return Data_Maybe.Just.create((function (v) {
                              if (v instanceof Data_Maybe.Nothing) {
                                  return {
                                      doc: Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc),
                                      sep: DeclGroupSame.value,
                                      group: k(decl),
                                      decls: Data_List_NonEmpty.singleton(decl)
                                  };
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  var group = k(decl);
                                  var v1 = declSeparator(group)(v.value0.group);
                                  if (v1 instanceof DeclGroupSame) {
                                      return {
                                          doc: v.value0.doc,
                                          sep: v.value0.sep,
                                          group: group,
                                          decls: Data_List_NonEmpty.cons(decl)(v.value0.decls)
                                      };
                                  };
                                  return {
                                      doc: joinDecls(v.value0),
                                      sep: v1,
                                      group: group,
                                      decls: Data_List_NonEmpty.singleton(decl)
                                  };
                              };
                              throw new Error("Failed pattern match at Tidy (line 1255, column 22 - line 1276, column 12): " + [ v.constructor.name ]);
                          })($778));
                      };
                  };
                  var $779 = Data_Maybe.maybe(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(joinDecls);
                  var $780 = Data_Foldable.foldr(Data_Foldable.foldableArray)(go)(Data_Maybe.Nothing.value);
                  return function ($781) {
                      return $779($780($781));
                  };
              };
          };
      };
  };
  var formatComment = function (lineComment) {
      return function (blockComment) {
          return function (com) {
              return function (next) {
                  if (com instanceof PureScript_CST_Types.Comment) {
                      if (Data_String_CodeUnits.take(2)(com.value0) === "--") {
                          return lineComment(com.value0)(next);
                      };
                      if (Data_Boolean.otherwise) {
                          return blockComment(com.value0)(next);
                      };
                  };
                  if (com instanceof PureScript_CST_Types.Line) {
                      return Tidy_Doc.sourceBreak(com.value1)(next);
                  };
                  if (com instanceof PureScript_CST_Types.Space) {
                      return next;
                  };
                  throw new Error("Failed pattern match at Tidy (line 135, column 51 - line 144, column 9): " + [ com.constructor.name ]);
              };
          };
      };
  };
  var formatWithComments = function (leading) {
      return function (trailing) {
          return function (doc) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.leadingLineComment)(Tidy_Doc.leadingBlockComment))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.trailingLineComment)(Tidy_Doc.trailingBlockComment))(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(trailing)))(leading);
          };
      };
  };
  var formatToken = function (conf) {
      return function (tok) {
          var tokStr = Tidy_Token.printToken(conf.unicode)(tok.value);
          var tokDoc = (function () {
              if (tok.value instanceof PureScript_CST_Types.TokRawString) {
                  return formatRawString(tokStr);
              };
              if (tok.value instanceof PureScript_CST_Types.TokString) {
                  return formatString(tokStr);
              };
              return Tidy_Doc.text(tokStr);
          })();
          return formatWithComments(tok.leadingComments)(tok.trailingComments)(tokDoc);
      };
  };
  var formatEmptyList = function (conf) {
      return function (v) {
          return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.open))(formatToken(conf)(v.close));
      };
  };
  var formatListTail = function (alignment) {
      return function (format) {
          return function (conf) {
              return Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.softBreak)(function (v) {
                  return Tidy_Doc.space(formatToken(conf)(v.value0))(formatListElem(alignment)(format)(conf)(v.value1));
              });
          };
      };
  };
  var formatList = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              var listElems = closeSpace(Tidy_Doc.softBreak(formatListElem(alignment)(format)(conf)(v.head))(formatListTail(alignment)(format)(conf)(v.tail)))(formatToken(conf)(v.close));
                              if (grouped instanceof Grouped) {
                                  return Tidy_Doc.flexGroup(openSpace(formatToken(conf)(v.open))(listElems));
                              };
                              if (grouped instanceof NotGrouped) {
                                  return openSpace(formatToken(conf)(v.open))(listElems);
                              };
                              throw new Error("Failed pattern match at Tidy (line 1122, column 3 - line 1128, column 30): " + [ grouped.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var formatDelimited = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              if (v.value instanceof Data_Maybe.Nothing) {
                                  return formatEmptyList(conf)({
                                      open: v.open,
                                      close: v.close
                                  });
                              };
                              if (v.value instanceof Data_Maybe.Just) {
                                  return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                                      open: v.open,
                                      head: v.value.value0.head,
                                      tail: v.value.value0.tail,
                                      close: v.close
                                  });
                              };
                              throw new Error("Failed pattern match at Tidy (line 1098, column 103 - line 1102, column 94): " + [ v.value.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var formatParenList = formatDelimited(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(2);
  var formatDelimitedNonEmpty = function (openSpace) {
      return function (closeSpace) {
          return function (alignment) {
              return function (grouped) {
                  return function (format) {
                      return function (conf) {
                          return function (v) {
                              return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                                  open: v.open,
                                  head: v.value.head,
                                  tail: v.value.tail,
                                  close: v.close
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var formatParenListNonEmpty = formatDelimitedNonEmpty(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(2);
  var formatOneOrDelimited = function (format) {
      return function (conf) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.One) {
                  return format(conf)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.Many) {
                  return formatParenListNonEmpty(NotGrouped.value)(format)(conf)(v.value0);
              };
              throw new Error("Failed pattern match at Tidy (line 481, column 36 - line 483, column 63): " + [ v.constructor.name ]);
          };
      };
  };
  var formatName = function (conf) {
      return function (v) {
          return formatToken(conf)(v.token);
      };
  };
  var formatDataMembers = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DataAll) {
              return formatToken(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DataEnumerated) {
              return formatParenList(NotGrouped.value)(formatName)(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 229, column 26 - line 233, column 50): " + [ v.constructor.name ]);
      };
  };
  var formatExport = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ExportValue) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportOp) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ExportType) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatDataMembers(conf))(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.ExportTypeOp) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportClass) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportKind) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportModule) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExportError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 210, column 21 - line 226, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatFundep = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.FundepDetermined) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.FundepDetermines) {
              return Tidy_Doc.space(Tidy_Doc.space(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value0))(formatToken(conf)(v.value1)))(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.space)(formatName(conf))(v.value2));
          };
          throw new Error("Failed pattern match at Tidy (line 471, column 21 - line 478, column 57): " + [ v.constructor.name ]);
      };
  };
  var formatImport = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ImportValue) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportOp) {
              return formatName(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.ImportType) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatDataMembers(conf))(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.ImportTypeOp) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportClass) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportKind) {
              return Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.anchor(formatName(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ImportError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 257, column 21 - line 271, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatImportDecl = function (conf) {
      return function (v) {
          var formatImportQualified = function (v1) {
              return Tidy_Doc.space(formatToken(conf)(v1.value0))(Tidy_Doc.anchor(formatName(conf)(v1.value1)));
          };
          var importDeclBody = (function () {
              if (v.names instanceof Data_Maybe.Just && v.names.value0.value0 instanceof Data_Maybe.Just) {
                  return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(formatName(conf)(v.module))(Tidy_Doc.anchor(formatToken(conf)(v.names.value0.value0.value0))))(Tidy_Doc.anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              if (v.names instanceof Data_Maybe.Just && v.names.value0.value0 instanceof Data_Maybe.Nothing) {
                  return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatName(conf)(v.module))(Tidy_Doc.anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              if (v.names instanceof Data_Maybe.Nothing) {
                  return Tidy_Doc.space(formatName(conf)(v.module))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatImportQualified)(v.qualified)));
              };
              throw new Error("Failed pattern match at Tidy (line 239, column 20 - line 251, column 69): " + [ v.names.constructor.name ]);
          })();
          return Tidy_Doc.space(formatToken(conf)(v.keyword))(Tidy_Doc.indent(Tidy_Doc.anchor(importDeclBody)));
      };
  };
  var formatParens = function (format) {
      return function (conf) {
          return function (v) {
              return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.open))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.anchor(format(conf)(v.value)))(formatToken(conf)(v.close)));
          };
      };
  };
  var formatParensBlock = function (format) {
      return function (conf) {
          return function (v) {
              return Tidy_Doc.flexGroup(Tidy_Doc.softSpace(formatToken(conf)(v.open))(Tidy_Doc.softBreak(Tidy_Doc.align(2)(Tidy_Doc.anchor(format(conf)(v.value))))(formatToken(conf)(v.close))));
          };
      };
  };
  var formatQualifiedName = function (conf) {
      return function (v) {
          return formatToken(conf)(v.token);
      };
  };
  var formatBasicListNonEmpty = formatDelimitedNonEmpty(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(2);
  var formatBasicList = formatDelimited(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(2);
  var flatten = (function () {
      var format = function (v) {
          return Tidy_Doc.space(v.head)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.space)(Tidy_Doc.anchor)(v.tail)));
      };
      var $784 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(format);
      return function ($785) {
          return $784(Data_Array.uncons($785));
      };
  })();
  var formatTypeVarBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TypeVarKinded) {
              return formatParensBlock(formatKindedTypeVarBinding)(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.TypeVarName) {
              return formatName(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 521, column 29 - line 525, column 22): " + [ v.constructor.name ]);
      };
  };
  var formatType = function (conf) {
      var $786 = formatHangingType(conf);
      return function ($787) {
          return Tidy_Hang.toFormatDoc($786($787));
      };
  };
  var formatRowLabeled = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatName(conf)(v.label))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(formatType(conf)(v.value)))));
      };
  };
  var formatRow = function (openSpace) {
      return function (closeSpace) {
          return function (conf) {
              return function (v) {
                  if (v.value.labels instanceof Data_Maybe.Nothing && v.value.tail instanceof Data_Maybe.Nothing) {
                      return formatEmptyList(conf)({
                          open: v.open,
                          close: v.close
                      });
                  };
                  if (v.value.labels instanceof Data_Maybe.Just && v.value.tail instanceof Data_Maybe.Nothing) {
                      return formatDelimitedNonEmpty(openSpace)(closeSpace)(2)(Grouped.value)(formatRowLabeled)(conf)({
                          open: v.open,
                          value: v.value.labels.value0,
                          close: v.close
                      });
                  };
                  if (v.value.labels instanceof Data_Maybe.Nothing && v.value.tail instanceof Data_Maybe.Just) {
                      return closeSpace(openSpace(formatToken(conf)(v.open))(flatten([ formatToken(conf)(v.value.tail.value0.value0), formatType(conf)(v.value.tail.value0.value1) ])))(formatToken(conf)(v.close));
                  };
                  if (v.value.labels instanceof Data_Maybe.Just && v.value.tail instanceof Data_Maybe.Just) {
                      return closeSpace(Tidy_Doc.spaceBreak(Tidy_Doc.softBreak(openSpace(formatToken(conf)(v.open))(formatListElem(2)(formatRowLabeled)(conf)(v.value.labels.value0.head)))(formatListTail(2)(formatRowLabeled)(conf)(v.value.labels.value0.tail)))(Tidy_Doc.space(formatToken(conf)(v.value.tail.value0.value0))(formatListElem(2)(formatType)(conf)(v.value.tail.value0.value1))))(formatToken(conf)(v.close));
                  };
                  throw new Error("Failed pattern match at Tidy (line 698, column 94 - line 721, column 31): " + [ v.value.labels.constructor.name, v.value.tail.constructor.name ]);
              };
          };
      };
  };
  var formatMonotype = function (conf) {
      var $788 = formatHangingMonotype(conf);
      return function ($789) {
          return Tidy_Hang.toFormatDoc($788($789));
      };
  };
  var formatKindedTypeVarBinding = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatName(conf)(v.label))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(formatType(conf)(v.value))));
      };
  };
  var formatHangingType = function (conf) {
      var $790 = formatHangingPolytype(Control_Category.identity(Control_Category.categoryFn))(conf);
      return function ($791) {
          return $790(toPolytype($791));
      };
  };
  var formatHangingPolytype = function (ind) {
      return function (conf) {
          return function (v) {
              if (Data_Array["null"](v.init)) {
                  return formatHangingMonotype(conf)(v.last);
              };
              if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
                  var isUnicodeArrow = (function () {
                      if (conf.unicode instanceof Tidy_Token.UnicodeAlways) {
                          return Data_Function["const"](true);
                      };
                      if (conf.unicode instanceof Tidy_Token.UnicodeNever) {
                          return Data_Function["const"](false);
                      };
                      if (conf.unicode instanceof Tidy_Token.UnicodeSource) {
                          return function (v1) {
                              if (v1 instanceof PolyArrow && (v1.value1.value instanceof PureScript_CST_Types.TokRightArrow && v1.value1.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              if (v1 instanceof PolyArrow && (v1.value1.value instanceof PureScript_CST_Types.TokRightFatArrow && v1.value1.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              if (v1 instanceof PolyForall && (v1.value0.value instanceof PureScript_CST_Types.TokForall && v1.value0.value.value0 instanceof PureScript_CST_Types.Unicode)) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      throw new Error("Failed pattern match at Tidy (line 652, column 22 - line 662, column 21): " + [ conf.unicode.constructor.name ]);
                  })();
                  var isUnicode = Data_Array.all(isUnicodeArrow)(v.init);
                  var formatPolyArrowFirst = function (k) {
                      return function (v1) {
                          if (v1 instanceof PolyForall) {
                              var go = function (doc) {
                                  return function (tyVar) {
                                      return Tidy_Doc.flexSpaceBreak(doc)(Tidy_Doc.indent(formatTypeVarBinding(conf)(tyVar)));
                                  };
                              };
                              return function (doc) {
                                  return Tidy_Doc.space(Tidy_Doc.softBreak(k(Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(formatToken(conf)(v1.value0))(v1.value1)))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Monoid.guard(Tidy_Doc.monoidFormatDoc)(!isUnicode)(Tidy_Doc.fromDoc(Dodo.flexAlt(Data_Monoid.mempty(Dodo_Internal.monoidDoc))(Dodo.space))))(Tidy_Doc.anchor(formatToken(conf)(v1.value2)))))(Tidy_Doc.anchor(Tidy_Doc.alignCurrentColumn(doc)));
                              };
                          };
                          if (v1 instanceof PolyArrow) {
                              return function (doc) {
                                  return Tidy_Doc.space(Tidy_Doc.spaceBreak(k(Tidy_Doc.flexGroup(formatMonotype(conf)(v1.value0))))(Tidy_Doc.anchor(formatToken(conf)(v1.value1))))(Tidy_Doc.anchor(Tidy_Doc.alignCurrentColumn(doc)));
                              };
                          };
                          throw new Error("Failed pattern match at Tidy (line 664, column 30 - line 680, column 52): " + [ v1.constructor.name ]);
                      };
                  };
                  return Tidy_Hang.hangBreak(Data_Foldable.foldl(Data_Foldable.foldableArray)(formatPolyArrowFirst)(ind)(v.init)(Tidy_Doc.anchor(formatMonotype(conf)(v.last))));
              };
              if (conf.typeArrowPlacement instanceof TypeArrowLast) {
                  var formatPolyArrowLast = function (v1) {
                      if (v1 instanceof PolyForall) {
                          var go = function (doc) {
                              return function (tyVar) {
                                  return Tidy_Doc.flexSpaceBreak(doc)(Tidy_Doc.indent(formatTypeVarBinding(conf)(tyVar)));
                              };
                          };
                          return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldl(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(go)(formatToken(conf)(v1.value0))(v1.value1))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value2))));
                      };
                      if (v1 instanceof PolyArrow) {
                          return Tidy_Doc.space(Tidy_Doc.flexGroup(formatType(conf)(v1.value0)))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value1))));
                      };
                      throw new Error("Failed pattern match at Tidy (line 686, column 27 - line 695, column 57): " + [ v1.constructor.name ]);
                  };
                  return Tidy_Hang.hangBreak(Tidy_Doc.spaceBreak(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatPolyArrowLast)(v.init))(Tidy_Doc.flexGroup(formatMonotype(conf)(v.last))));
              };
              throw new Error("Failed pattern match at Tidy (line 645, column 49 - line 695, column 57): " + [ conf.typeArrowPlacement.constructor.name ]);
          };
      };
  };
  var formatHangingMonotype = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.TypeVar) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeConstructor) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeWildcard) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeHole) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeArrowName) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeOpName) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeRow) {
              return Tidy_Hang.hangBreak(formatRow(Tidy_Doc.softSpace)(Tidy_Doc.softBreak)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeRecord) {
              return Tidy_Hang.hangBreak(formatRow(Tidy_Doc.space)(Tidy_Doc.spaceBreak)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeApp) {
              return Tidy_Hang.hangApp(formatHangingType(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingType(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.TypeParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatType)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
              return Tidy_Hang.hangBreak(Tidy_Doc.space(formatToken(conf)(v.value0))(formatType(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.TypeKinded) {
              return Tidy_Hang.hangBreak(Tidy_Doc.space(formatType(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(Tidy_Doc.anchor(formatType(conf)(v.value2))))));
          };
          if (v instanceof PureScript_CST_Types.TypeOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingType)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorType.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types["TypeError"]) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          if (v instanceof PureScript_CST_Types.TypeArrow) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeArrow handled by formatPolytype");
          };
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeConstrained handled by formatPolytype");
          };
          if (v instanceof PureScript_CST_Types.TypeForall) {
              return Partial_Unsafe.unsafeCrashWith("formatMonotype: TypeForall handled by formatPolytype");
          };
          throw new Error("Failed pattern match at Tidy (line 574, column 30 - line 614, column 75): " + [ v.constructor.name ]);
      };
  };
  var formatHangingDataCtor = function (conf) {
      return function (v) {
          var hangingName = Tidy_Hang.hangBreak(formatName(conf)(v.name));
          var v1 = Data_Array_NonEmpty.fromArray(v.fields);
          if (v1 instanceof Data_Maybe.Nothing) {
              return hangingName;
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Tidy_Hang.hangApp(hangingName)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingType(conf))(v1.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 423, column 3 - line 425, column 69): " + [ v1.constructor.name ]);
      };
  };
  var formatDataCtor = function (conf) {
      var $792 = formatHangingDataCtor(conf);
      return function ($793) {
          return Tidy_Hang.toFormatDoc($792($793));
      };
  };
  var formatConstraints = function (conf) {
      return function (v) {
          var unicodeArr = (function () {
              if (v.value1.value instanceof PureScript_CST_Types.TokOperator && (v.value1.value.value0 instanceof Data_Maybe.Nothing && (v.value1.value.value1 === "<=" && Data_Eq.eq(Tidy_Token.eqUnicodeOption)(conf.unicode)(Tidy_Token.UnicodeAlways.value)))) {
                  return {
                      value: new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, "\u21d0"),
                      leadingComments: v.value1.leadingComments,
                      range: v.value1.range,
                      trailingComments: v.value1.trailingComments
                  };
              };
              if (v.value1.value instanceof PureScript_CST_Types.TokOperator && (v.value1.value.value0 instanceof Data_Maybe.Nothing && (v.value1.value.value1 === "\u21d0" && Data_Eq.eq(Tidy_Token.eqUnicodeOption)(conf.unicode)(Tidy_Token.UnicodeNever.value)))) {
                  return {
                      value: new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, "<="),
                      leadingComments: v.value1.leadingComments,
                      range: v.value1.range,
                      trailingComments: v.value1.trailingComments
                  };
              };
              return v.value1;
          })();
          return Tidy_Doc.space(formatOneOrDelimited(formatType)(conf)(v.value0))(Tidy_Doc.anchor(formatToken(conf)(unicodeArr)));
      };
  };
  var formatInstanceHead = function (conf) {
      return function (v) {
          var hdTypes = Tidy_Doc.spaceBreak(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatConstraints(conf))(v.value0.constraints))(Tidy_Doc.flexGroup(Tidy_Doc.space(formatQualifiedName(conf)(v.value0.className))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatType(conf))(v.value0.types)))));
          if (v.value0.name instanceof Data_Maybe.Just) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.value0.keyword))(Tidy_Doc.anchor(formatName(conf)(v.value0.name.value0.value0))))(Tidy_Doc.anchor(formatToken(conf)(v.value0.name.value0.value1))))(Tidy_Doc.indent(hdTypes)))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1)));
          };
          if (v.value0.name instanceof Data_Maybe.Nothing) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(hdTypes)))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 495, column 3 - line 505, column 57): " + [ v.value0.name.constructor.name ]);
      };
  };
  var formatClassHead = function (conf) {
      return function (v) {
          var formatFundeps = function (v1) {
              return Tidy_Doc.softBreak(Tidy_Doc.space(formatToken(conf)(v1.value0))(formatListElem(2)(formatFundep)(conf)(v1.value1.head)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.softBreak)(function (v2) {
                  return Tidy_Doc.space(formatToken(conf)(v2.value0))(formatListElem(2)(formatFundep)(conf)(v2.value1));
              })(v1.value1.tail));
          };
          return Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.spaceBreak(Tidy_Doc.spaceBreak(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatConstraints(conf))(v["value0"]["super"])))(Tidy_Doc.flexGroup(Tidy_Doc.spaceBreak(formatName(conf)(v.value0.name))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
              var $794 = formatTypeVarBinding(conf);
              return function ($795) {
                  return Tidy_Doc.indent($794($795));
              };
          })())(v.value0.vars)))))(Tidy_Doc.flexGroup(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatFundeps)(v.value0.fundeps)))))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value1))));
      };
  };
  var formatDataHead = function (conf) {
      return function (v) {
          return Tidy_Doc.space(formatToken(conf)(v.keyword))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatName(conf)(v.name)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatTypeVarBinding(conf))(v.vars))));
      };
  };
  var formatSignature = function (conf) {
      return function (v) {
          if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
              var polytype = toPolytype(v.value);
              var isUnicode = (function () {
                  if (conf.unicode instanceof Tidy_Token.UnicodeAlways) {
                      return true;
                  };
                  if (conf.unicode instanceof Tidy_Token.UnicodeNever) {
                      return false;
                  };
                  if (conf.unicode instanceof Tidy_Token.UnicodeSource) {
                      if (v.separator.value instanceof PureScript_CST_Types.TokDoubleColon && v.separator.value.value0 instanceof PureScript_CST_Types.Unicode) {
                          return true;
                      };
                      return false;
                  };
                  throw new Error("Failed pattern match at Tidy (line 557, column 19 - line 563, column 23): " + [ conf.unicode.constructor.name ]);
              })();
              var width = (function () {
                  if (isUnicode) {
                      return 2;
                  };
                  if (Data_Boolean.otherwise) {
                      return 3;
                  };
                  throw new Error("Failed pattern match at Tidy (line 553, column 7 - line 555, column 24): " + [  ]);
              })();
              var formattedPolytype = formatHangingPolytype(Tidy_Doc.align(width))(conf)(polytype);
              var $423 = Data_Array["null"](polytype.init);
              if ($423) {
                  return Tidy_Hang.toFormatDoc(Tidy_Hang.hangWithIndent(Tidy_Doc.indent)(Tidy_Hang.hangBreak(v.label))([ Tidy_Hang.hangWithIndent((function () {
                      var $796 = Tidy_Doc.align(width);
                      return function ($797) {
                          return $796(Tidy_Doc.indent($797));
                      };
                  })())(Tidy_Hang.hangBreak(Tidy_Doc.flattenMax(1)(formatToken(conf)(v.separator))))([ formattedPolytype ]) ]));
              };
              return Tidy_Doc.flexSpaceBreak(v.label)(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(Tidy_Hang.toFormatDoc(formattedPolytype)))));
          };
          if (conf.typeArrowPlacement instanceof TypeArrowLast) {
              return Tidy_Doc.space(v.label)(Tidy_Doc.indent(Tidy_Doc.flexGroup(Tidy_Doc.spaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.separator)))(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatType(conf)(v.value)))))));
          };
          throw new Error("Failed pattern match at Tidy (line 535, column 3 - line 568, column 66): " + [ conf.typeArrowPlacement.constructor.name ]);
      };
  };
  var defaultFormatOptions = function (dictFormatError) {
      return {
          formatError: formatError(dictFormatError),
          unicode: Tidy_Token.UnicodeSource.value,
          typeArrowPlacement: TypeArrowFirst.value,
          operators: Data_Map_Internal.empty,
          importWrap: ImportWrapSource.value
      };
  };
  var declareHanging = function (label) {
      return function (spc) {
          return function (separator) {
              return function (value) {
                  return spc(label)(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(separator))(value)));
              };
          };
      };
  };
  var formatRecordLabeled = function (format) {
      return function (conf) {
          return function (v) {
              if (v instanceof PureScript_CST_Types.RecordPun) {
                  return formatName(conf)(v.value0);
              };
              if (v instanceof PureScript_CST_Types.RecordField) {
                  return declareHanging(formatName(conf)(v.value0))(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc))(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(format(conf)(v.value2));
              };
              throw new Error("Failed pattern match at Tidy (line 1054, column 35 - line 1058, column 106): " + [ v.constructor.name ]);
          };
      };
  };
  var formatHangingBinder = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.BinderWildcard) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderVar) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderNamed) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatName(conf)(v.value0))(Tidy_Doc.flexSoftBreak(Tidy_Doc.anchor(formatToken(conf)(v.value1)))(Tidy_Doc.indent(formatBinder(conf)(v.value2)))));
          };
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
              var ctorName = Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
              var v1 = Data_Array_NonEmpty.fromArray(v.value1);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return ctorName;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Tidy_Hang.hangApp(ctorName)(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingBinder(conf))(v1.value0));
              };
              throw new Error("Failed pattern match at Tidy (line 1020, column 5 - line 1024, column 67): " + [ v1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.BinderBoolean) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderChar) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderInt) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.BinderNumber) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.BinderArray) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatBinder)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderRecord) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingBinder))(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatBinder)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.BinderTyped) {
              return Tidy_Hang.hangBreak(formatSignature(conf)({
                  label: formatBinder(conf)(v.value0),
                  separator: v.value1,
                  value: v.value2
              }));
          };
          if (v instanceof PureScript_CST_Types.BinderOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingBinder)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorValue.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types.BinderError) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 1011, column 28 - line 1051, column 35): " + [ v.constructor.name ]);
      };
  };
  var formatBinder = function (conf) {
      var $798 = formatHangingBinder(conf);
      return function ($799) {
          return Tidy_Hang.toFormatDoc($798($799));
      };
  };
  var formatWhere = function (conf) {
      return function (v) {
          return Tidy_Doc["break"](formatToken(conf)(v.value0))(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value1)));
      };
  };
  var formatValueBinding = function (conf) {
      return function (v) {
          if (v.guarded instanceof PureScript_CST_Types.Unconditional) {
              return Tidy_Doc["break"](Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatName(conf)(v.name))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
                  var $800 = formatBinder(conf);
                  return function ($801) {
                      return Tidy_Doc.anchor($800($801));
                  };
              })())(v.binders))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.guarded.value0))))(formatHangingExpr(conf)(v.guarded.value1.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.guarded.value1.bindings)));
          };
          if (v.guarded instanceof PureScript_CST_Types.Guarded) {
              var valBinders = Tidy_Doc.flexSpaceBreak(formatName(conf)(v.name))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)((function () {
                  var $802 = formatBinder(conf);
                  return function ($803) {
                      return Tidy_Doc.anchor(Tidy_Doc.flexGroup($802($803)));
                  };
              })())(v.binders)));
              var $478 = Data_Array_NonEmpty.length(v.guarded.value0) === 1;
              if ($478) {
                  return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(valBinders)(formatGuardedExpr(conf)(Data_Array_NonEmpty.head(v.guarded.value0))));
              };
              return Tidy_Doc.flexSpaceBreak(valBinders)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $804 = formatGuardedExpr(conf);
                  return function ($805) {
                      return Tidy_Hang.toFormatDoc($804($805));
                  };
              })())(v.guarded.value0)));
          };
          throw new Error("Failed pattern match at Tidy (line 971, column 3 - line 991, column 86): " + [ v.guarded.constructor.name ]);
      };
  };
  var formatRecordUpdate = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
              return declareHanging(formatName(conf)(v.value0))(Tidy_Doc.space)(formatToken(conf)(v.value1))(formatHangingExpr(conf)(v.value2));
          };
          if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
              return Tidy_Doc.flexSpaceBreak(formatName(conf)(v.value0))(Tidy_Doc.indent(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 885, column 27 - line 890, column 66): " + [ v.constructor.name ]);
      };
  };
  var formatPatternGuard = function (conf) {
      return function (v) {
          if (v.binder instanceof Data_Maybe.Nothing) {
              return formatExpr(conf)(v.expr);
          };
          if (v.binder instanceof Data_Maybe.Just) {
              return Tidy_Doc.space(formatBinder(conf)(v.binder.value0.value0))(Tidy_Doc.indent(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatToken(conf)(v.binder.value0.value1)))(formatExpr(conf)(v.expr))));
          };
          throw new Error("Failed pattern match at Tidy (line 940, column 59 - line 946, column 46): " + [ v.binder.constructor.name ]);
      };
  };
  var formatLetBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
              return formatSignature(conf)({
                  label: formatName(conf)(v.value0.label),
                  separator: v.value0.separator,
                  value: v.value0.value
              });
          };
          if (v instanceof PureScript_CST_Types.LetBindingName) {
              return formatValueBinding(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
              return Tidy_Doc["break"](Tidy_Doc.space(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0)))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.value2.bindings)));
          };
          if (v instanceof PureScript_CST_Types.LetBindingError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 954, column 25 - line 967, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatLetGroups = (function () {
      var letGroup = function (v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
              return new DeclGroupValueSignature(v.value0.label.name);
          };
          if (v instanceof PureScript_CST_Types.LetBindingName) {
              return new DeclGroupValue(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
              return DeclGroupUnknown.value;
          };
          if (v instanceof PureScript_CST_Types.LetBindingError) {
              return DeclGroupUnknown.value;
          };
          throw new Error("Failed pattern match at Tidy (line 1240, column 14 - line 1244, column 42): " + [ v.constructor.name ]);
      };
      var letDeclGroupSeparator = function (v) {
          return function (v1) {
              if (v1 instanceof DeclGroupValueSignature) {
                  return DeclGroupHard.value;
              };
              return DeclGroupSame.value;
          };
      };
      return formatDeclGroups(letDeclGroupSeparator)(letGroup)(formatLetBinding);
  })();
  var formatHangingExpr = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.ExprHole) {
              return Tidy_Hang.hangBreak(formatName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprSection) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprIdent) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprConstructor) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprBoolean) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprChar) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprString) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprInt) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprNumber) {
              return Tidy_Hang.hangBreak(formatToken(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprArray) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatExpr)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprRecord) {
              return Tidy_Hang.hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingExpr))(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprParens) {
              return Tidy_Hang.hangBreak(formatParensBlock(formatExpr)(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprTyped) {
              return Tidy_Hang.hangBreak(formatSignature(conf)({
                  label: formatExpr(conf)(v.value0),
                  separator: v.value1,
                  value: v.value2
              }));
          };
          if (v instanceof PureScript_CST_Types.ExprInfix) {
              return Tidy_Hang.hangOps(formatHangingExpr(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
                  return new Tidy_Hang.HangingOp(3, formatParens(formatExpr)(conf)(v1.value0), formatHangingExpr(conf)(v1.value1));
              })(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprOp) {
              return formatHangingOperatorTree(formatQualifiedName)(formatHangingExpr)(conf)(toQualifiedOperatorTree(conf.operators)(Tidy_Precedence.OperatorValue.value)(v.value0)(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprOpName) {
              return Tidy_Hang.hangBreak(formatQualifiedName(conf)(v.value0));
          };
          if (v instanceof PureScript_CST_Types.ExprNegate) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.value0))(formatExpr(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
              return Tidy_Hang.hangBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatExpr(conf)(v.value0.expr))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Tidy_Doc.monoidFormatDoc)(Tidy_Doc.anchor)([ formatToken(conf)(v.value0.dot), formatName(conf)(v.value0.path.head), Data_Foldable.foldMap(Data_Foldable.foldableArray)(Tidy_Doc.monoidFormatDoc)(function (v1) {
                  return Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(Tidy_Doc.anchor(formatToken(conf)(v1.value0)))(Tidy_Doc.anchor(formatName(conf)(v1.value1)));
              })(v.value0.path.tail) ]))));
          };
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
              return Tidy_Hang.hang(formatExpr(conf)(v.value0))(Tidy_Hang.hangBreak(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
          };
          if (v instanceof PureScript_CST_Types.ExprApp) {
              return Tidy_Hang.hangApp(formatHangingExpr(conf)(v.value0))(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(formatHangingExpr(conf))(v.value1));
          };
          if (v instanceof PureScript_CST_Types.ExprLambda) {
              var binders = Tidy_Doc.flexGroup(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.spaceBreak)((function () {
                  var $806 = formatBinder(conf);
                  return function ($807) {
                      return Tidy_Doc.anchor($806($807));
                  };
              })())(v.value0.binders));
              return Tidy_Hang.hang(Tidy_Doc.space(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(formatToken(conf)(v.value0.symbol))(Tidy_Doc.alignCurrentColumn(binders)))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value0.arrow)))))(formatHangingExpr(conf)(v.value0.body));
          };
          if (v instanceof PureScript_CST_Types.ExprIf) {
              return Tidy_Hang.hangBreak(formatElseIfChain(conf)(toElseIfChain(v.value0)));
          };
          if (v instanceof PureScript_CST_Types.ExprCase) {
              var caseHeadExprs = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (doc) {
                  return function (v1) {
                      return Tidy_Doc.spaceBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Tidy_Doc.anchor(formatToken(conf)(v1.value0))))(Tidy_Doc.flexGroup(formatExpr(conf)(v1.value1)));
                  };
              })(Tidy_Doc.flexGroup(formatExpr(conf)(v.value0.head.head)))(v.value0.head.tail);
              var caseHead = Tidy_Doc.spaceBreak(caseHeadExprs)(Tidy_Doc.anchor(formatToken(conf)(v.value0.of)));
              return Tidy_Hang.hang(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(caseHead)))(Tidy_Hang.hangBreak(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $808 = formatCaseBranch(conf);
                  return function ($809) {
                      return Tidy_Doc.flexGroup($808($809));
                  };
              })())(v.value0.branches)));
          };
          if (v instanceof PureScript_CST_Types.ExprLet) {
              return Tidy_Hang.hangBreak(Tidy_Doc.spaceBreak(Tidy_Doc.spaceBreak(formatToken(conf)(v.value0.keyword))(Tidy_Doc.indent(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value0.bindings)))))(Tidy_Doc.spaceBreak(formatToken(conf)(v["value0"]["in"]))(Tidy_Doc.indent(Tidy_Doc.flexGroup(formatExpr(conf)(v.value0.body))))));
          };
          if (v instanceof PureScript_CST_Types.ExprDo) {
              return Tidy_Hang.hang(formatToken(conf)(v.value0.keyword))(Tidy_Hang.hangBreak(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $810 = formatDoStatement(conf);
                  return function ($811) {
                      return Tidy_Doc.flexGroup($810($811));
                  };
              })())(v.value0.statements)));
          };
          if (v instanceof PureScript_CST_Types.ExprAdo) {
              return Tidy_Hang.hang(formatToken(conf)(v.value0.keyword))(Tidy_Hang.hangBreak(Tidy_Doc.flexSpaceBreak(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(formatDoStatement(conf))(v.value0.statements))(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v["value0"]["in"]))(Tidy_Doc.indent(formatExpr(conf)(v.value0.result))))));
          };
          if (v instanceof PureScript_CST_Types.ExprError) {
              return Tidy_Hang.hangBreak(conf.formatError(v.value0));
          };
          throw new Error("Failed pattern match at Tidy (line 733, column 26 - line 848, column 35): " + [ v.constructor.name ]);
      };
  };
  var formatGuardedExpr = function (conf) {
      return function (v) {
          var patternGuards = Tidy_Doc.softBreak(formatListElem(2)(formatPatternGuard)(conf)(v.patterns.head))(formatListTail(2)(formatPatternGuard)(conf)(v.patterns.tail));
          return Tidy_Hang.hangWithIndent((function () {
              var $812 = Tidy_Doc.align(2);
              return function ($813) {
                  return $812(Tidy_Doc.indent($813));
              };
          })())(Tidy_Hang.hangBreak(Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.bar))(Tidy_Doc.flexGroup(patternGuards)))(Tidy_Doc.anchor(formatToken(conf)(v.separator)))))((function () {
              if (v.where.bindings instanceof Data_Maybe.Nothing) {
                  return [ formatHangingExpr(conf)(v.where.expr) ];
              };
              if (v.where.bindings instanceof Data_Maybe.Just) {
                  return [ formatHangingExpr(conf)(v.where.expr), Tidy_Hang.hangBreak(formatWhere(conf)(v.where.bindings.value0)) ];
              };
              throw new Error("Failed pattern match at Tidy (line 927, column 5 - line 933, column 10): " + [ v.where.bindings.constructor.name ]);
          })());
      };
  };
  var formatExpr = function (conf) {
      var $814 = formatHangingExpr(conf);
      return function ($815) {
          return Tidy_Hang.toFormatDoc($814($815));
      };
  };
  var formatElseIfChain = function (conf) {
      var $816 = Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc.spaceBreak)(function (v) {
          if (v instanceof IfThen) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatExpr(conf)(v.value1))))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.anchor(formatToken(conf)(v.value2)))(formatHangingExpr(conf)(v.value3))));
          };
          if (v instanceof ElseIfThen) {
              return Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.space(formatToken(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1)))))(Tidy_Doc.indent(Tidy_Doc.anchor(Tidy_Doc.flexGroup(formatExpr(conf)(v.value2))))))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.anchor(formatToken(conf)(v.value3)))(formatHangingExpr(conf)(v.value4))));
          };
          if (v instanceof Else) {
              return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(formatToken(conf)(v.value0))(formatHangingExpr(conf)(v.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 866, column 63 - line 882, column 79): " + [ v.constructor.name ]);
      });
      return function ($817) {
          return Tidy_Doc.flexGroup($816($817));
      };
  };
  var formatDoStatement = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
              return Tidy_Doc.flexSpaceBreak(formatToken(conf)(v.value0))(Tidy_Doc.indent(formatLetGroups(conf)(Data_Array_NonEmpty.toArray(v.value1))));
          };
          if (v instanceof PureScript_CST_Types.DoDiscard) {
              return formatExpr(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DoBind) {
              return Tidy_Doc.space(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0)))(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2))));
          };
          if (v instanceof PureScript_CST_Types.DoError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 994, column 26 - line 1005, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatCaseBranch = function (conf) {
      return function (v) {
          var caseBinders = Tidy_Doc.flexGroup(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (doc) {
              return function (v1) {
                  return Tidy_Doc.spaceBreak(Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc)(doc)(Tidy_Doc.indent(Tidy_Doc.anchor(formatToken(conf)(v1.value0)))))(Tidy_Doc.flexGroup(formatBinder(conf)(v1.value1)));
              };
          })(Tidy_Doc.flexGroup(formatBinder(conf)(v.value0.head)))(v.value0.tail));
          if (v.value1 instanceof PureScript_CST_Types.Unconditional) {
              return Tidy_Doc["break"](Tidy_Doc.space(caseBinders)(Tidy_Hang.toFormatDoc(Tidy_Hang.hang(formatToken(conf)(v.value1.value0))(formatHangingExpr(conf)(v.value1.value1.expr)))))(Tidy_Doc.indent(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatWhere(conf))(v.value1.value1.bindings)));
          };
          if (v.value1 instanceof PureScript_CST_Types.Guarded) {
              var $617 = Data_Array_NonEmpty.length(v.value1.value0) === 1;
              if ($617) {
                  return Tidy_Hang.toFormatDoc(Tidy_Hang.hang(caseBinders)(formatGuardedExpr(conf)(Data_Array_NonEmpty.head(v.value1.value0))));
              };
              return Tidy_Doc.flexSpaceBreak(caseBinders)(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                  var $818 = formatGuardedExpr(conf);
                  return function ($819) {
                      return Tidy_Hang.toFormatDoc($818($819));
                  };
              })())(v.value1.value0)));
          };
          throw new Error("Failed pattern match at Tidy (line 894, column 3 - line 907, column 81): " + [ v.value1.constructor.name ]);
      };
  };
  var formatInstanceBinding = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
              return formatSignature(conf)(overLabel(formatName(conf))(v.value0));
          };
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
              return formatValueBinding(conf)(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 514, column 30 - line 518, column 32): " + [ v.constructor.name ]);
      };
  };
  var formatInstance = function (conf) {
      return function (v) {
          if (v.body instanceof Data_Maybe.Nothing) {
              return formatInstanceHead(conf)(new Data_Tuple.Tuple(v.head, Data_Maybe.Nothing.value));
          };
          if (v.body instanceof Data_Maybe.Just) {
              return Tidy_Doc["break"](formatInstanceHead(conf)(new Data_Tuple.Tuple(v.head, new Data_Maybe.Just(v.body.value0.value0))))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])(formatInstanceBinding(conf))(v.body.value0.value1)));
          };
          throw new Error("Failed pattern match at Tidy (line 486, column 49 - line 491, column 62): " + [ v.body.constructor.name ]);
      };
  };
  var formatDecl = function (conf) {
      return function (v) {
          if (v instanceof PureScript_CST_Types.DeclData && v.value1 instanceof Data_Maybe.Just) {
              var formatDataElem = function (v1) {
                  return Tidy_Doc.space(formatToken(conf)(v1.value0))(formatListElem(2)(formatDataCtor)(conf)(v1.value1));
              };
              var $638 = Data_Array["null"](v.value1.value0.value1.tail);
              if ($638) {
                  return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(formatToken(conf)(v.value1.value0.value0))(formatHangingDataCtor(conf)(v.value1.value0.value1.head));
              };
              return Tidy_Doc.flexSpaceBreak(formatDataHead(conf)(v.value0))(Tidy_Doc.indent(Tidy_Doc.spaceBreak(formatDataElem(new Data_Tuple.Tuple(v.value1.value0.value0, v.value1.value0.value1.head)))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc.spaceBreak)(formatDataElem)(v.value1.value0.value1.tail))));
          };
          if (v instanceof PureScript_CST_Types.DeclData) {
              return formatDataHead(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclType) {
              return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(formatToken(conf)(v.value1))(formatHangingType(conf)(v.value2));
          };
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
              return declareHanging(formatDataHead(conf)(v.value0))(Tidy_Doc.space)(formatToken(conf)(v.value1))(formatHangingDataCtor(conf)({
                  name: v.value2,
                  fields: [ v.value3 ]
              }));
          };
          if (v instanceof PureScript_CST_Types.DeclRole) {
              var words = [ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(v.value2) ];
              var roles = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)((function () {
                  var $820 = formatToken(conf);
                  return function ($821) {
                      return $820(Data_Tuple.fst($821));
                  };
              })())(v.value3);
              return flatten(Data_Semigroup.append(Data_Semigroup.semigroupArray)(words)(Data_Array_NonEmpty.toArray(roles)));
          };
          if (v instanceof PureScript_CST_Types.DeclFixity) {
              if (v.value0.operator instanceof PureScript_CST_Types.FixityValue) {
                  return flatten([ formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatQualifiedName(conf)(v.value0.operator.value0), formatToken(conf)(v.value0.operator.value1), formatName(conf)(v.value0.operator.value2) ]);
              };
              if (v.value0.operator instanceof PureScript_CST_Types.FixityType) {
                  return flatten([ formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatToken(conf)(v.value0.operator.value0), formatQualifiedName(conf)(v.value0.operator.value1), formatToken(conf)(v.value0.operator.value2), formatName(conf)(v.value0.operator.value3) ]);
              };
              throw new Error("Failed pattern match at Tidy (line 321, column 5 - line 338, column 12): " + [ v.value0.operator.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
              return formatSignature(conf)({
                  label: flatten([ formatToken(conf)(v.value0), formatName(conf)(v.value1.label) ]),
                  separator: v.value1.separator,
                  value: v.value1.value
              });
          };
          if (v instanceof PureScript_CST_Types.DeclForeign) {
              if (v.value2 instanceof PureScript_CST_Types.ForeignValue) {
                  return formatSignature(conf)({
                      label: flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(v.value2.value0.label) ]),
                      separator: v.value2.value0.separator,
                      value: v.value2.value0.value
                  });
              };
              if (v.value2 instanceof PureScript_CST_Types.ForeignData) {
                  return formatSignature(conf)({
                      label: flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(v.value2.value1.label) ]),
                      separator: v.value2.value1.separator,
                      value: v.value2.value1.value
                  });
              };
              if (v.value2 instanceof PureScript_CST_Types.ForeignKind) {
                  return flatten([ formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(v.value2.value1) ]);
              };
              throw new Error("Failed pattern match at Tidy (line 352, column 5 - line 378, column 12): " + [ v.value2.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclClass) {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                  return formatClassHead(conf)(new Data_Tuple.Tuple(v.value0, Data_Maybe.Nothing.value));
              };
              if (v.value1 instanceof Data_Maybe.Just) {
                  return Tidy_Doc["break"](formatClassHead(conf)(new Data_Tuple.Tuple(v.value0, new Data_Maybe.Just(v.value1.value0.value0))))(Tidy_Doc.indent(Tidy_Doc.joinWithMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Tidy_Doc["break"])((function () {
                      var $822 = formatSignature(conf);
                      var $823 = overLabel(formatName(conf));
                      return function ($824) {
                          return $822($823($824));
                      };
                  })())(v.value1.value0.value1)));
              };
              throw new Error("Failed pattern match at Tidy (line 381, column 5 - line 389, column 19): " + [ v.value1.constructor.name ]);
          };
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
              return Tidy_Doc["break"](formatInstance(conf)(v.value0.head))(Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(function (v1) {
                  return Tidy_Doc.space(formatToken(conf)(v1.value0))(Tidy_Doc.anchor(formatInstance(conf)(v1.value1)));
              })(v.value0.tail));
          };
          if (v instanceof PureScript_CST_Types.DeclDerive) {
              return Tidy_Doc.space(Tidy_Doc.space(formatToken(conf)(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)((function () {
                  var $825 = formatToken(conf);
                  return function ($826) {
                      return Tidy_Doc.indent(Tidy_Doc.anchor($825($826)));
                  };
              })())(v.value1)))(Tidy_Doc.anchor(formatInstanceHead(conf)(new Data_Tuple.Tuple(v.value2, Data_Maybe.Nothing.value))));
          };
          if (v instanceof PureScript_CST_Types.DeclSignature) {
              return formatSignature(conf)(overLabel(formatName(conf))(v.value0));
          };
          if (v instanceof PureScript_CST_Types.DeclValue) {
              return formatValueBinding(conf)(v.value0);
          };
          if (v instanceof PureScript_CST_Types.DeclError) {
              return conf.formatError(v.value0);
          };
          throw new Error("Failed pattern match at Tidy (line 274, column 19 - line 410, column 23): " + [ v.constructor.name ]);
      };
  };
  var formatTopLevelGroups = (function () {
      var topDeclGroupSeparator = function (v) {
          return function (v1) {
              if (v instanceof DeclGroupValue && v1 instanceof DeclGroupValue) {
                  var $707 = Data_Eq.eq(PureScript_CST_Types.eqIdent)(v.value0)(v1.value0);
                  if ($707) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupSoft.value;
              };
              if (v instanceof DeclGroupValueSignature && v1 instanceof DeclGroupValue) {
                  var $710 = Data_Eq.eq(PureScript_CST_Types.eqIdent)(v.value0)(v1.value0);
                  if ($710) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v1 instanceof DeclGroupValueSignature) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupType && v1 instanceof DeclGroupType) {
                  return DeclGroupSoft.value;
              };
              if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupType) {
                  var $716 = Data_Eq.eq(PureScript_CST_Types.eqProper)(v.value0)(v1.value0);
                  if ($716) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupClass) {
                  var $719 = Data_Eq.eq(PureScript_CST_Types.eqProper)(v.value0)(v1.value0);
                  if ($719) {
                      return DeclGroupSame.value;
                  };
                  return DeclGroupHard.value;
              };
              if (v1 instanceof DeclGroupTypeSignature) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupClass && v1 instanceof DeclGroupClass) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupClass) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupInstance && v1 instanceof DeclGroupInstance) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupInstance) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupFixity && v1 instanceof DeclGroupFixity) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupFixity) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupForeign && v1 instanceof DeclGroupForeign) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupForeign) {
                  return DeclGroupHard.value;
              };
              if (v instanceof DeclGroupRole && v1 instanceof DeclGroupRole) {
                  return DeclGroupSoft.value;
              };
              if (v1 instanceof DeclGroupRole) {
                  return DeclGroupHard.value;
              };
              return DeclGroupSoft.value;
          };
      };
      var topDeclGroup = function (v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclType) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
              return new DeclGroupType(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclClass) {
              return new DeclGroupClass(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
              return new DeclGroupTypeSignature(v.value1.label.name);
          };
          if (v instanceof PureScript_CST_Types.DeclSignature) {
              return new DeclGroupValueSignature(v.value0.label.name);
          };
          if (v instanceof PureScript_CST_Types.DeclValue) {
              return new DeclGroupValue(v.value0.name.name);
          };
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
              return DeclGroupInstance.value;
          };
          if (v instanceof PureScript_CST_Types.DeclDerive) {
              return DeclGroupInstance.value;
          };
          if (v instanceof PureScript_CST_Types.DeclFixity) {
              return DeclGroupFixity.value;
          };
          if (v instanceof PureScript_CST_Types.DeclForeign) {
              return DeclGroupForeign.value;
          };
          if (v instanceof PureScript_CST_Types.DeclRole) {
              return DeclGroupRole.value;
          };
          if (v instanceof PureScript_CST_Types.DeclError) {
              return DeclGroupUnknown.value;
          };
          throw new Error("Failed pattern match at Tidy (line 1218, column 18 - line 1231, column 36): " + [ v.constructor.name ]);
      };
      return formatDeclGroups(topDeclGroupSeparator)(topDeclGroup)(formatDecl);
  })();
  var formatModule = function (conf) {
      return function (v) {
          var imports = Tidy_Doc.joinWithMap(Data_Foldable.foldableArray)(Tidy_Doc["break"])(formatImportDecl(conf))(v.header.imports);
          return Tidy_Doc.joinWith(Data_Foldable.foldableArray)(Tidy_Doc["break"])([ Tidy_Doc.space(Tidy_Doc.anchor(formatToken(conf)(v.header.keyword)))(Tidy_Doc.indent(Tidy_Doc.space(Tidy_Doc.flexSpaceBreak(Tidy_Doc.anchor(formatName(conf)(v.header.name)))(Tidy_Doc.anchor(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Tidy_Doc.monoidFormatDoc)(formatParenListNonEmpty(NotGrouped.value)(formatExport)(conf))(v.header.exports))))(Tidy_Doc.anchor(formatToken(conf)(v.header.where))))), Tidy_Doc.forceMinSourceBreaks(2)((function () {
              if (conf.importWrap instanceof ImportWrapAuto) {
                  return imports;
              };
              if (conf.importWrap instanceof ImportWrapSource) {
                  return Tidy_Doc.locally(function (v1) {
                      return {
                          indent: v1.indent,
                          indentSpaces: v1.indentSpaces,
                          indentUnit: v1.indentUnit,
                          indentWidth: v1.indentWidth,
                          pageWidth: Data_Bounded.top(Data_Bounded.boundedInt),
                          ribbonRatio: 1.0
                      };
                  })(imports);
              };
              throw new Error("Failed pattern match at Tidy (line 197, column 30 - line 201, column 69): " + [ conf.importWrap.constructor.name ]);
          })()), Tidy_Doc.forceMinSourceBreaks(2)(formatTopLevelGroups(conf)(v.body.decls)), Data_Foldable.foldr(Data_Foldable.foldableArray)(formatComment(Tidy_Doc.leadingLineComment)(Tidy_Doc.leadingBlockComment))(Data_Monoid.mempty(Tidy_Doc.monoidFormatDoc))(v.body.trailingComments) ]);
      };
  };
  exports["defaultFormatOptions"] = defaultFormatOptions;
  exports["TypeArrowFirst"] = TypeArrowFirst;
  exports["ImportWrapSource"] = ImportWrapSource;
  exports["formatModule"] = formatModule;
  exports["formatErrorVoid"] = formatErrorVoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["PureScript.CST.Errors"] = $PS["PureScript.CST.Errors"] || {};
  var exports = $PS["PureScript.CST.Errors"];
  var ExpectedEof = (function () {
      function ExpectedEof(value0) {
          this.value0 = value0;
      };
      ExpectedEof.create = function (value0) {
          return new ExpectedEof(value0);
      };
      return ExpectedEof;
  })();
  var LexExpected = (function () {
      function LexExpected(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexExpected.create = function (value0) {
          return function (value1) {
              return new LexExpected(value0, value1);
          };
      };
      return LexExpected;
  })();
  var LexInvalidCharEscape = (function () {
      function LexInvalidCharEscape(value0) {
          this.value0 = value0;
      };
      LexInvalidCharEscape.create = function (value0) {
          return new LexInvalidCharEscape(value0);
      };
      return LexInvalidCharEscape;
  })();
  var LexCharEscapeOutOfRange = (function () {
      function LexCharEscapeOutOfRange(value0) {
          this.value0 = value0;
      };
      LexCharEscapeOutOfRange.create = function (value0) {
          return new LexCharEscapeOutOfRange(value0);
      };
      return LexCharEscapeOutOfRange;
  })();
  var LexNumberOutOfRange = (function () {
      function LexNumberOutOfRange(value0) {
          this.value0 = value0;
      };
      LexNumberOutOfRange.create = function (value0) {
          return new LexNumberOutOfRange(value0);
      };
      return LexNumberOutOfRange;
  })();
  exports["ExpectedEof"] = ExpectedEof;
  exports["LexExpected"] = LexExpected;
  exports["LexInvalidCharEscape"] = LexInvalidCharEscape;
  exports["LexCharEscapeOutOfRange"] = LexCharEscapeOutOfRange;
  exports["LexNumberOutOfRange"] = LexNumberOutOfRange;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["PureScript.CST.Layout"] = $PS["PureScript.CST.Layout"] || {};
  var exports = $PS["PureScript.CST.Layout"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LytRoot = (function () {
      function LytRoot() {

      };
      LytRoot.value = new LytRoot();
      return LytRoot;
  })();
  var LytTopDecl = (function () {
      function LytTopDecl() {

      };
      LytTopDecl.value = new LytTopDecl();
      return LytTopDecl;
  })();
  var LytTopDeclHead = (function () {
      function LytTopDeclHead() {

      };
      LytTopDeclHead.value = new LytTopDeclHead();
      return LytTopDeclHead;
  })();
  var LytDeclGuard = (function () {
      function LytDeclGuard() {

      };
      LytDeclGuard.value = new LytDeclGuard();
      return LytDeclGuard;
  })();
  var LytCase = (function () {
      function LytCase() {

      };
      LytCase.value = new LytCase();
      return LytCase;
  })();
  var LytCaseBinders = (function () {
      function LytCaseBinders() {

      };
      LytCaseBinders.value = new LytCaseBinders();
      return LytCaseBinders;
  })();
  var LytCaseGuard = (function () {
      function LytCaseGuard() {

      };
      LytCaseGuard.value = new LytCaseGuard();
      return LytCaseGuard;
  })();
  var LytLambdaBinders = (function () {
      function LytLambdaBinders() {

      };
      LytLambdaBinders.value = new LytLambdaBinders();
      return LytLambdaBinders;
  })();
  var LytParen = (function () {
      function LytParen() {

      };
      LytParen.value = new LytParen();
      return LytParen;
  })();
  var LytBrace = (function () {
      function LytBrace() {

      };
      LytBrace.value = new LytBrace();
      return LytBrace;
  })();
  var LytSquare = (function () {
      function LytSquare() {

      };
      LytSquare.value = new LytSquare();
      return LytSquare;
  })();
  var LytIf = (function () {
      function LytIf() {

      };
      LytIf.value = new LytIf();
      return LytIf;
  })();
  var LytThen = (function () {
      function LytThen() {

      };
      LytThen.value = new LytThen();
      return LytThen;
  })();
  var LytProperty = (function () {
      function LytProperty() {

      };
      LytProperty.value = new LytProperty();
      return LytProperty;
  })();
  var LytForall = (function () {
      function LytForall() {

      };
      LytForall.value = new LytForall();
      return LytForall;
  })();
  var LytTick = (function () {
      function LytTick() {

      };
      LytTick.value = new LytTick();
      return LytTick;
  })();
  var LytLet = (function () {
      function LytLet() {

      };
      LytLet.value = new LytLet();
      return LytLet;
  })();
  var LytLetStmt = (function () {
      function LytLetStmt() {

      };
      LytLetStmt.value = new LytLetStmt();
      return LytLetStmt;
  })();
  var LytWhere = (function () {
      function LytWhere() {

      };
      LytWhere.value = new LytWhere();
      return LytWhere;
  })();
  var LytOf = (function () {
      function LytOf() {

      };
      LytOf.value = new LytOf();
      return LytOf;
  })();
  var LytDo = (function () {
      function LytDo() {

      };
      LytDo.value = new LytDo();
      return LytDo;
  })();
  var LytAdo = (function () {
      function LytAdo() {

      };
      LytAdo.value = new LytAdo();
      return LytAdo;
  })();
  var lytToken = function (pos) {
      return function (value) {
          return {
              range: {
                  start: pos,
                  end: pos
              },
              leadingComments: [  ],
              trailingComments: [  ],
              value: value
          };
      };
  };
  var isTopDecl = function (tokPos) {
      return function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
              return true;
          };
          return false;
      };
  };
  var isIndented = function (v) {
      if (v instanceof LytLet) {
          return true;
      };
      if (v instanceof LytLetStmt) {
          return true;
      };
      if (v instanceof LytWhere) {
          return true;
      };
      if (v instanceof LytOf) {
          return true;
      };
      if (v instanceof LytDo) {
          return true;
      };
      if (v instanceof LytAdo) {
          return true;
      };
      return false;
  };
  var eqLayoutDelim = {
      eq: function (x) {
          return function (y) {
              if (x instanceof LytRoot && y instanceof LytRoot) {
                  return true;
              };
              if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
                  return true;
              };
              if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
                  return true;
              };
              if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
                  return true;
              };
              if (x instanceof LytCase && y instanceof LytCase) {
                  return true;
              };
              if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
                  return true;
              };
              if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
                  return true;
              };
              if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
                  return true;
              };
              if (x instanceof LytParen && y instanceof LytParen) {
                  return true;
              };
              if (x instanceof LytBrace && y instanceof LytBrace) {
                  return true;
              };
              if (x instanceof LytSquare && y instanceof LytSquare) {
                  return true;
              };
              if (x instanceof LytIf && y instanceof LytIf) {
                  return true;
              };
              if (x instanceof LytThen && y instanceof LytThen) {
                  return true;
              };
              if (x instanceof LytProperty && y instanceof LytProperty) {
                  return true;
              };
              if (x instanceof LytForall && y instanceof LytForall) {
                  return true;
              };
              if (x instanceof LytTick && y instanceof LytTick) {
                  return true;
              };
              if (x instanceof LytLet && y instanceof LytLet) {
                  return true;
              };
              if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
                  return true;
              };
              if (x instanceof LytWhere && y instanceof LytWhere) {
                  return true;
              };
              if (x instanceof LytOf && y instanceof LytOf) {
                  return true;
              };
              if (x instanceof LytDo && y instanceof LytDo) {
                  return true;
              };
              if (x instanceof LytAdo && y instanceof LytAdo) {
                  return true;
              };
              return false;
          };
      }
  };
  var insertLayout = function (v) {
      return function (nextPos) {
          return function (stack) {
              var sepP = function (lytPos) {
                  return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
              };
              var pushStack = function (lytPos) {
                  return function (lyt) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
                      };
                  };
              };
              var popStack = function (v1) {
                  return function (v2) {
                      if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return v2;
                  };
              };
              var offsideP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column < lytPos.column;
                  };
              };
              var offsideEndP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && v.range.start.column <= lytPos.column;
                  };
              };
              var insertToken = function (token) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
                  };
              };
              var insertStart = function (lyt) {
                  return function (v1) {
                      var v2 = Data_Foldable.find(Data_List_Types.foldableList)(function ($298) {
                          return isIndented(Data_Tuple.snd($298));
                      })(v1.value0);
                      if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                          return v1;
                      };
                      return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
                  };
              };
              var insertEnd = function (indent) {
                  return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
              };
              var indentedP = Data_Function["const"](isIndented);
              var indentSepP = function (lytPos) {
                  return function (lyt) {
                      return isIndented(lyt) && sepP(lytPos);
                  };
              };
              var insertSep = function (v1) {
                  var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
                      return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                  };
                  if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
                      if (v1.value0.value0.value1 instanceof LytOf) {
                          return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
                      };
                      return insertToken(sepTok)(v1);
                  };
                  return v1;
              };
              var collapse = function (p) {
                  var go = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = (function () {
                                      var $111 = isIndented(v1.value0.value1);
                                      if ($111) {
                                          return Data_Array.snoc(acc)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                                      };
                                      return acc;
                                  })();
                                  return;
                              };
                              $tco_done = true;
                              return new Data_Tuple.Tuple(v1, acc);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  return Data_Tuple.uncurry(go);
              };
              var insertDefault = function (state) {
                  return insertToken(v)(insertSep(collapse(offsideP)(state)));
              };
              var insertKwProperty = function (k) {
                  return function (state) {
                      var v1 = insertDefault(state);
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
                      };
                      return k(v1);
                  };
              };
              var insert = function (v1) {
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDecl.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
                      var v2 = insertDefault(v1);
                      if (isTopDecl(v.range.start)(v2.value0)) {
                          return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
                      var whereP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                          return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
                      };
                      if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                          return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
                      };
                      return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
                      var inP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytLet) {
                                  return false;
                              };
                              if (v3 instanceof LytAdo) {
                                  return false;
                              };
                              return isIndented(v3);
                          };
                      };
                      var v2 = collapse(inP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                          return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                          return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
                      var next = function (v2) {
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytDo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytAdo && v2.value0.value0.value0.column === v.range.start.column)) {
                              return insertStart(LytLetStmt.value)(v2);
                          };
                          return insertStart(LytLet.value)(v2);
                      };
                      return insertKwProperty(next)(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
                      return insertKwProperty(insertStart(LytDo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
                      return insertKwProperty(insertStart(LytAdo.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
                      return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                          return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v2));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
                      return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                          return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
                      };
                      return popStack(function (v3) {
                          return Data_Eq.eq(eqLayoutDelim)(v3)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      var v3 = collapse(offsideP)(v1);
                      if (isTopDecl(v.range.start)(v3.value0)) {
                          return insertToken(v)(v3);
                      };
                      return popStack(function (v4) {
                          return Data_Eq.eq(eqLayoutDelim)(v4)(LytProperty.value);
                      })(insertToken(v)(insertSep(v3)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokForall) {
                      return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokBackslash) {
                      return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
                      var guardP = function (v2) {
                          if (v2 instanceof LytCaseBinders) {
                              return true;
                          };
                          if (v2 instanceof LytCaseGuard) {
                              return true;
                          };
                          if (v2 instanceof LytLambdaBinders) {
                              return true;
                          };
                          return false;
                      };
                      var arrowP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytDo) {
                                  return true;
                              };
                              if (v3 instanceof LytOf) {
                                  return false;
                              };
                              return offsideEndP(v2)(v3);
                          };
                      };
                      return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokEquals) {
                      var equalsP = function (v2) {
                          return function (v3) {
                              if (v3 instanceof LytWhere) {
                                  return true;
                              };
                              if (v3 instanceof LytLet) {
                                  return true;
                              };
                              if (v3 instanceof LytLetStmt) {
                                  return true;
                              };
                              return false;
                          };
                      };
                      var v2 = collapse(equalsP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokPipe) {
                      var v2 = collapse(offsideEndP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                          return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                          return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
                      };
                      return insertDefault(v1);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokTick) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                          return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
                      };
                      return pushStack(v.range.start)(LytTick.value)(insertToken(v)(insertSep(collapse(offsideEndP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokComma) {
                      var v2 = collapse(indentedP)(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                          return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
                      };
                      return insertToken(v)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokDot) {
                      var v2 = insertDefault(v1);
                      if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                          return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
                      };
                      return pushStack(v.range.start)(LytProperty.value)(v2);
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
                      return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
                      return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
                      return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightParen) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytParen.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytBrace.value);
                      })(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(collapse(indentedP)(v1))));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
                      return insertToken(v)(popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytSquare.value);
                      })(collapse(indentedP)(v1)));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokString) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
                      return popStack(function (v2) {
                          return Data_Eq.eq(eqLayoutDelim)(v2)(LytProperty.value);
                      })(insertDefault(v1));
                  };
                  if (v.value instanceof PureScript_CST_Types.TokOperator) {
                      return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
                  };
                  return insertDefault(v1);
              };
              return insert(new Data_Tuple.Tuple(stack, [  ]));
          };
      };
  };
  exports["LytRoot"] = LytRoot;
  exports["isIndented"] = isIndented;
  exports["insertLayout"] = insertLayout;
  exports["lytToken"] = lytToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["PureScript.CST.TokenStream"] = $PS["PureScript.CST.TokenStream"] || {};
  var exports = $PS["PureScript.CST.TokenStream"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var TokenEOF = (function () {
      function TokenEOF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TokenEOF.create = function (value0) {
          return function (value1) {
              return new TokenEOF(value0, value1);
          };
      };
      return TokenEOF;
  })();
  var TokenError = (function () {
      function TokenError(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenError.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenError(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenError;
  })();
  var TokenCons = (function () {
      function TokenCons(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      TokenCons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new TokenCons(value0, value1, value2, value3);
                  };
              };
          };
      };
      return TokenCons;
  })();
  var step = (function () {
      var $29 = Data_Newtype.unwrap();
      return function ($30) {
          return Data_Lazy.force($29($30));
      };
  })();
  var unwindLayout = function (pos) {
      return function (eof) {
          var go = function (stk) {
              return Data_Lazy.defer(function (v) {
                  if (stk instanceof Data_List_Types.Nil) {
                      return step(eof);
                  };
                  if (stk instanceof Data_List_Types.Cons) {
                      if (stk.value0.value1 instanceof PureScript_CST_Layout.LytRoot) {
                          return step(eof);
                      };
                      if (PureScript_CST_Layout.isIndented(stk.value0.value1)) {
                          return new TokenCons(PureScript_CST_Layout.lytToken(pos)(new PureScript_CST_Types.TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return step(go(stk.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 66, column 27): " + [ stk.value0.value1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 66, column 27): " + [ stk.constructor.name ]);
              });
          };
          return go;
      };
  };
  var consTokens = function (dictFoldable) {
      var go = function (v) {
          return function (v1) {
              return new Data_Tuple.Tuple(v.value0.range.start, Data_Lazy.defer(function (v2) {
                  return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
              }));
          };
      };
      return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(go));
  };
  exports["TokenEOF"] = TokenEOF;
  exports["TokenError"] = TokenError;
  exports["TokenCons"] = TokenCons;
  exports["step"] = step;
  exports["consTokens"] = consTokens;
  exports["unwindLayout"] = unwindLayout;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["PureScript.CST.Lexer"] = $PS["PureScript.CST.Lexer"] || {};
  var exports = $PS["PureScript.CST.Lexer"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Either = $PS["Data.Either"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Number = $PS["Data.Number"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var PureScript_CST_Errors = $PS["PureScript.CST.Errors"];
  var PureScript_CST_Layout = $PS["PureScript.CST.Layout"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var LexFail = (function () {
      function LexFail(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexFail.create = function (value0) {
          return function (value1) {
              return new LexFail(value0, value1);
          };
      };
      return LexFail;
  })();
  var LexSucc = (function () {
      function LexSucc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LexSucc.create = function (value0) {
          return function (value1) {
              return new LexSucc(value0, value1);
          };
      };
      return LexSucc;
  })();
  var Lex = function (x) {
      return x;
  };
  var $$try = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, str);
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(v1.value0, v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 83, column 3 - line 85, column 31): " + [ v1.constructor.name ]);
      };
  };
  var toModuleName = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(Data_String_Common.joinWith(".")(v));
  };
  var qualLength = Data_Maybe.maybe(0)((function () {
      var $248 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
      var $249 = Data_Newtype.unwrap();
      return function ($250) {
          return $248(Data_String_CodePoints.length($249($250)));
      };
  })());
  var optional = function (v) {
      return function (str) {
          var v1 = v(str);
          if (v1 instanceof LexFail) {
              if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v1.value1)) {
                  return new LexSucc(Data_Maybe.Nothing.value, str);
              };
              if (Data_Boolean.otherwise) {
                  return new LexFail(v1.value0, v1.value1);
              };
          };
          if (v1 instanceof LexSucc) {
              return new LexSucc(new Data_Maybe.Just(v1.value0), v1.value1);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 132, column 3 - line 139, column 25): " + [ v1.constructor.name ]);
      };
  };
  var mkUnexpected = function (str) {
      var start = Data_String_CodePoints.take(6)(str);
      var len = Data_String_CodePoints.length(start);
      var $87 = len === 0;
      if ($87) {
          return "end of file";
      };
      var $88 = len < 6;
      if ($88) {
          return start;
      };
      return start + "...";
  };
  var regex = function (mkErr) {
      return function (regexStr) {
          var matchRegex = Data_String_Regex_Unsafe.unsafeRegex("^(?:" + (regexStr + ")"))(Data_String_Regex_Flags.unicode);
          return function (str) {
              var v = Data_String_Regex.match(matchRegex)(str);
              var v1 = function (v2) {
                  return new LexFail(function (v3) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
              if (v instanceof Data_Maybe.Just) {
                  var $90 = Data_Array_NonEmpty.head(v.value0);
                  if ($90 instanceof Data_Maybe.Just) {
                      return new LexSucc($90.value0, Data_String_CodeUnits.drop(Data_String_CodeUnits.length($90.value0))(str));
                  };
                  return v1(true);
              };
              return v1(true);
          };
      };
  };
  var satisfy = function (mkErr) {
      return function (p) {
          return function (str) {
              var v = Data_String_CodeUnits.charAt(0)(str);
              if (v instanceof Data_Maybe.Just && p(v.value0)) {
                  return new LexSucc(v.value0, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v1) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var string = function (mkErr) {
      return function (match) {
          return function (str) {
              var $95 = Data_String_CodeUnits.take(Data_String_CodeUnits.length(match))(str) === match;
              if ($95) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(Data_String_CodeUnits.length(match))(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var many = function (v) {
      return function (str) {
          var go = function ($copy_acc) {
              return function ($copy_str$prime) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, str$prime) {
                      var v1 = v(str$prime);
                      if (v1 instanceof LexFail) {
                          if (Data_String_CodeUnits.length(str$prime) === Data_String_CodeUnits.length(v1.value1)) {
                              $tco_done = true;
                              return new LexSucc(acc, str$prime);
                          };
                          if (Data_Boolean.otherwise) {
                              $tco_done = true;
                              return new LexFail(v1.value0, v1.value1);
                          };
                      };
                      if (v1 instanceof LexSucc) {
                          $tco_var_acc = Data_Array.snoc(acc)(v1.value0);
                          $copy_str$prime = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 153, column 7 - line 160, column 38): " + [ v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_str$prime);
                  };
                  return $tco_result;
              };
          };
          return go([  ])(str);
      };
  };
  var functorLex = {
      map: function (f) {
          return function (v) {
              return function (str) {
                  var v1 = v(str);
                  if (v1 instanceof LexFail) {
                      return new LexFail(v1.value0, v1.value1);
                  };
                  if (v1 instanceof LexSucc) {
                      return new LexSucc(f(v1.value0), v1.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 45, column 5 - line 47, column 37): " + [ v1.constructor.name ]);
              };
          };
      }
  };
  var spaceComment = Data_Functor.map(functorLex)(Data_String_CodeUnits.length)(regex(PureScript_CST_Errors.LexExpected.create("spaces"))(" +"));
  var fail = function ($251) {
      return Lex(LexFail.create(Data_Function["const"]($251)));
  };
  var char$prime = function (mkErr) {
      return function (res) {
          return function (match) {
              return function (str) {
                  var $109 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
                  if ($109) {
                      return new LexSucc(res, Data_String_CodeUnits.drop(1)(str));
                  };
                  return new LexFail(function (v) {
                      return mkErr(mkUnexpected(str));
                  }, str);
              };
          };
      };
  };
  var $$char = function (mkErr) {
      return function (match) {
          return function (str) {
              var $110 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
              if ($110) {
                  return new LexSucc(match, Data_String_CodeUnits.drop(1)(str));
              };
              return new LexFail(function (v) {
                  return mkErr(mkUnexpected(str));
              }, str);
          };
      };
  };
  var bumpText = function (v) {
      return function (colOffset) {
          return function (str) {
              var go = function ($copy_n) {
                  return function ($copy_ix) {
                      var $tco_var_n = $copy_n;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(n, ix) {
                          var v1 = Data_String_CodeUnits["indexOf'"]("\x0a")(ix)(str);
                          if (v1 instanceof Data_Maybe.Just) {
                              $tco_var_n = n + 1 | 0;
                              $copy_ix = v1.value0 + 1 | 0;
                              return;
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              if (n === 0) {
                                  $tco_done = true;
                                  return {
                                      line: v.line,
                                      column: (v.column + Data_String_CodePoints.length(str) | 0) + (colOffset * 2 | 0) | 0
                                  };
                              };
                              if (Data_Boolean.otherwise) {
                                  $tco_done = true;
                                  return {
                                      line: v.line + n | 0,
                                      column: Data_String_CodePoints.length(Data_String_CodeUnits.drop(ix)(str)) + colOffset | 0
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 308, column 13 - line 317, column 12): " + [ v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_n, $copy_ix);
                      };
                      return $tco_result;
                  };
              };
              return go(0)(0);
          };
      };
  };
  var bumpToken = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.TokLeftParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightParen) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightBrace) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightSquare) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 6 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokEquals) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokPipe) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokTick) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokDot) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokComma) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUnderscore) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokBackslash) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokAt) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokLowerName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokUpperName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokOperator) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolName) {
              return {
                  line: v.line,
                  column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
              return {
                  line: v.line,
                  column: v.column + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
              return {
                  line: v.line,
                  column: v.column + 4 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokHole) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 1 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokChar) {
              return {
                  line: v.line,
                  column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 2 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokInt) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokNumber) {
              return {
                  line: v.line,
                  column: v.column + Data_String_CodePoints.length(v1.value0) | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.TokString) {
              return bumpText(v)(1)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokRawString) {
              return bumpText(v)(3)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutStart) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutSep) {
              return v;
          };
          if (v1 instanceof PureScript_CST_Types.TokLayoutEnd) {
              return v;
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 225, column 34 - line 303, column 8): " + [ v1.constructor.name ]);
      };
  };
  var bumpComment = function (v) {
      return function (v1) {
          if (v1 instanceof PureScript_CST_Types.Comment) {
              return bumpText(v)(0)(v1.value0);
          };
          if (v1 instanceof PureScript_CST_Types.Space) {
              return {
                  line: v.line,
                  column: v.column + v1.value0 | 0
              };
          };
          if (v1 instanceof PureScript_CST_Types.Line) {
              return {
                  line: v.line + v1.value1 | 0,
                  column: 0
              };
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 320, column 36 - line 326, column 34): " + [ v1.constructor.name ]);
      };
  };
  var applyLex = {
      apply: function (v) {
          return function (v1) {
              return function (str) {
                  var v2 = v(str);
                  if (v2 instanceof LexFail) {
                      return new LexFail(v2.value0, v2.value1);
                  };
                  if (v2 instanceof LexSucc) {
                      var v3 = v1(v2.value1);
                      if (v3 instanceof LexFail) {
                          return new LexFail(v3.value0, v3.value1);
                      };
                      if (v3 instanceof LexSucc) {
                          return new LexSucc(v2.value0(v3.value0), v3.value1);
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 54, column 9 - line 57, column 32): " + [ v3.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 51, column 5 - line 57, column 32): " + [ v2.constructor.name ]);
              };
          };
      },
      Functor0: function () {
          return functorLex;
      }
  };
  var bindLex = {
      bind: function (v) {
          return function (k) {
              return function (str) {
                  var v1 = v(str);
                  if (v1 instanceof LexFail) {
                      return new LexFail(v1.value0, v1.value1);
                  };
                  if (v1 instanceof LexSucc) {
                      var v2 = k(v1.value0);
                      return v2(v1.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 64, column 5 - line 68, column 16): " + [ v1.constructor.name ]);
              };
          };
      },
      Apply0: function () {
          return applyLex;
      }
  };
  var applicativeLex = {
      pure: function ($252) {
          return Lex(LexSucc.create($252));
      },
      Apply0: function () {
          return applyLex;
      }
  };
  var altLex = {
      alt: function (v) {
          return function (v1) {
              return function (str) {
                  var v2 = v(str);
                  if (v2 instanceof LexFail) {
                      if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v2.value1)) {
                          return v1(str);
                      };
                      if (Data_Boolean.otherwise) {
                          return new LexFail(v2.value0, v2.value1);
                      };
                  };
                  if (v2 instanceof LexSucc) {
                      return new LexSucc(v2.value0, v2.value1);
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 72, column 5 - line 79, column 20): " + [ v2.constructor.name ]);
              };
          };
      },
      Functor0: function () {
          return functorLex;
      }
  };
  var comment = Control_Alt.alt(altLex)(regex(PureScript_CST_Errors.LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*-\\}"))(regex(PureScript_CST_Errors.LexExpected.create("line comment"))("--[^\\r\\n]*"));
  var lineComment = Control_Alt.alt(altLex)(Data_Functor.map(functorLex)((function () {
      var $253 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function ($254) {
          return $253(Data_String_CodePoints.length($254));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("\x0a+")))(Data_Functor.map(functorLex)((function () {
      var $255 = PureScript_CST_Types.Line.create(PureScript_CST_Types.CRLF.value);
      return function ($256) {
          return $255((function (v) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2);
          })(Data_String_CodePoints.length($256)));
      };
  })())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("(?:\x0d\x0a)+")));
  var leadingComments = many(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)))(lineComment));
  var token = (function () {
      var tokenTick = char$prime(PureScript_CST_Errors.LexExpected.create("backtick"))(PureScript_CST_Types.TokTick.value)("`");
      var tokenRightSquare = char$prime(PureScript_CST_Errors.LexExpected.create("right square"))(PureScript_CST_Types.TokRightSquare.value)("]");
      var tokenRightParen = char$prime(PureScript_CST_Errors.LexExpected.create("right paren"))(PureScript_CST_Types.TokRightParen.value)(")");
      var tokenRightBrace = char$prime(PureScript_CST_Errors.LexExpected.create("right brace"))(PureScript_CST_Types.TokRightBrace.value)("}");
      var tokenLeftSquare = char$prime(PureScript_CST_Errors.LexExpected.create("left square"))(PureScript_CST_Types.TokLeftSquare.value)("[");
      var tokenLeftParen = char$prime(PureScript_CST_Errors.LexExpected.create("left paren"))(PureScript_CST_Types.TokLeftParen.value)("(");
      var tokenLeftBrace = char$prime(PureScript_CST_Errors.LexExpected.create("left brace"))(PureScript_CST_Types.TokLeftBrace.value)("{");
      var tokenComma = char$prime(PureScript_CST_Errors.LexExpected.create("comma"))(PureScript_CST_Types.TokComma.value)(",");
      var stripUnderscores = Data_String_Common.replaceAll("_")("");
      var stringSpaceEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
      var stringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("string characters"))("[^\"\\\\]+");
      var rawStringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("raw string characters"))("\"\"\"\"{0,2}([^\"]+\"{1,2})*[^\"]*\"\"\"");
      var parseSymbolIdent = regex(PureScript_CST_Errors.LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
      var parseSymbol = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "->") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.Unicode.value);
                  };
                  return new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokSymbolName(v1, v);
          };
      })($$try(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
      var parseStringSpaceEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: ""
          };
      })(stringSpaceEscapeRegex);
      var parseStringChars = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v,
              string: v
          };
      })(stringCharsRegex);
      var parseRawString = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokRawString(Data_String_CodeUnits.dropRight(3)(Data_String_CodeUnits.drop(3)(v)));
      })(rawStringCharsRegex);
      var parseProper = regex(PureScript_CST_Errors.LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
      var parseUpper = Data_Functor.map(functorLex)(Data_Function.flip(PureScript_CST_Types.TokUpperName.create))(parseProper);
      var parseOperator = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "<-") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2190") {
                      return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "->") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2192") {
                      return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=>") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u21d2") {
                      return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "::") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "\u2237") {
                      return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "\u2200") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.Unicode.value);
                  };
                  if (v === "=") {
                      return PureScript_CST_Types.TokEquals.value;
                  };
                  if (v === ".") {
                      return PureScript_CST_Types.TokDot.value;
                  };
                  if (v === "\\") {
                      return PureScript_CST_Types.TokBackslash.value;
                  };
                  if (v === "|") {
                      return PureScript_CST_Types.TokPipe.value;
                  };
                  if (v === "@") {
                      return PureScript_CST_Types.TokAt.value;
                  };
                  if (v === "`") {
                      return PureScript_CST_Types.TokTick.value;
                  };
                  return new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokOperator(v1, v);
          };
      })(parseSymbolIdent);
      var parseIdent = regex(PureScript_CST_Errors.LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
      var parseLower = Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  if (v === "forall") {
                      return new PureScript_CST_Types.TokForall(PureScript_CST_Types.ASCII.value);
                  };
                  if (v === "_") {
                      return PureScript_CST_Types.TokUnderscore.value;
                  };
                  return new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, v);
              };
              return new PureScript_CST_Types.TokLowerName(v1, v);
          };
      })(parseIdent);
      var parseName = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseLower)(parseUpper))(parseOperator))(parseSymbol);
      var parseExponentSign = Control_Alt.alt(altLex)(string(PureScript_CST_Errors.LexExpected.create("negative"))("-"))(string(PureScript_CST_Errors.LexExpected.create("positive"))("+"));
      var intPartRegex = regex(PureScript_CST_Errors.LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
      var parseExponentPart = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return {
                  sign: v,
                  exponent: v1
              };
          };
      })(optional(parseExponentSign)))(intPartRegex);
      var hexIntRegex = regex(PureScript_CST_Errors.LexExpected.create("hex int"))("[a-fA-F0-9]+");
      var hexIntPrefix = string(PureScript_CST_Errors.LexExpected.create("hex int prefix"))("0x");
      var parseHexInt = Control_Bind.bind(bindLex)(Control_Apply.applySecond(applyLex)(hexIntPrefix)(hexIntRegex))(function (raw) {
          var v = Data_Int.fromStringAs(Data_Int.hexadecimal)(raw);
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.SmallInt(v.value0)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.BigHex(raw)));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 561, column 5 - line 565, column 49): " + [ v.constructor.name ]);
      });
      var hexEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
      var parseHexEscape = Control_Bind.bind(bindLex)(hexEscapeRegex)(function (esc) {
          var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Char.fromCharCode)(Data_Int.fromStringAs(Data_Int.hexadecimal)(esc));
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\x" + esc,
                  "char": v.value0
              });
          };
          if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexCharEscapeOutOfRange(esc));
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 509, column 5 - line 513, column 43): " + [ v.constructor.name ]);
      });
      var fractionPartRegex = regex(PureScript_CST_Errors.LexExpected.create("fraction part"))("[0-9_]+");
      var charSingleQuote = $$char(PureScript_CST_Errors.LexExpected.create("single quote"))("'");
      var charQuote = $$char(PureScript_CST_Errors.LexExpected.create("quote"))("\"");
      var charQuestionMark = $$char(PureScript_CST_Errors.LexExpected.create("question mark"))("?");
      var parseHole = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokHole(v);
      })($$try(Control_Apply.applySecond(applyLex)(charQuestionMark)(Control_Alt.alt(altLex)(parseIdent)(parseProper))));
      var charExponent = $$char(PureScript_CST_Errors.LexExpected.create("exponent"))("e");
      var charDot = $$char(PureScript_CST_Errors.LexExpected.create("dot"))(".");
      var parseModuleName = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return v1(toModuleName(v));
          };
      })(many($$try(Control_Apply.applyFirst(applyLex)(parseProper)(charDot)))))(parseName);
      var parseNumber = Control_Bind.bind(bindLex)(intPartRegex)(function (intPart) {
          return Control_Bind.bind(bindLex)(optional($$try(Control_Apply.applySecond(applyLex)(charDot)(fractionPartRegex))))(function (fractionPart) {
              return Control_Bind.bind(bindLex)(optional(Control_Apply.applySecond(applyLex)(charExponent)(parseExponentPart)))(function (exponentPart) {
                  var $211 = Data_Maybe.isNothing(fractionPart) && Data_Maybe.isNothing(exponentPart);
                  if ($211) {
                      var intVal = stripUnderscores(intPart);
                      var v = Data_Int.fromString(intVal);
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.SmallInt(v.value0)));
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.BigInt(intVal)));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 573, column 7 - line 577, column 48): " + [ v.constructor.name ]);
                  };
                  var raw = intPart + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (fr) {
                      return "." + fr;
                  })(fractionPart) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (ex) {
                      return "e" + (Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(ex.sign) + ex.exponent);
                  })(exponentPart));
                  var v = Data_Number.fromString(stripUnderscores(raw));
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokNumber(raw, v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return fail(new PureScript_CST_Errors.LexNumberOutOfRange(raw));
                  };
                  throw new Error("Failed pattern match at PureScript.CST.Lexer (line 584, column 7 - line 588, column 41): " + [ v.constructor.name ]);
              });
          });
      });
      var parseNumericLiteral = Control_Alt.alt(altLex)(parseHexInt)(parseNumber);
      var charBackslash = $$char(PureScript_CST_Errors.LexExpected.create("backslash"))("\\");
      var charAny = satisfy(PureScript_CST_Errors.LexExpected.create("char"))(Data_Function["const"](true));
      var parseEscape = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "t") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\t",
                  "char": "\x09"
              });
          };
          if (ch === "r") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\r",
                  "char": "\x0d"
              });
          };
          if (ch === "n") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\n",
                  "char": "\x0a"
              });
          };
          if (ch === "\"") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\"",
                  "char": "\""
              });
          };
          if (ch === "'") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\'",
                  "char": "'"
              });
          };
          if (ch === "\\") {
              return Control_Applicative.pure(applicativeLex)({
                  raw: "\\\\",
                  "char": "\\"
              });
          };
          if (ch === "x") {
              return parseHexEscape;
          };
          return fail(new PureScript_CST_Errors.LexInvalidCharEscape(Data_String_CodeUnits.singleton(ch)));
      });
      var parseChar = Control_Bind.bind(bindLex)(charAny)(function (ch) {
          if (ch === "\\") {
              return parseEscape;
          };
          if (ch === "'") {
              return fail(new PureScript_CST_Errors.LexExpected("character", "empty character literal"));
          };
          return Control_Applicative.pure(applicativeLex)({
              raw: Data_String_CodeUnits.singleton(ch),
              "char": ch
          });
      });
      var parseCharLiteral = Data_Functor.map(functorLex)(function (v) {
          return new PureScript_CST_Types.TokChar(v.raw, v["char"]);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charSingleQuote)(parseChar))(charSingleQuote));
      var parseStringEscape = Data_Functor.map(functorLex)(function (v) {
          return {
              raw: v.raw,
              string: Data_String_CodeUnits.singleton(v["char"])
          };
      })(Control_Apply.applySecond(applyLex)(charBackslash)(parseEscape));
      var parseStringPart = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseStringChars)(parseStringSpaceEscape))(parseStringEscape);
      var parseString = Data_Functor.map(functorLex)(function (v) {
          var v1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
              reflectSymbol: function () {
                  return "raw";
              }
          })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons({
              reflectSymbol: function () {
                  return "string";
              }
          })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))(v);
          return new PureScript_CST_Types.TokString(v1.raw, v1.string);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charQuote)(many(parseStringPart)))(charQuote));
      var parseStringLiteral = Control_Alt.alt(altLex)(parseRawString)(parseString);
      return Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseHole)(parseModuleName))(parseCharLiteral))(parseStringLiteral))(parseNumericLiteral))(tokenLeftParen))(tokenRightParen))(tokenLeftBrace))(tokenRightBrace))(tokenLeftSquare))(tokenRightSquare))(tokenTick))(tokenComma);
  })();
  var lexToken = function ($257) {
      return (function (v) {
          if (v instanceof LexSucc && v.value1 === "") {
              return new Data_Either.Right(v.value0);
          };
          if (v instanceof LexSucc) {
              return new Data_Either.Left(function (v1) {
                  return new PureScript_CST_Errors.ExpectedEof(v.value0);
              });
          };
          if (v instanceof LexFail) {
              return new Data_Either.Left(v.value0);
          };
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 217, column 18 - line 220, column 28): " + [ v.constructor.name ]);
      })(token($257));
  };
  var trailingComments = many(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)));
  var lexWithState = (function () {
      var token$prime = Control_Apply.apply(applyLex)(Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function (v) {
          return function (v1) {
              return function (v2) {
                  return {
                      token: v,
                      trailing: v1,
                      nextLeading: v2
                  };
              };
          };
      })(token))(trailingComments))(leadingComments);
      var go = function (stack) {
          return function (startPos) {
              return function (leading) {
                  return function (str) {
                      return Data_Lazy.defer(function (v) {
                          var $232 = str === "";
                          if ($232) {
                              return PureScript_CST_TokenStream.step(PureScript_CST_TokenStream.unwindLayout(startPos)(Data_Lazy.defer(function (v1) {
                                  return new PureScript_CST_TokenStream.TokenEOF(startPos, leading);
                              }))(stack));
                          };
                          var v1 = token$prime(str);
                          if (v1 instanceof LexFail) {
                              var errPos = bumpText(startPos)(0)(Data_String_CodeUnits.take(Data_String_CodeUnits.length(str) - Data_String_CodeUnits.length(v1.value1) | 0)(str));
                              return new PureScript_CST_TokenStream.TokenError(errPos, v1.value0(Data_Unit.unit), Data_Maybe.Nothing.value, stack);
                          };
                          if (v1 instanceof LexSucc) {
                              var endPos = bumpToken(startPos)(v1.value0.token);
                              var nextStart = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
                              var posToken = {
                                  range: {
                                      start: startPos,
                                      end: endPos
                                  },
                                  leadingComments: leading,
                                  trailingComments: v1.value0.trailing,
                                  value: v1.value0.token
                              };
                              var v2 = PureScript_CST_Layout.insertLayout(posToken)(nextStart)(stack);
                              return PureScript_CST_TokenStream.step(Data_Tuple.snd(PureScript_CST_TokenStream.consTokens(Data_Foldable.foldableArray)(v2.value1)(new Data_Tuple.Tuple(nextStart, go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
                          };
                          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 188, column 7 - line 207, column 63): " + [ v1.constructor.name ]);
                      });
                  };
              };
          };
      };
      var init = function (initStack) {
          return function (initPos) {
              return function (str) {
                  return Data_Lazy.defer(function (v) {
                      var v1 = leadingComments(str);
                      if (v1 instanceof LexFail) {
                          return Partial_Unsafe.unsafeCrashWith("Leading comments can't fail.");
                      };
                      if (v1 instanceof LexSucc) {
                          var nextPos = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(initPos)(v1.value0);
                          return PureScript_CST_TokenStream.step(go(initStack)(nextPos)(v1.value0)(v1.value1));
                      };
                      throw new Error("Failed pattern match at PureScript.CST.Lexer (line 175, column 5 - line 180, column 51): " + [ v1.constructor.name ]);
                  });
              };
          };
      };
      return init;
  })();
  var lex = lexWithState(new Data_List_Types.Cons(new Data_Tuple.Tuple({
      line: 0,
      column: 0
  }, PureScript_CST_Layout.LytRoot.value), Data_List_Types.Nil.value))({
      line: 0,
      column: 0
  });
  exports["lex"] = lex;
  exports["lexToken"] = lexToken;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.Common"] = $PS["Tidy.Codegen.Common"] || {};
  var exports = $PS["Tidy.Codegen.Common"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];                
  var zeroRange = Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "end";
      }
  })()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "start";
      }
  })()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "column";
      }
  })()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "line";
      }
  })()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringInt))(Data_Semiring.semiringInt))))(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "column";
      }
  })()(Data_Semiring.semiringRecordCons({
      reflectSymbol: function () {
          return "line";
      }
  })()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringInt))(Data_Semiring.semiringInt)))));
  var toWrapped = function (open) {
      return function (close) {
          return function ($7) {
              return PureScript_CST_Types.Wrapped((function (v) {
                  return {
                      open: open,
                      close: close,
                      value: v
                  };
              })($7));
          };
      };
  };
  var toSourceToken = function (v) {
      return {
          range: zeroRange,
          leadingComments: [  ],
          trailingComments: [  ],
          value: v
      };
  };
  var tokAll = toSourceToken(new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, ".."));
  var tokComma = toSourceToken(PureScript_CST_Types.TokComma.value);
  var tokDoubleColon = toSourceToken(new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value));
  var tokEquals = toSourceToken(PureScript_CST_Types.TokEquals.value);                                
  var tokKeyword = (function () {
      var $8 = PureScript_CST_Types.TokLowerName.create(Data_Maybe.Nothing.value);
      return function ($9) {
          return toSourceToken($8($9));
      };
  })();                          
  var tokAs = tokKeyword("as");    
  var tokClass = tokKeyword("class");
  var tokDerive = tokKeyword("derive");
  var tokFalse = tokKeyword("false");
  var tokImport = tokKeyword("import");
  var tokInstance = tokKeyword("instance");
  var tokModule = tokKeyword("module");
  var tokNewtype = tokKeyword("newtype");
  var tokTrue = tokKeyword("true");
  var tokType = tokKeyword("type");
  var tokWhere = tokKeyword("where");                                                                       
  var tokLeftBrace = toSourceToken(PureScript_CST_Types.TokLeftBrace.value);                                
  var tokLeftParen = toSourceToken(PureScript_CST_Types.TokLeftParen.value);
  var tokLeftSquare = toSourceToken(PureScript_CST_Types.TokLeftSquare.value);                       
  var tokPipe = toSourceToken(PureScript_CST_Types.TokPipe.value);
  var tokRightArrow = toSourceToken(new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value));
  var tokRightBrace = toSourceToken(PureScript_CST_Types.TokRightBrace.value);
  var tokRightFatArrow = toSourceToken(new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value));
  var tokRightParen = toSourceToken(PureScript_CST_Types.TokRightParen.value);
  var tokRightSquare = toSourceToken(PureScript_CST_Types.TokRightSquare.value);
  var tokUnderscore = toSourceToken(PureScript_CST_Types.TokUnderscore.value);
  var toSeparated = function (tok) {
      return function (arr) {
          return {
              head: Data_Array_NonEmpty.head(arr),
              tail: Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.Tuple.create(tok))(Data_Array_NonEmpty.tail(arr))
          };
      };
  };
  var toOneOrDelimited = function (arr) {
      var $6 = Data_Array_NonEmpty.length(arr) === 1;
      if ($6) {
          return new PureScript_CST_Types.One(Data_Array_NonEmpty.head(arr));
      };
      return new PureScript_CST_Types.Many({
          close: tokRightParen,
          open: tokLeftParen,
          value: toSeparated(tokComma)(arr)
      });
  };
  var toDelimitedNonEmpty = function (open) {
      return function (close) {
          return function (sep) {
              return function (value) {
                  return toWrapped(open)(close)(toSeparated(sep)(value));
              };
          };
      };
  };
  var toParenList = toDelimitedNonEmpty(tokLeftParen)(tokRightParen)(tokComma);
  var toDelimited = function (open) {
      return function (close) {
          return function (sep) {
              return function (value) {
                  return toWrapped(open)(close)(Data_Functor.map(Data_Maybe.functorMaybe)(toSeparated(sep))(Data_Array_NonEmpty.fromArray(value)));
              };
          };
      };
  };
  exports["toSourceToken"] = toSourceToken;
  exports["tokUnderscore"] = tokUnderscore;
  exports["tokPipe"] = tokPipe;
  exports["tokDoubleColon"] = tokDoubleColon;
  exports["tokRightParen"] = tokRightParen;
  exports["tokLeftParen"] = tokLeftParen;
  exports["tokRightBrace"] = tokRightBrace;
  exports["tokLeftBrace"] = tokLeftBrace;
  exports["tokRightSquare"] = tokRightSquare;
  exports["tokLeftSquare"] = tokLeftSquare;
  exports["tokComma"] = tokComma;
  exports["tokEquals"] = tokEquals;
  exports["tokRightArrow"] = tokRightArrow;
  exports["tokRightFatArrow"] = tokRightFatArrow;
  exports["tokAll"] = tokAll;
  exports["tokWhere"] = tokWhere;
  exports["tokClass"] = tokClass;
  exports["tokNewtype"] = tokNewtype;
  exports["tokType"] = tokType;
  exports["tokInstance"] = tokInstance;
  exports["tokDerive"] = tokDerive;
  exports["tokImport"] = tokImport;
  exports["tokAs"] = tokAs;
  exports["tokModule"] = tokModule;
  exports["tokTrue"] = tokTrue;
  exports["tokFalse"] = tokFalse;
  exports["toSeparated"] = toSeparated;
  exports["toOneOrDelimited"] = toOneOrDelimited;
  exports["toDelimited"] = toDelimited;
  exports["toWrapped"] = toWrapped;
  exports["toParenList"] = toParenList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CodePoint.Unicode.Internal"] = $PS["Data.CodePoint.Unicode.Internal"] || {};
  var exports = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();                    
  var numBlocks = 3396;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS,
      unicodeCat: NUMCAT_ZS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };  
  var gencatZP = 67108864;
  var rule162 = {
      category: gencatZP,
      unicodeCat: NUMCAT_ZP.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule161 = {
      category: gencatZL,
      unicodeCat: NUMCAT_ZL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule170 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule171 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM,
      unicodeCat: NUMCAT_SM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK,
      unicodeCat: NUMCAT_SK.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC,
      unicodeCat: NUMCAT_SC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS,
      unicodeCat: NUMCAT_PS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO,
      unicodeCat: NUMCAT_PO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPI = 32768;
  var rule15 = {
      category: gencatPI,
      unicodeCat: NUMCAT_PI.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPF = 262144;
  var rule19 = {
      category: gencatPF,
      unicodeCat: NUMCAT_PF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE,
      unicodeCat: NUMCAT_PE.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD,
      unicodeCat: NUMCAT_PD.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC,
      unicodeCat: NUMCAT_PC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNO = 131072;
  var rule17 = {
      category: gencatNO,
      unicodeCat: NUMCAT_NO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule128 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule168 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule169 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND,
      unicodeCat: NUMCAT_ND.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule92 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule93 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatME = 4194304;
  var rule119 = {
      category: gencatME,
      unicodeCat: NUMCAT_ME.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule124 = {
      category: gencatMC,
      unicodeCat: NUMCAT_MC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule104 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule117 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule118 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule125 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule127 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38864,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3008 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule153 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule160 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule163 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule164 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule166 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule172 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule173 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule174 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule177 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule178 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule179 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule180 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule181 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule183 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule184 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule186 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42308 | 0,
      titledist: 0
  };
  var rule187 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42319 | 0,
      titledist: 0
  };
  var rule188 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42315 | 0,
      titledist: 0
  };
  var rule189 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42305 | 0,
      titledist: 0
  };
  var rule190 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42258 | 0,
      titledist: 0
  };
  var rule191 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42282 | 0,
      titledist: 0
  };
  var rule192 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42261 | 0,
      titledist: 0
  };
  var rule193 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 928,
      titledist: 0
  };
  var rule194 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -48 | 0,
      titledist: 0
  };
  var rule195 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42307 | 0,
      titledist: 0
  };
  var rule196 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35384 | 0,
      titledist: 0
  };
  var rule201 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule203 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 34,
      titledist: 0
  };
  var rule22 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule24 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule26 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule35 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule38 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule40 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule45 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule94 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 116,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule96 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule97 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule151 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule154 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLO = 16384;
  var rule14 = {
      category: gencatLO,
      unicodeCat: NUMCAT_LO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule91 = {
      category: gencatLM,
      unicodeCat: NUMCAT_LM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule105 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule108 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var rule109 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule110 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule112 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule114 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -116 | 0,
      lowdist: 0,
      titledist: -116 | 0
  };
  var rule116 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3008,
      lowdist: 0,
      titledist: 0
  };
  var rule129 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6254 | 0,
      lowdist: 0,
      titledist: -6254 | 0
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6253 | 0,
      lowdist: 0,
      titledist: -6253 | 0
  };
  var rule131 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6244 | 0,
      lowdist: 0,
      titledist: -6244 | 0
  };
  var rule132 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6242 | 0,
      lowdist: 0,
      titledist: -6242 | 0
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6243 | 0,
      lowdist: 0,
      titledist: -6243 | 0
  };
  var rule134 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6236 | 0,
      lowdist: 0,
      titledist: -6236 | 0
  };
  var rule135 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6181 | 0,
      lowdist: 0,
      titledist: -6181 | 0
  };
  var rule136 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35266,
      lowdist: 0,
      titledist: 35266
  };
  var rule138 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule139 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule140 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35384,
      lowdist: 0,
      titledist: 35384
  };
  var rule141 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule143 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule146 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule147 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule148 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule149 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule150 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule152 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule155 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule167 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule175 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule176 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule182 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule185 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 48,
      lowdist: 0,
      titledist: 48
  };
  var rule197 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -928 | 0,
      lowdist: 0,
      titledist: -928 | 0
  };
  var rule198 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38864 | 0,
      lowdist: 0,
      titledist: -38864 | 0
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule202 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule204 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -34 | 0,
      lowdist: 0,
      titledist: -34 | 0
  };
  var rule21 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule23 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule25 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule28 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule36 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule39 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule41 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42319,
      lowdist: 0,
      titledist: 42319
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42315,
      lowdist: 0,
      titledist: 42315
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42308,
      lowdist: 0,
      titledist: 42308
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42305,
      lowdist: 0,
      titledist: 42305
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule83 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42307,
      lowdist: 0,
      titledist: 42307
  };
  var rule84 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42282,
      lowdist: 0,
      titledist: 42282
  };
  var rule85 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule86 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule87 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule88 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule89 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42261,
      lowdist: 0,
      titledist: 42261
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42258,
      lowdist: 0,
      titledist: 42258
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var gencatCS = 134217728;
  var rule199 = {
      category: gencatCS,
      unicodeCat: NUMCAT_CS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule200 = {
      category: gencatCO,
      unicodeCat: NUMCAT_CO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCF = 65536;
  var rule16 = {
      category: gencatCF,
      unicodeCat: NUMCAT_CF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC,
      unicodeCat: NUMCAT_CC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };  
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k || i >= Data_Array.length(array)) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5611, column 5 - line 5617, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5588, column 1 - line 5588, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5601, column 8 - line 5603, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };                                       
  var allchars = [ {
      start: 0,
      length: 32,
      convRule: rule0
  }, {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 33,
      length: 3,
      convRule: rule2
  }, {
      start: 36,
      length: 1,
      convRule: rule3
  }, {
      start: 37,
      length: 3,
      convRule: rule2
  }, {
      start: 40,
      length: 1,
      convRule: rule4
  }, {
      start: 41,
      length: 1,
      convRule: rule5
  }, {
      start: 42,
      length: 1,
      convRule: rule2
  }, {
      start: 43,
      length: 1,
      convRule: rule6
  }, {
      start: 44,
      length: 1,
      convRule: rule2
  }, {
      start: 45,
      length: 1,
      convRule: rule7
  }, {
      start: 46,
      length: 2,
      convRule: rule2
  }, {
      start: 48,
      length: 10,
      convRule: rule8
  }, {
      start: 58,
      length: 2,
      convRule: rule2
  }, {
      start: 60,
      length: 3,
      convRule: rule6
  }, {
      start: 63,
      length: 2,
      convRule: rule2
  }, {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 91,
      length: 1,
      convRule: rule4
  }, {
      start: 92,
      length: 1,
      convRule: rule2
  }, {
      start: 93,
      length: 1,
      convRule: rule5
  }, {
      start: 94,
      length: 1,
      convRule: rule10
  }, {
      start: 95,
      length: 1,
      convRule: rule11
  }, {
      start: 96,
      length: 1,
      convRule: rule10
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 123,
      length: 1,
      convRule: rule4
  }, {
      start: 124,
      length: 1,
      convRule: rule6
  }, {
      start: 125,
      length: 1,
      convRule: rule5
  }, {
      start: 126,
      length: 1,
      convRule: rule6
  }, {
      start: 127,
      length: 33,
      convRule: rule0
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 161,
      length: 1,
      convRule: rule2
  }, {
      start: 162,
      length: 4,
      convRule: rule3
  }, {
      start: 166,
      length: 1,
      convRule: rule13
  }, {
      start: 167,
      length: 1,
      convRule: rule2
  }, {
      start: 168,
      length: 1,
      convRule: rule10
  }, {
      start: 169,
      length: 1,
      convRule: rule13
  }, {
      start: 170,
      length: 1,
      convRule: rule14
  }, {
      start: 171,
      length: 1,
      convRule: rule15
  }, {
      start: 172,
      length: 1,
      convRule: rule6
  }, {
      start: 173,
      length: 1,
      convRule: rule16
  }, {
      start: 174,
      length: 1,
      convRule: rule13
  }, {
      start: 175,
      length: 1,
      convRule: rule10
  }, {
      start: 176,
      length: 1,
      convRule: rule13
  }, {
      start: 177,
      length: 1,
      convRule: rule6
  }, {
      start: 178,
      length: 2,
      convRule: rule17
  }, {
      start: 180,
      length: 1,
      convRule: rule10
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 182,
      length: 2,
      convRule: rule2
  }, {
      start: 184,
      length: 1,
      convRule: rule10
  }, {
      start: 185,
      length: 1,
      convRule: rule17
  }, {
      start: 186,
      length: 1,
      convRule: rule14
  }, {
      start: 187,
      length: 1,
      convRule: rule19
  }, {
      start: 188,
      length: 3,
      convRule: rule17
  }, {
      start: 191,
      length: 1,
      convRule: rule2
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 215,
      length: 1,
      convRule: rule6
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 223,
      length: 1,
      convRule: rule20
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 247,
      length: 1,
      convRule: rule6
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule21
  }, {
      start: 256,
      length: 1,
      convRule: rule22
  }, {
      start: 257,
      length: 1,
      convRule: rule23
  }, {
      start: 258,
      length: 1,
      convRule: rule22
  }, {
      start: 259,
      length: 1,
      convRule: rule23
  }, {
      start: 260,
      length: 1,
      convRule: rule22
  }, {
      start: 261,
      length: 1,
      convRule: rule23
  }, {
      start: 262,
      length: 1,
      convRule: rule22
  }, {
      start: 263,
      length: 1,
      convRule: rule23
  }, {
      start: 264,
      length: 1,
      convRule: rule22
  }, {
      start: 265,
      length: 1,
      convRule: rule23
  }, {
      start: 266,
      length: 1,
      convRule: rule22
  }, {
      start: 267,
      length: 1,
      convRule: rule23
  }, {
      start: 268,
      length: 1,
      convRule: rule22
  }, {
      start: 269,
      length: 1,
      convRule: rule23
  }, {
      start: 270,
      length: 1,
      convRule: rule22
  }, {
      start: 271,
      length: 1,
      convRule: rule23
  }, {
      start: 272,
      length: 1,
      convRule: rule22
  }, {
      start: 273,
      length: 1,
      convRule: rule23
  }, {
      start: 274,
      length: 1,
      convRule: rule22
  }, {
      start: 275,
      length: 1,
      convRule: rule23
  }, {
      start: 276,
      length: 1,
      convRule: rule22
  }, {
      start: 277,
      length: 1,
      convRule: rule23
  }, {
      start: 278,
      length: 1,
      convRule: rule22
  }, {
      start: 279,
      length: 1,
      convRule: rule23
  }, {
      start: 280,
      length: 1,
      convRule: rule22
  }, {
      start: 281,
      length: 1,
      convRule: rule23
  }, {
      start: 282,
      length: 1,
      convRule: rule22
  }, {
      start: 283,
      length: 1,
      convRule: rule23
  }, {
      start: 284,
      length: 1,
      convRule: rule22
  }, {
      start: 285,
      length: 1,
      convRule: rule23
  }, {
      start: 286,
      length: 1,
      convRule: rule22
  }, {
      start: 287,
      length: 1,
      convRule: rule23
  }, {
      start: 288,
      length: 1,
      convRule: rule22
  }, {
      start: 289,
      length: 1,
      convRule: rule23
  }, {
      start: 290,
      length: 1,
      convRule: rule22
  }, {
      start: 291,
      length: 1,
      convRule: rule23
  }, {
      start: 292,
      length: 1,
      convRule: rule22
  }, {
      start: 293,
      length: 1,
      convRule: rule23
  }, {
      start: 294,
      length: 1,
      convRule: rule22
  }, {
      start: 295,
      length: 1,
      convRule: rule23
  }, {
      start: 296,
      length: 1,
      convRule: rule22
  }, {
      start: 297,
      length: 1,
      convRule: rule23
  }, {
      start: 298,
      length: 1,
      convRule: rule22
  }, {
      start: 299,
      length: 1,
      convRule: rule23
  }, {
      start: 300,
      length: 1,
      convRule: rule22
  }, {
      start: 301,
      length: 1,
      convRule: rule23
  }, {
      start: 302,
      length: 1,
      convRule: rule22
  }, {
      start: 303,
      length: 1,
      convRule: rule23
  }, {
      start: 304,
      length: 1,
      convRule: rule24
  }, {
      start: 305,
      length: 1,
      convRule: rule25
  }, {
      start: 306,
      length: 1,
      convRule: rule22
  }, {
      start: 307,
      length: 1,
      convRule: rule23
  }, {
      start: 308,
      length: 1,
      convRule: rule22
  }, {
      start: 309,
      length: 1,
      convRule: rule23
  }, {
      start: 310,
      length: 1,
      convRule: rule22
  }, {
      start: 311,
      length: 1,
      convRule: rule23
  }, {
      start: 312,
      length: 1,
      convRule: rule20
  }, {
      start: 313,
      length: 1,
      convRule: rule22
  }, {
      start: 314,
      length: 1,
      convRule: rule23
  }, {
      start: 315,
      length: 1,
      convRule: rule22
  }, {
      start: 316,
      length: 1,
      convRule: rule23
  }, {
      start: 317,
      length: 1,
      convRule: rule22
  }, {
      start: 318,
      length: 1,
      convRule: rule23
  }, {
      start: 319,
      length: 1,
      convRule: rule22
  }, {
      start: 320,
      length: 1,
      convRule: rule23
  }, {
      start: 321,
      length: 1,
      convRule: rule22
  }, {
      start: 322,
      length: 1,
      convRule: rule23
  }, {
      start: 323,
      length: 1,
      convRule: rule22
  }, {
      start: 324,
      length: 1,
      convRule: rule23
  }, {
      start: 325,
      length: 1,
      convRule: rule22
  }, {
      start: 326,
      length: 1,
      convRule: rule23
  }, {
      start: 327,
      length: 1,
      convRule: rule22
  }, {
      start: 328,
      length: 1,
      convRule: rule23
  }, {
      start: 329,
      length: 1,
      convRule: rule20
  }, {
      start: 330,
      length: 1,
      convRule: rule22
  }, {
      start: 331,
      length: 1,
      convRule: rule23
  }, {
      start: 332,
      length: 1,
      convRule: rule22
  }, {
      start: 333,
      length: 1,
      convRule: rule23
  }, {
      start: 334,
      length: 1,
      convRule: rule22
  }, {
      start: 335,
      length: 1,
      convRule: rule23
  }, {
      start: 336,
      length: 1,
      convRule: rule22
  }, {
      start: 337,
      length: 1,
      convRule: rule23
  }, {
      start: 338,
      length: 1,
      convRule: rule22
  }, {
      start: 339,
      length: 1,
      convRule: rule23
  }, {
      start: 340,
      length: 1,
      convRule: rule22
  }, {
      start: 341,
      length: 1,
      convRule: rule23
  }, {
      start: 342,
      length: 1,
      convRule: rule22
  }, {
      start: 343,
      length: 1,
      convRule: rule23
  }, {
      start: 344,
      length: 1,
      convRule: rule22
  }, {
      start: 345,
      length: 1,
      convRule: rule23
  }, {
      start: 346,
      length: 1,
      convRule: rule22
  }, {
      start: 347,
      length: 1,
      convRule: rule23
  }, {
      start: 348,
      length: 1,
      convRule: rule22
  }, {
      start: 349,
      length: 1,
      convRule: rule23
  }, {
      start: 350,
      length: 1,
      convRule: rule22
  }, {
      start: 351,
      length: 1,
      convRule: rule23
  }, {
      start: 352,
      length: 1,
      convRule: rule22
  }, {
      start: 353,
      length: 1,
      convRule: rule23
  }, {
      start: 354,
      length: 1,
      convRule: rule22
  }, {
      start: 355,
      length: 1,
      convRule: rule23
  }, {
      start: 356,
      length: 1,
      convRule: rule22
  }, {
      start: 357,
      length: 1,
      convRule: rule23
  }, {
      start: 358,
      length: 1,
      convRule: rule22
  }, {
      start: 359,
      length: 1,
      convRule: rule23
  }, {
      start: 360,
      length: 1,
      convRule: rule22
  }, {
      start: 361,
      length: 1,
      convRule: rule23
  }, {
      start: 362,
      length: 1,
      convRule: rule22
  }, {
      start: 363,
      length: 1,
      convRule: rule23
  }, {
      start: 364,
      length: 1,
      convRule: rule22
  }, {
      start: 365,
      length: 1,
      convRule: rule23
  }, {
      start: 366,
      length: 1,
      convRule: rule22
  }, {
      start: 367,
      length: 1,
      convRule: rule23
  }, {
      start: 368,
      length: 1,
      convRule: rule22
  }, {
      start: 369,
      length: 1,
      convRule: rule23
  }, {
      start: 370,
      length: 1,
      convRule: rule22
  }, {
      start: 371,
      length: 1,
      convRule: rule23
  }, {
      start: 372,
      length: 1,
      convRule: rule22
  }, {
      start: 373,
      length: 1,
      convRule: rule23
  }, {
      start: 374,
      length: 1,
      convRule: rule22
  }, {
      start: 375,
      length: 1,
      convRule: rule23
  }, {
      start: 376,
      length: 1,
      convRule: rule26
  }, {
      start: 377,
      length: 1,
      convRule: rule22
  }, {
      start: 378,
      length: 1,
      convRule: rule23
  }, {
      start: 379,
      length: 1,
      convRule: rule22
  }, {
      start: 380,
      length: 1,
      convRule: rule23
  }, {
      start: 381,
      length: 1,
      convRule: rule22
  }, {
      start: 382,
      length: 1,
      convRule: rule23
  }, {
      start: 383,
      length: 1,
      convRule: rule27
  }, {
      start: 384,
      length: 1,
      convRule: rule28
  }, {
      start: 385,
      length: 1,
      convRule: rule29
  }, {
      start: 386,
      length: 1,
      convRule: rule22
  }, {
      start: 387,
      length: 1,
      convRule: rule23
  }, {
      start: 388,
      length: 1,
      convRule: rule22
  }, {
      start: 389,
      length: 1,
      convRule: rule23
  }, {
      start: 390,
      length: 1,
      convRule: rule30
  }, {
      start: 391,
      length: 1,
      convRule: rule22
  }, {
      start: 392,
      length: 1,
      convRule: rule23
  }, {
      start: 393,
      length: 2,
      convRule: rule31
  }, {
      start: 395,
      length: 1,
      convRule: rule22
  }, {
      start: 396,
      length: 1,
      convRule: rule23
  }, {
      start: 397,
      length: 1,
      convRule: rule20
  }, {
      start: 398,
      length: 1,
      convRule: rule32
  }, {
      start: 399,
      length: 1,
      convRule: rule33
  }, {
      start: 400,
      length: 1,
      convRule: rule34
  }, {
      start: 401,
      length: 1,
      convRule: rule22
  }, {
      start: 402,
      length: 1,
      convRule: rule23
  }, {
      start: 403,
      length: 1,
      convRule: rule31
  }, {
      start: 404,
      length: 1,
      convRule: rule35
  }, {
      start: 405,
      length: 1,
      convRule: rule36
  }, {
      start: 406,
      length: 1,
      convRule: rule37
  }, {
      start: 407,
      length: 1,
      convRule: rule38
  }, {
      start: 408,
      length: 1,
      convRule: rule22
  }, {
      start: 409,
      length: 1,
      convRule: rule23
  }, {
      start: 410,
      length: 1,
      convRule: rule39
  }, {
      start: 411,
      length: 1,
      convRule: rule20
  }, {
      start: 412,
      length: 1,
      convRule: rule37
  }, {
      start: 413,
      length: 1,
      convRule: rule40
  }, {
      start: 414,
      length: 1,
      convRule: rule41
  }, {
      start: 415,
      length: 1,
      convRule: rule42
  }, {
      start: 416,
      length: 1,
      convRule: rule22
  }, {
      start: 417,
      length: 1,
      convRule: rule23
  }, {
      start: 418,
      length: 1,
      convRule: rule22
  }, {
      start: 419,
      length: 1,
      convRule: rule23
  }, {
      start: 420,
      length: 1,
      convRule: rule22
  }, {
      start: 421,
      length: 1,
      convRule: rule23
  }, {
      start: 422,
      length: 1,
      convRule: rule43
  }, {
      start: 423,
      length: 1,
      convRule: rule22
  }, {
      start: 424,
      length: 1,
      convRule: rule23
  }, {
      start: 425,
      length: 1,
      convRule: rule43
  }, {
      start: 426,
      length: 2,
      convRule: rule20
  }, {
      start: 428,
      length: 1,
      convRule: rule22
  }, {
      start: 429,
      length: 1,
      convRule: rule23
  }, {
      start: 430,
      length: 1,
      convRule: rule43
  }, {
      start: 431,
      length: 1,
      convRule: rule22
  }, {
      start: 432,
      length: 1,
      convRule: rule23
  }, {
      start: 433,
      length: 2,
      convRule: rule44
  }, {
      start: 435,
      length: 1,
      convRule: rule22
  }, {
      start: 436,
      length: 1,
      convRule: rule23
  }, {
      start: 437,
      length: 1,
      convRule: rule22
  }, {
      start: 438,
      length: 1,
      convRule: rule23
  }, {
      start: 439,
      length: 1,
      convRule: rule45
  }, {
      start: 440,
      length: 1,
      convRule: rule22
  }, {
      start: 441,
      length: 1,
      convRule: rule23
  }, {
      start: 442,
      length: 1,
      convRule: rule20
  }, {
      start: 443,
      length: 1,
      convRule: rule14
  }, {
      start: 444,
      length: 1,
      convRule: rule22
  }, {
      start: 445,
      length: 1,
      convRule: rule23
  }, {
      start: 446,
      length: 1,
      convRule: rule20
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 448,
      length: 4,
      convRule: rule14
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule22
  }, {
      start: 462,
      length: 1,
      convRule: rule23
  }, {
      start: 463,
      length: 1,
      convRule: rule22
  }, {
      start: 464,
      length: 1,
      convRule: rule23
  }, {
      start: 465,
      length: 1,
      convRule: rule22
  }, {
      start: 466,
      length: 1,
      convRule: rule23
  }, {
      start: 467,
      length: 1,
      convRule: rule22
  }, {
      start: 468,
      length: 1,
      convRule: rule23
  }, {
      start: 469,
      length: 1,
      convRule: rule22
  }, {
      start: 470,
      length: 1,
      convRule: rule23
  }, {
      start: 471,
      length: 1,
      convRule: rule22
  }, {
      start: 472,
      length: 1,
      convRule: rule23
  }, {
      start: 473,
      length: 1,
      convRule: rule22
  }, {
      start: 474,
      length: 1,
      convRule: rule23
  }, {
      start: 475,
      length: 1,
      convRule: rule22
  }, {
      start: 476,
      length: 1,
      convRule: rule23
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule22
  }, {
      start: 479,
      length: 1,
      convRule: rule23
  }, {
      start: 480,
      length: 1,
      convRule: rule22
  }, {
      start: 481,
      length: 1,
      convRule: rule23
  }, {
      start: 482,
      length: 1,
      convRule: rule22
  }, {
      start: 483,
      length: 1,
      convRule: rule23
  }, {
      start: 484,
      length: 1,
      convRule: rule22
  }, {
      start: 485,
      length: 1,
      convRule: rule23
  }, {
      start: 486,
      length: 1,
      convRule: rule22
  }, {
      start: 487,
      length: 1,
      convRule: rule23
  }, {
      start: 488,
      length: 1,
      convRule: rule22
  }, {
      start: 489,
      length: 1,
      convRule: rule23
  }, {
      start: 490,
      length: 1,
      convRule: rule22
  }, {
      start: 491,
      length: 1,
      convRule: rule23
  }, {
      start: 492,
      length: 1,
      convRule: rule22
  }, {
      start: 493,
      length: 1,
      convRule: rule23
  }, {
      start: 494,
      length: 1,
      convRule: rule22
  }, {
      start: 495,
      length: 1,
      convRule: rule23
  }, {
      start: 496,
      length: 1,
      convRule: rule20
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule22
  }, {
      start: 501,
      length: 1,
      convRule: rule23
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule22
  }, {
      start: 505,
      length: 1,
      convRule: rule23
  }, {
      start: 506,
      length: 1,
      convRule: rule22
  }, {
      start: 507,
      length: 1,
      convRule: rule23
  }, {
      start: 508,
      length: 1,
      convRule: rule22
  }, {
      start: 509,
      length: 1,
      convRule: rule23
  }, {
      start: 510,
      length: 1,
      convRule: rule22
  }, {
      start: 511,
      length: 1,
      convRule: rule23
  }, {
      start: 512,
      length: 1,
      convRule: rule22
  }, {
      start: 513,
      length: 1,
      convRule: rule23
  }, {
      start: 514,
      length: 1,
      convRule: rule22
  }, {
      start: 515,
      length: 1,
      convRule: rule23
  }, {
      start: 516,
      length: 1,
      convRule: rule22
  }, {
      start: 517,
      length: 1,
      convRule: rule23
  }, {
      start: 518,
      length: 1,
      convRule: rule22
  }, {
      start: 519,
      length: 1,
      convRule: rule23
  }, {
      start: 520,
      length: 1,
      convRule: rule22
  }, {
      start: 521,
      length: 1,
      convRule: rule23
  }, {
      start: 522,
      length: 1,
      convRule: rule22
  }, {
      start: 523,
      length: 1,
      convRule: rule23
  }, {
      start: 524,
      length: 1,
      convRule: rule22
  }, {
      start: 525,
      length: 1,
      convRule: rule23
  }, {
      start: 526,
      length: 1,
      convRule: rule22
  }, {
      start: 527,
      length: 1,
      convRule: rule23
  }, {
      start: 528,
      length: 1,
      convRule: rule22
  }, {
      start: 529,
      length: 1,
      convRule: rule23
  }, {
      start: 530,
      length: 1,
      convRule: rule22
  }, {
      start: 531,
      length: 1,
      convRule: rule23
  }, {
      start: 532,
      length: 1,
      convRule: rule22
  }, {
      start: 533,
      length: 1,
      convRule: rule23
  }, {
      start: 534,
      length: 1,
      convRule: rule22
  }, {
      start: 535,
      length: 1,
      convRule: rule23
  }, {
      start: 536,
      length: 1,
      convRule: rule22
  }, {
      start: 537,
      length: 1,
      convRule: rule23
  }, {
      start: 538,
      length: 1,
      convRule: rule22
  }, {
      start: 539,
      length: 1,
      convRule: rule23
  }, {
      start: 540,
      length: 1,
      convRule: rule22
  }, {
      start: 541,
      length: 1,
      convRule: rule23
  }, {
      start: 542,
      length: 1,
      convRule: rule22
  }, {
      start: 543,
      length: 1,
      convRule: rule23
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 545,
      length: 1,
      convRule: rule20
  }, {
      start: 546,
      length: 1,
      convRule: rule22
  }, {
      start: 547,
      length: 1,
      convRule: rule23
  }, {
      start: 548,
      length: 1,
      convRule: rule22
  }, {
      start: 549,
      length: 1,
      convRule: rule23
  }, {
      start: 550,
      length: 1,
      convRule: rule22
  }, {
      start: 551,
      length: 1,
      convRule: rule23
  }, {
      start: 552,
      length: 1,
      convRule: rule22
  }, {
      start: 553,
      length: 1,
      convRule: rule23
  }, {
      start: 554,
      length: 1,
      convRule: rule22
  }, {
      start: 555,
      length: 1,
      convRule: rule23
  }, {
      start: 556,
      length: 1,
      convRule: rule22
  }, {
      start: 557,
      length: 1,
      convRule: rule23
  }, {
      start: 558,
      length: 1,
      convRule: rule22
  }, {
      start: 559,
      length: 1,
      convRule: rule23
  }, {
      start: 560,
      length: 1,
      convRule: rule22
  }, {
      start: 561,
      length: 1,
      convRule: rule23
  }, {
      start: 562,
      length: 1,
      convRule: rule22
  }, {
      start: 563,
      length: 1,
      convRule: rule23
  }, {
      start: 564,
      length: 6,
      convRule: rule20
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule22
  }, {
      start: 572,
      length: 1,
      convRule: rule23
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule22
  }, {
      start: 578,
      length: 1,
      convRule: rule23
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule22
  }, {
      start: 583,
      length: 1,
      convRule: rule23
  }, {
      start: 584,
      length: 1,
      convRule: rule22
  }, {
      start: 585,
      length: 1,
      convRule: rule23
  }, {
      start: 586,
      length: 1,
      convRule: rule22
  }, {
      start: 587,
      length: 1,
      convRule: rule23
  }, {
      start: 588,
      length: 1,
      convRule: rule22
  }, {
      start: 589,
      length: 1,
      convRule: rule23
  }, {
      start: 590,
      length: 1,
      convRule: rule22
  }, {
      start: 591,
      length: 1,
      convRule: rule23
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 597,
      length: 1,
      convRule: rule20
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 600,
      length: 1,
      convRule: rule20
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 602,
      length: 1,
      convRule: rule20
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 1,
      convRule: rule69
  }, {
      start: 605,
      length: 3,
      convRule: rule20
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 1,
      convRule: rule70
  }, {
      start: 610,
      length: 1,
      convRule: rule20
  }, {
      start: 611,
      length: 1,
      convRule: rule71
  }, {
      start: 612,
      length: 1,
      convRule: rule20
  }, {
      start: 613,
      length: 1,
      convRule: rule72
  }, {
      start: 614,
      length: 1,
      convRule: rule73
  }, {
      start: 615,
      length: 1,
      convRule: rule20
  }, {
      start: 616,
      length: 1,
      convRule: rule74
  }, {
      start: 617,
      length: 1,
      convRule: rule75
  }, {
      start: 618,
      length: 1,
      convRule: rule73
  }, {
      start: 619,
      length: 1,
      convRule: rule76
  }, {
      start: 620,
      length: 1,
      convRule: rule77
  }, {
      start: 621,
      length: 2,
      convRule: rule20
  }, {
      start: 623,
      length: 1,
      convRule: rule75
  }, {
      start: 624,
      length: 1,
      convRule: rule20
  }, {
      start: 625,
      length: 1,
      convRule: rule78
  }, {
      start: 626,
      length: 1,
      convRule: rule79
  }, {
      start: 627,
      length: 2,
      convRule: rule20
  }, {
      start: 629,
      length: 1,
      convRule: rule80
  }, {
      start: 630,
      length: 7,
      convRule: rule20
  }, {
      start: 637,
      length: 1,
      convRule: rule81
  }, {
      start: 638,
      length: 2,
      convRule: rule20
  }, {
      start: 640,
      length: 1,
      convRule: rule82
  }, {
      start: 641,
      length: 1,
      convRule: rule20
  }, {
      start: 642,
      length: 1,
      convRule: rule83
  }, {
      start: 643,
      length: 1,
      convRule: rule82
  }, {
      start: 644,
      length: 3,
      convRule: rule20
  }, {
      start: 647,
      length: 1,
      convRule: rule84
  }, {
      start: 648,
      length: 1,
      convRule: rule82
  }, {
      start: 649,
      length: 1,
      convRule: rule85
  }, {
      start: 650,
      length: 2,
      convRule: rule86
  }, {
      start: 652,
      length: 1,
      convRule: rule87
  }, {
      start: 653,
      length: 5,
      convRule: rule20
  }, {
      start: 658,
      length: 1,
      convRule: rule88
  }, {
      start: 659,
      length: 1,
      convRule: rule20
  }, {
      start: 660,
      length: 1,
      convRule: rule14
  }, {
      start: 661,
      length: 8,
      convRule: rule20
  }, {
      start: 669,
      length: 1,
      convRule: rule89
  }, {
      start: 670,
      length: 1,
      convRule: rule90
  }, {
      start: 671,
      length: 17,
      convRule: rule20
  }, {
      start: 688,
      length: 18,
      convRule: rule91
  }, {
      start: 706,
      length: 4,
      convRule: rule10
  }, {
      start: 710,
      length: 12,
      convRule: rule91
  }, {
      start: 722,
      length: 14,
      convRule: rule10
  }, {
      start: 736,
      length: 5,
      convRule: rule91
  }, {
      start: 741,
      length: 7,
      convRule: rule10
  }, {
      start: 748,
      length: 1,
      convRule: rule91
  }, {
      start: 749,
      length: 1,
      convRule: rule10
  }, {
      start: 750,
      length: 1,
      convRule: rule91
  }, {
      start: 751,
      length: 17,
      convRule: rule10
  }, {
      start: 768,
      length: 69,
      convRule: rule92
  }, {
      start: 837,
      length: 1,
      convRule: rule93
  }, {
      start: 838,
      length: 42,
      convRule: rule92
  }, {
      start: 880,
      length: 1,
      convRule: rule22
  }, {
      start: 881,
      length: 1,
      convRule: rule23
  }, {
      start: 882,
      length: 1,
      convRule: rule22
  }, {
      start: 883,
      length: 1,
      convRule: rule23
  }, {
      start: 884,
      length: 1,
      convRule: rule91
  }, {
      start: 885,
      length: 1,
      convRule: rule10
  }, {
      start: 886,
      length: 1,
      convRule: rule22
  }, {
      start: 887,
      length: 1,
      convRule: rule23
  }, {
      start: 890,
      length: 1,
      convRule: rule91
  }, {
      start: 891,
      length: 3,
      convRule: rule41
  }, {
      start: 894,
      length: 1,
      convRule: rule2
  }, {
      start: 895,
      length: 1,
      convRule: rule94
  }, {
      start: 900,
      length: 2,
      convRule: rule10
  }, {
      start: 902,
      length: 1,
      convRule: rule95
  }, {
      start: 903,
      length: 1,
      convRule: rule2
  }, {
      start: 904,
      length: 3,
      convRule: rule96
  }, {
      start: 908,
      length: 1,
      convRule: rule97
  }, {
      start: 910,
      length: 2,
      convRule: rule98
  }, {
      start: 912,
      length: 1,
      convRule: rule20
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule99
  }, {
      start: 941,
      length: 3,
      convRule: rule100
  }, {
      start: 944,
      length: 1,
      convRule: rule20
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule101
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule102
  }, {
      start: 973,
      length: 2,
      convRule: rule103
  }, {
      start: 975,
      length: 1,
      convRule: rule104
  }, {
      start: 976,
      length: 1,
      convRule: rule105
  }, {
      start: 977,
      length: 1,
      convRule: rule106
  }, {
      start: 978,
      length: 3,
      convRule: rule107
  }, {
      start: 981,
      length: 1,
      convRule: rule108
  }, {
      start: 982,
      length: 1,
      convRule: rule109
  }, {
      start: 983,
      length: 1,
      convRule: rule110
  }, {
      start: 984,
      length: 1,
      convRule: rule22
  }, {
      start: 985,
      length: 1,
      convRule: rule23
  }, {
      start: 986,
      length: 1,
      convRule: rule22
  }, {
      start: 987,
      length: 1,
      convRule: rule23
  }, {
      start: 988,
      length: 1,
      convRule: rule22
  }, {
      start: 989,
      length: 1,
      convRule: rule23
  }, {
      start: 990,
      length: 1,
      convRule: rule22
  }, {
      start: 991,
      length: 1,
      convRule: rule23
  }, {
      start: 992,
      length: 1,
      convRule: rule22
  }, {
      start: 993,
      length: 1,
      convRule: rule23
  }, {
      start: 994,
      length: 1,
      convRule: rule22
  }, {
      start: 995,
      length: 1,
      convRule: rule23
  }, {
      start: 996,
      length: 1,
      convRule: rule22
  }, {
      start: 997,
      length: 1,
      convRule: rule23
  }, {
      start: 998,
      length: 1,
      convRule: rule22
  }, {
      start: 999,
      length: 1,
      convRule: rule23
  }, {
      start: 1000,
      length: 1,
      convRule: rule22
  }, {
      start: 1001,
      length: 1,
      convRule: rule23
  }, {
      start: 1002,
      length: 1,
      convRule: rule22
  }, {
      start: 1003,
      length: 1,
      convRule: rule23
  }, {
      start: 1004,
      length: 1,
      convRule: rule22
  }, {
      start: 1005,
      length: 1,
      convRule: rule23
  }, {
      start: 1006,
      length: 1,
      convRule: rule22
  }, {
      start: 1007,
      length: 1,
      convRule: rule23
  }, {
      start: 1008,
      length: 1,
      convRule: rule111
  }, {
      start: 1009,
      length: 1,
      convRule: rule112
  }, {
      start: 1010,
      length: 1,
      convRule: rule113
  }, {
      start: 1011,
      length: 1,
      convRule: rule114
  }, {
      start: 1012,
      length: 1,
      convRule: rule115
  }, {
      start: 1013,
      length: 1,
      convRule: rule116
  }, {
      start: 1014,
      length: 1,
      convRule: rule6
  }, {
      start: 1015,
      length: 1,
      convRule: rule22
  }, {
      start: 1016,
      length: 1,
      convRule: rule23
  }, {
      start: 1017,
      length: 1,
      convRule: rule117
  }, {
      start: 1018,
      length: 1,
      convRule: rule22
  }, {
      start: 1019,
      length: 1,
      convRule: rule23
  }, {
      start: 1020,
      length: 1,
      convRule: rule20
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule118
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule112
  }, {
      start: 1120,
      length: 1,
      convRule: rule22
  }, {
      start: 1121,
      length: 1,
      convRule: rule23
  }, {
      start: 1122,
      length: 1,
      convRule: rule22
  }, {
      start: 1123,
      length: 1,
      convRule: rule23
  }, {
      start: 1124,
      length: 1,
      convRule: rule22
  }, {
      start: 1125,
      length: 1,
      convRule: rule23
  }, {
      start: 1126,
      length: 1,
      convRule: rule22
  }, {
      start: 1127,
      length: 1,
      convRule: rule23
  }, {
      start: 1128,
      length: 1,
      convRule: rule22
  }, {
      start: 1129,
      length: 1,
      convRule: rule23
  }, {
      start: 1130,
      length: 1,
      convRule: rule22
  }, {
      start: 1131,
      length: 1,
      convRule: rule23
  }, {
      start: 1132,
      length: 1,
      convRule: rule22
  }, {
      start: 1133,
      length: 1,
      convRule: rule23
  }, {
      start: 1134,
      length: 1,
      convRule: rule22
  }, {
      start: 1135,
      length: 1,
      convRule: rule23
  }, {
      start: 1136,
      length: 1,
      convRule: rule22
  }, {
      start: 1137,
      length: 1,
      convRule: rule23
  }, {
      start: 1138,
      length: 1,
      convRule: rule22
  }, {
      start: 1139,
      length: 1,
      convRule: rule23
  }, {
      start: 1140,
      length: 1,
      convRule: rule22
  }, {
      start: 1141,
      length: 1,
      convRule: rule23
  }, {
      start: 1142,
      length: 1,
      convRule: rule22
  }, {
      start: 1143,
      length: 1,
      convRule: rule23
  }, {
      start: 1144,
      length: 1,
      convRule: rule22
  }, {
      start: 1145,
      length: 1,
      convRule: rule23
  }, {
      start: 1146,
      length: 1,
      convRule: rule22
  }, {
      start: 1147,
      length: 1,
      convRule: rule23
  }, {
      start: 1148,
      length: 1,
      convRule: rule22
  }, {
      start: 1149,
      length: 1,
      convRule: rule23
  }, {
      start: 1150,
      length: 1,
      convRule: rule22
  }, {
      start: 1151,
      length: 1,
      convRule: rule23
  }, {
      start: 1152,
      length: 1,
      convRule: rule22
  }, {
      start: 1153,
      length: 1,
      convRule: rule23
  }, {
      start: 1154,
      length: 1,
      convRule: rule13
  }, {
      start: 1155,
      length: 5,
      convRule: rule92
  }, {
      start: 1160,
      length: 2,
      convRule: rule119
  }, {
      start: 1162,
      length: 1,
      convRule: rule22
  }, {
      start: 1163,
      length: 1,
      convRule: rule23
  }, {
      start: 1164,
      length: 1,
      convRule: rule22
  }, {
      start: 1165,
      length: 1,
      convRule: rule23
  }, {
      start: 1166,
      length: 1,
      convRule: rule22
  }, {
      start: 1167,
      length: 1,
      convRule: rule23
  }, {
      start: 1168,
      length: 1,
      convRule: rule22
  }, {
      start: 1169,
      length: 1,
      convRule: rule23
  }, {
      start: 1170,
      length: 1,
      convRule: rule22
  }, {
      start: 1171,
      length: 1,
      convRule: rule23
  }, {
      start: 1172,
      length: 1,
      convRule: rule22
  }, {
      start: 1173,
      length: 1,
      convRule: rule23
  }, {
      start: 1174,
      length: 1,
      convRule: rule22
  }, {
      start: 1175,
      length: 1,
      convRule: rule23
  }, {
      start: 1176,
      length: 1,
      convRule: rule22
  }, {
      start: 1177,
      length: 1,
      convRule: rule23
  }, {
      start: 1178,
      length: 1,
      convRule: rule22
  }, {
      start: 1179,
      length: 1,
      convRule: rule23
  }, {
      start: 1180,
      length: 1,
      convRule: rule22
  }, {
      start: 1181,
      length: 1,
      convRule: rule23
  }, {
      start: 1182,
      length: 1,
      convRule: rule22
  }, {
      start: 1183,
      length: 1,
      convRule: rule23
  }, {
      start: 1184,
      length: 1,
      convRule: rule22
  }, {
      start: 1185,
      length: 1,
      convRule: rule23
  }, {
      start: 1186,
      length: 1,
      convRule: rule22
  }, {
      start: 1187,
      length: 1,
      convRule: rule23
  }, {
      start: 1188,
      length: 1,
      convRule: rule22
  }, {
      start: 1189,
      length: 1,
      convRule: rule23
  }, {
      start: 1190,
      length: 1,
      convRule: rule22
  }, {
      start: 1191,
      length: 1,
      convRule: rule23
  }, {
      start: 1192,
      length: 1,
      convRule: rule22
  }, {
      start: 1193,
      length: 1,
      convRule: rule23
  }, {
      start: 1194,
      length: 1,
      convRule: rule22
  }, {
      start: 1195,
      length: 1,
      convRule: rule23
  }, {
      start: 1196,
      length: 1,
      convRule: rule22
  }, {
      start: 1197,
      length: 1,
      convRule: rule23
  }, {
      start: 1198,
      length: 1,
      convRule: rule22
  }, {
      start: 1199,
      length: 1,
      convRule: rule23
  }, {
      start: 1200,
      length: 1,
      convRule: rule22
  }, {
      start: 1201,
      length: 1,
      convRule: rule23
  }, {
      start: 1202,
      length: 1,
      convRule: rule22
  }, {
      start: 1203,
      length: 1,
      convRule: rule23
  }, {
      start: 1204,
      length: 1,
      convRule: rule22
  }, {
      start: 1205,
      length: 1,
      convRule: rule23
  }, {
      start: 1206,
      length: 1,
      convRule: rule22
  }, {
      start: 1207,
      length: 1,
      convRule: rule23
  }, {
      start: 1208,
      length: 1,
      convRule: rule22
  }, {
      start: 1209,
      length: 1,
      convRule: rule23
  }, {
      start: 1210,
      length: 1,
      convRule: rule22
  }, {
      start: 1211,
      length: 1,
      convRule: rule23
  }, {
      start: 1212,
      length: 1,
      convRule: rule22
  }, {
      start: 1213,
      length: 1,
      convRule: rule23
  }, {
      start: 1214,
      length: 1,
      convRule: rule22
  }, {
      start: 1215,
      length: 1,
      convRule: rule23
  }, {
      start: 1216,
      length: 1,
      convRule: rule120
  }, {
      start: 1217,
      length: 1,
      convRule: rule22
  }, {
      start: 1218,
      length: 1,
      convRule: rule23
  }, {
      start: 1219,
      length: 1,
      convRule: rule22
  }, {
      start: 1220,
      length: 1,
      convRule: rule23
  }, {
      start: 1221,
      length: 1,
      convRule: rule22
  }, {
      start: 1222,
      length: 1,
      convRule: rule23
  }, {
      start: 1223,
      length: 1,
      convRule: rule22
  }, {
      start: 1224,
      length: 1,
      convRule: rule23
  }, {
      start: 1225,
      length: 1,
      convRule: rule22
  }, {
      start: 1226,
      length: 1,
      convRule: rule23
  }, {
      start: 1227,
      length: 1,
      convRule: rule22
  }, {
      start: 1228,
      length: 1,
      convRule: rule23
  }, {
      start: 1229,
      length: 1,
      convRule: rule22
  }, {
      start: 1230,
      length: 1,
      convRule: rule23
  }, {
      start: 1231,
      length: 1,
      convRule: rule121
  }, {
      start: 1232,
      length: 1,
      convRule: rule22
  }, {
      start: 1233,
      length: 1,
      convRule: rule23
  }, {
      start: 1234,
      length: 1,
      convRule: rule22
  }, {
      start: 1235,
      length: 1,
      convRule: rule23
  }, {
      start: 1236,
      length: 1,
      convRule: rule22
  }, {
      start: 1237,
      length: 1,
      convRule: rule23
  }, {
      start: 1238,
      length: 1,
      convRule: rule22
  }, {
      start: 1239,
      length: 1,
      convRule: rule23
  }, {
      start: 1240,
      length: 1,
      convRule: rule22
  }, {
      start: 1241,
      length: 1,
      convRule: rule23
  }, {
      start: 1242,
      length: 1,
      convRule: rule22
  }, {
      start: 1243,
      length: 1,
      convRule: rule23
  }, {
      start: 1244,
      length: 1,
      convRule: rule22
  }, {
      start: 1245,
      length: 1,
      convRule: rule23
  }, {
      start: 1246,
      length: 1,
      convRule: rule22
  }, {
      start: 1247,
      length: 1,
      convRule: rule23
  }, {
      start: 1248,
      length: 1,
      convRule: rule22
  }, {
      start: 1249,
      length: 1,
      convRule: rule23
  }, {
      start: 1250,
      length: 1,
      convRule: rule22
  }, {
      start: 1251,
      length: 1,
      convRule: rule23
  }, {
      start: 1252,
      length: 1,
      convRule: rule22
  }, {
      start: 1253,
      length: 1,
      convRule: rule23
  }, {
      start: 1254,
      length: 1,
      convRule: rule22
  }, {
      start: 1255,
      length: 1,
      convRule: rule23
  }, {
      start: 1256,
      length: 1,
      convRule: rule22
  }, {
      start: 1257,
      length: 1,
      convRule: rule23
  }, {
      start: 1258,
      length: 1,
      convRule: rule22
  }, {
      start: 1259,
      length: 1,
      convRule: rule23
  }, {
      start: 1260,
      length: 1,
      convRule: rule22
  }, {
      start: 1261,
      length: 1,
      convRule: rule23
  }, {
      start: 1262,
      length: 1,
      convRule: rule22
  }, {
      start: 1263,
      length: 1,
      convRule: rule23
  }, {
      start: 1264,
      length: 1,
      convRule: rule22
  }, {
      start: 1265,
      length: 1,
      convRule: rule23
  }, {
      start: 1266,
      length: 1,
      convRule: rule22
  }, {
      start: 1267,
      length: 1,
      convRule: rule23
  }, {
      start: 1268,
      length: 1,
      convRule: rule22
  }, {
      start: 1269,
      length: 1,
      convRule: rule23
  }, {
      start: 1270,
      length: 1,
      convRule: rule22
  }, {
      start: 1271,
      length: 1,
      convRule: rule23
  }, {
      start: 1272,
      length: 1,
      convRule: rule22
  }, {
      start: 1273,
      length: 1,
      convRule: rule23
  }, {
      start: 1274,
      length: 1,
      convRule: rule22
  }, {
      start: 1275,
      length: 1,
      convRule: rule23
  }, {
      start: 1276,
      length: 1,
      convRule: rule22
  }, {
      start: 1277,
      length: 1,
      convRule: rule23
  }, {
      start: 1278,
      length: 1,
      convRule: rule22
  }, {
      start: 1279,
      length: 1,
      convRule: rule23
  }, {
      start: 1280,
      length: 1,
      convRule: rule22
  }, {
      start: 1281,
      length: 1,
      convRule: rule23
  }, {
      start: 1282,
      length: 1,
      convRule: rule22
  }, {
      start: 1283,
      length: 1,
      convRule: rule23
  }, {
      start: 1284,
      length: 1,
      convRule: rule22
  }, {
      start: 1285,
      length: 1,
      convRule: rule23
  }, {
      start: 1286,
      length: 1,
      convRule: rule22
  }, {
      start: 1287,
      length: 1,
      convRule: rule23
  }, {
      start: 1288,
      length: 1,
      convRule: rule22
  }, {
      start: 1289,
      length: 1,
      convRule: rule23
  }, {
      start: 1290,
      length: 1,
      convRule: rule22
  }, {
      start: 1291,
      length: 1,
      convRule: rule23
  }, {
      start: 1292,
      length: 1,
      convRule: rule22
  }, {
      start: 1293,
      length: 1,
      convRule: rule23
  }, {
      start: 1294,
      length: 1,
      convRule: rule22
  }, {
      start: 1295,
      length: 1,
      convRule: rule23
  }, {
      start: 1296,
      length: 1,
      convRule: rule22
  }, {
      start: 1297,
      length: 1,
      convRule: rule23
  }, {
      start: 1298,
      length: 1,
      convRule: rule22
  }, {
      start: 1299,
      length: 1,
      convRule: rule23
  }, {
      start: 1300,
      length: 1,
      convRule: rule22
  }, {
      start: 1301,
      length: 1,
      convRule: rule23
  }, {
      start: 1302,
      length: 1,
      convRule: rule22
  }, {
      start: 1303,
      length: 1,
      convRule: rule23
  }, {
      start: 1304,
      length: 1,
      convRule: rule22
  }, {
      start: 1305,
      length: 1,
      convRule: rule23
  }, {
      start: 1306,
      length: 1,
      convRule: rule22
  }, {
      start: 1307,
      length: 1,
      convRule: rule23
  }, {
      start: 1308,
      length: 1,
      convRule: rule22
  }, {
      start: 1309,
      length: 1,
      convRule: rule23
  }, {
      start: 1310,
      length: 1,
      convRule: rule22
  }, {
      start: 1311,
      length: 1,
      convRule: rule23
  }, {
      start: 1312,
      length: 1,
      convRule: rule22
  }, {
      start: 1313,
      length: 1,
      convRule: rule23
  }, {
      start: 1314,
      length: 1,
      convRule: rule22
  }, {
      start: 1315,
      length: 1,
      convRule: rule23
  }, {
      start: 1316,
      length: 1,
      convRule: rule22
  }, {
      start: 1317,
      length: 1,
      convRule: rule23
  }, {
      start: 1318,
      length: 1,
      convRule: rule22
  }, {
      start: 1319,
      length: 1,
      convRule: rule23
  }, {
      start: 1320,
      length: 1,
      convRule: rule22
  }, {
      start: 1321,
      length: 1,
      convRule: rule23
  }, {
      start: 1322,
      length: 1,
      convRule: rule22
  }, {
      start: 1323,
      length: 1,
      convRule: rule23
  }, {
      start: 1324,
      length: 1,
      convRule: rule22
  }, {
      start: 1325,
      length: 1,
      convRule: rule23
  }, {
      start: 1326,
      length: 1,
      convRule: rule22
  }, {
      start: 1327,
      length: 1,
      convRule: rule23
  }, {
      start: 1329,
      length: 38,
      convRule: rule122
  }, {
      start: 1369,
      length: 1,
      convRule: rule91
  }, {
      start: 1370,
      length: 6,
      convRule: rule2
  }, {
      start: 1376,
      length: 1,
      convRule: rule20
  }, {
      start: 1377,
      length: 38,
      convRule: rule123
  }, {
      start: 1415,
      length: 2,
      convRule: rule20
  }, {
      start: 1417,
      length: 1,
      convRule: rule2
  }, {
      start: 1418,
      length: 1,
      convRule: rule7
  }, {
      start: 1421,
      length: 2,
      convRule: rule13
  }, {
      start: 1423,
      length: 1,
      convRule: rule3
  }, {
      start: 1425,
      length: 45,
      convRule: rule92
  }, {
      start: 1470,
      length: 1,
      convRule: rule7
  }, {
      start: 1471,
      length: 1,
      convRule: rule92
  }, {
      start: 1472,
      length: 1,
      convRule: rule2
  }, {
      start: 1473,
      length: 2,
      convRule: rule92
  }, {
      start: 1475,
      length: 1,
      convRule: rule2
  }, {
      start: 1476,
      length: 2,
      convRule: rule92
  }, {
      start: 1478,
      length: 1,
      convRule: rule2
  }, {
      start: 1479,
      length: 1,
      convRule: rule92
  }, {
      start: 1488,
      length: 27,
      convRule: rule14
  }, {
      start: 1519,
      length: 4,
      convRule: rule14
  }, {
      start: 1523,
      length: 2,
      convRule: rule2
  }, {
      start: 1536,
      length: 6,
      convRule: rule16
  }, {
      start: 1542,
      length: 3,
      convRule: rule6
  }, {
      start: 1545,
      length: 2,
      convRule: rule2
  }, {
      start: 1547,
      length: 1,
      convRule: rule3
  }, {
      start: 1548,
      length: 2,
      convRule: rule2
  }, {
      start: 1550,
      length: 2,
      convRule: rule13
  }, {
      start: 1552,
      length: 11,
      convRule: rule92
  }, {
      start: 1563,
      length: 1,
      convRule: rule2
  }, {
      start: 1564,
      length: 1,
      convRule: rule16
  }, {
      start: 1566,
      length: 2,
      convRule: rule2
  }, {
      start: 1568,
      length: 32,
      convRule: rule14
  }, {
      start: 1600,
      length: 1,
      convRule: rule91
  }, {
      start: 1601,
      length: 10,
      convRule: rule14
  }, {
      start: 1611,
      length: 21,
      convRule: rule92
  }, {
      start: 1632,
      length: 10,
      convRule: rule8
  }, {
      start: 1642,
      length: 4,
      convRule: rule2
  }, {
      start: 1646,
      length: 2,
      convRule: rule14
  }, {
      start: 1648,
      length: 1,
      convRule: rule92
  }, {
      start: 1649,
      length: 99,
      convRule: rule14
  }, {
      start: 1748,
      length: 1,
      convRule: rule2
  }, {
      start: 1749,
      length: 1,
      convRule: rule14
  }, {
      start: 1750,
      length: 7,
      convRule: rule92
  }, {
      start: 1757,
      length: 1,
      convRule: rule16
  }, {
      start: 1758,
      length: 1,
      convRule: rule13
  }, {
      start: 1759,
      length: 6,
      convRule: rule92
  }, {
      start: 1765,
      length: 2,
      convRule: rule91
  }, {
      start: 1767,
      length: 2,
      convRule: rule92
  }, {
      start: 1769,
      length: 1,
      convRule: rule13
  }, {
      start: 1770,
      length: 4,
      convRule: rule92
  }, {
      start: 1774,
      length: 2,
      convRule: rule14
  }, {
      start: 1776,
      length: 10,
      convRule: rule8
  }, {
      start: 1786,
      length: 3,
      convRule: rule14
  }, {
      start: 1789,
      length: 2,
      convRule: rule13
  }, {
      start: 1791,
      length: 1,
      convRule: rule14
  }, {
      start: 1792,
      length: 14,
      convRule: rule2
  }, {
      start: 1807,
      length: 1,
      convRule: rule16
  }, {
      start: 1808,
      length: 1,
      convRule: rule14
  }, {
      start: 1809,
      length: 1,
      convRule: rule92
  }, {
      start: 1810,
      length: 30,
      convRule: rule14
  }, {
      start: 1840,
      length: 27,
      convRule: rule92
  }, {
      start: 1869,
      length: 89,
      convRule: rule14
  }, {
      start: 1958,
      length: 11,
      convRule: rule92
  }, {
      start: 1969,
      length: 1,
      convRule: rule14
  }, {
      start: 1984,
      length: 10,
      convRule: rule8
  }, {
      start: 1994,
      length: 33,
      convRule: rule14
  }, {
      start: 2027,
      length: 9,
      convRule: rule92
  }, {
      start: 2036,
      length: 2,
      convRule: rule91
  }, {
      start: 2038,
      length: 1,
      convRule: rule13
  }, {
      start: 2039,
      length: 3,
      convRule: rule2
  }, {
      start: 2042,
      length: 1,
      convRule: rule91
  }, {
      start: 2045,
      length: 1,
      convRule: rule92
  }, {
      start: 2046,
      length: 2,
      convRule: rule3
  }, {
      start: 2048,
      length: 22,
      convRule: rule14
  }, {
      start: 2070,
      length: 4,
      convRule: rule92
  }, {
      start: 2074,
      length: 1,
      convRule: rule91
  }, {
      start: 2075,
      length: 9,
      convRule: rule92
  }, {
      start: 2084,
      length: 1,
      convRule: rule91
  }, {
      start: 2085,
      length: 3,
      convRule: rule92
  }, {
      start: 2088,
      length: 1,
      convRule: rule91
  }, {
      start: 2089,
      length: 5,
      convRule: rule92
  }, {
      start: 2096,
      length: 15,
      convRule: rule2
  }, {
      start: 2112,
      length: 25,
      convRule: rule14
  }, {
      start: 2137,
      length: 3,
      convRule: rule92
  }, {
      start: 2142,
      length: 1,
      convRule: rule2
  }, {
      start: 2144,
      length: 11,
      convRule: rule14
  }, {
      start: 2208,
      length: 21,
      convRule: rule14
  }, {
      start: 2230,
      length: 18,
      convRule: rule14
  }, {
      start: 2259,
      length: 15,
      convRule: rule92
  }, {
      start: 2274,
      length: 1,
      convRule: rule16
  }, {
      start: 2275,
      length: 32,
      convRule: rule92
  }, {
      start: 2307,
      length: 1,
      convRule: rule124
  }, {
      start: 2308,
      length: 54,
      convRule: rule14
  }, {
      start: 2362,
      length: 1,
      convRule: rule92
  }, {
      start: 2363,
      length: 1,
      convRule: rule124
  }, {
      start: 2364,
      length: 1,
      convRule: rule92
  }, {
      start: 2365,
      length: 1,
      convRule: rule14
  }, {
      start: 2366,
      length: 3,
      convRule: rule124
  }, {
      start: 2369,
      length: 8,
      convRule: rule92
  }, {
      start: 2377,
      length: 4,
      convRule: rule124
  }, {
      start: 2381,
      length: 1,
      convRule: rule92
  }, {
      start: 2382,
      length: 2,
      convRule: rule124
  }, {
      start: 2384,
      length: 1,
      convRule: rule14
  }, {
      start: 2385,
      length: 7,
      convRule: rule92
  }, {
      start: 2392,
      length: 10,
      convRule: rule14
  }, {
      start: 2402,
      length: 2,
      convRule: rule92
  }, {
      start: 2404,
      length: 2,
      convRule: rule2
  }, {
      start: 2406,
      length: 10,
      convRule: rule8
  }, {
      start: 2416,
      length: 1,
      convRule: rule2
  }, {
      start: 2417,
      length: 1,
      convRule: rule91
  }, {
      start: 2418,
      length: 15,
      convRule: rule14
  }, {
      start: 2433,
      length: 1,
      convRule: rule92
  }, {
      start: 2434,
      length: 2,
      convRule: rule124
  }, {
      start: 2437,
      length: 8,
      convRule: rule14
  }, {
      start: 2447,
      length: 2,
      convRule: rule14
  }, {
      start: 2451,
      length: 22,
      convRule: rule14
  }, {
      start: 2474,
      length: 7,
      convRule: rule14
  }, {
      start: 2482,
      length: 1,
      convRule: rule14
  }, {
      start: 2486,
      length: 4,
      convRule: rule14
  }, {
      start: 2492,
      length: 1,
      convRule: rule92
  }, {
      start: 2493,
      length: 1,
      convRule: rule14
  }, {
      start: 2494,
      length: 3,
      convRule: rule124
  }, {
      start: 2497,
      length: 4,
      convRule: rule92
  }, {
      start: 2503,
      length: 2,
      convRule: rule124
  }, {
      start: 2507,
      length: 2,
      convRule: rule124
  }, {
      start: 2509,
      length: 1,
      convRule: rule92
  }, {
      start: 2510,
      length: 1,
      convRule: rule14
  }, {
      start: 2519,
      length: 1,
      convRule: rule124
  }, {
      start: 2524,
      length: 2,
      convRule: rule14
  }, {
      start: 2527,
      length: 3,
      convRule: rule14
  }, {
      start: 2530,
      length: 2,
      convRule: rule92
  }, {
      start: 2534,
      length: 10,
      convRule: rule8
  }, {
      start: 2544,
      length: 2,
      convRule: rule14
  }, {
      start: 2546,
      length: 2,
      convRule: rule3
  }, {
      start: 2548,
      length: 6,
      convRule: rule17
  }, {
      start: 2554,
      length: 1,
      convRule: rule13
  }, {
      start: 2555,
      length: 1,
      convRule: rule3
  }, {
      start: 2556,
      length: 1,
      convRule: rule14
  }, {
      start: 2557,
      length: 1,
      convRule: rule2
  }, {
      start: 2558,
      length: 1,
      convRule: rule92
  }, {
      start: 2561,
      length: 2,
      convRule: rule92
  }, {
      start: 2563,
      length: 1,
      convRule: rule124
  }, {
      start: 2565,
      length: 6,
      convRule: rule14
  }, {
      start: 2575,
      length: 2,
      convRule: rule14
  }, {
      start: 2579,
      length: 22,
      convRule: rule14
  }, {
      start: 2602,
      length: 7,
      convRule: rule14
  }, {
      start: 2610,
      length: 2,
      convRule: rule14
  }, {
      start: 2613,
      length: 2,
      convRule: rule14
  }, {
      start: 2616,
      length: 2,
      convRule: rule14
  }, {
      start: 2620,
      length: 1,
      convRule: rule92
  }, {
      start: 2622,
      length: 3,
      convRule: rule124
  }, {
      start: 2625,
      length: 2,
      convRule: rule92
  }, {
      start: 2631,
      length: 2,
      convRule: rule92
  }, {
      start: 2635,
      length: 3,
      convRule: rule92
  }, {
      start: 2641,
      length: 1,
      convRule: rule92
  }, {
      start: 2649,
      length: 4,
      convRule: rule14
  }, {
      start: 2654,
      length: 1,
      convRule: rule14
  }, {
      start: 2662,
      length: 10,
      convRule: rule8
  }, {
      start: 2672,
      length: 2,
      convRule: rule92
  }, {
      start: 2674,
      length: 3,
      convRule: rule14
  }, {
      start: 2677,
      length: 1,
      convRule: rule92
  }, {
      start: 2678,
      length: 1,
      convRule: rule2
  }, {
      start: 2689,
      length: 2,
      convRule: rule92
  }, {
      start: 2691,
      length: 1,
      convRule: rule124
  }, {
      start: 2693,
      length: 9,
      convRule: rule14
  }, {
      start: 2703,
      length: 3,
      convRule: rule14
  }, {
      start: 2707,
      length: 22,
      convRule: rule14
  }, {
      start: 2730,
      length: 7,
      convRule: rule14
  }, {
      start: 2738,
      length: 2,
      convRule: rule14
  }, {
      start: 2741,
      length: 5,
      convRule: rule14
  }, {
      start: 2748,
      length: 1,
      convRule: rule92
  }, {
      start: 2749,
      length: 1,
      convRule: rule14
  }, {
      start: 2750,
      length: 3,
      convRule: rule124
  }, {
      start: 2753,
      length: 5,
      convRule: rule92
  }, {
      start: 2759,
      length: 2,
      convRule: rule92
  }, {
      start: 2761,
      length: 1,
      convRule: rule124
  }, {
      start: 2763,
      length: 2,
      convRule: rule124
  }, {
      start: 2765,
      length: 1,
      convRule: rule92
  }, {
      start: 2768,
      length: 1,
      convRule: rule14
  }, {
      start: 2784,
      length: 2,
      convRule: rule14
  }, {
      start: 2786,
      length: 2,
      convRule: rule92
  }, {
      start: 2790,
      length: 10,
      convRule: rule8
  }, {
      start: 2800,
      length: 1,
      convRule: rule2
  }, {
      start: 2801,
      length: 1,
      convRule: rule3
  }, {
      start: 2809,
      length: 1,
      convRule: rule14
  }, {
      start: 2810,
      length: 6,
      convRule: rule92
  }, {
      start: 2817,
      length: 1,
      convRule: rule92
  }, {
      start: 2818,
      length: 2,
      convRule: rule124
  }, {
      start: 2821,
      length: 8,
      convRule: rule14
  }, {
      start: 2831,
      length: 2,
      convRule: rule14
  }, {
      start: 2835,
      length: 22,
      convRule: rule14
  }, {
      start: 2858,
      length: 7,
      convRule: rule14
  }, {
      start: 2866,
      length: 2,
      convRule: rule14
  }, {
      start: 2869,
      length: 5,
      convRule: rule14
  }, {
      start: 2876,
      length: 1,
      convRule: rule92
  }, {
      start: 2877,
      length: 1,
      convRule: rule14
  }, {
      start: 2878,
      length: 1,
      convRule: rule124
  }, {
      start: 2879,
      length: 1,
      convRule: rule92
  }, {
      start: 2880,
      length: 1,
      convRule: rule124
  }, {
      start: 2881,
      length: 4,
      convRule: rule92
  }, {
      start: 2887,
      length: 2,
      convRule: rule124
  }, {
      start: 2891,
      length: 2,
      convRule: rule124
  }, {
      start: 2893,
      length: 1,
      convRule: rule92
  }, {
      start: 2901,
      length: 2,
      convRule: rule92
  }, {
      start: 2903,
      length: 1,
      convRule: rule124
  }, {
      start: 2908,
      length: 2,
      convRule: rule14
  }, {
      start: 2911,
      length: 3,
      convRule: rule14
  }, {
      start: 2914,
      length: 2,
      convRule: rule92
  }, {
      start: 2918,
      length: 10,
      convRule: rule8
  }, {
      start: 2928,
      length: 1,
      convRule: rule13
  }, {
      start: 2929,
      length: 1,
      convRule: rule14
  }, {
      start: 2930,
      length: 6,
      convRule: rule17
  }, {
      start: 2946,
      length: 1,
      convRule: rule92
  }, {
      start: 2947,
      length: 1,
      convRule: rule14
  }, {
      start: 2949,
      length: 6,
      convRule: rule14
  }, {
      start: 2958,
      length: 3,
      convRule: rule14
  }, {
      start: 2962,
      length: 4,
      convRule: rule14
  }, {
      start: 2969,
      length: 2,
      convRule: rule14
  }, {
      start: 2972,
      length: 1,
      convRule: rule14
  }, {
      start: 2974,
      length: 2,
      convRule: rule14
  }, {
      start: 2979,
      length: 2,
      convRule: rule14
  }, {
      start: 2984,
      length: 3,
      convRule: rule14
  }, {
      start: 2990,
      length: 12,
      convRule: rule14
  }, {
      start: 3006,
      length: 2,
      convRule: rule124
  }, {
      start: 3008,
      length: 1,
      convRule: rule92
  }, {
      start: 3009,
      length: 2,
      convRule: rule124
  }, {
      start: 3014,
      length: 3,
      convRule: rule124
  }, {
      start: 3018,
      length: 3,
      convRule: rule124
  }, {
      start: 3021,
      length: 1,
      convRule: rule92
  }, {
      start: 3024,
      length: 1,
      convRule: rule14
  }, {
      start: 3031,
      length: 1,
      convRule: rule124
  }, {
      start: 3046,
      length: 10,
      convRule: rule8
  }, {
      start: 3056,
      length: 3,
      convRule: rule17
  }, {
      start: 3059,
      length: 6,
      convRule: rule13
  }, {
      start: 3065,
      length: 1,
      convRule: rule3
  }, {
      start: 3066,
      length: 1,
      convRule: rule13
  }, {
      start: 3072,
      length: 1,
      convRule: rule92
  }, {
      start: 3073,
      length: 3,
      convRule: rule124
  }, {
      start: 3076,
      length: 1,
      convRule: rule92
  }, {
      start: 3077,
      length: 8,
      convRule: rule14
  }, {
      start: 3086,
      length: 3,
      convRule: rule14
  }, {
      start: 3090,
      length: 23,
      convRule: rule14
  }, {
      start: 3114,
      length: 16,
      convRule: rule14
  }, {
      start: 3133,
      length: 1,
      convRule: rule14
  }, {
      start: 3134,
      length: 3,
      convRule: rule92
  }, {
      start: 3137,
      length: 4,
      convRule: rule124
  }, {
      start: 3142,
      length: 3,
      convRule: rule92
  }, {
      start: 3146,
      length: 4,
      convRule: rule92
  }, {
      start: 3157,
      length: 2,
      convRule: rule92
  }, {
      start: 3160,
      length: 3,
      convRule: rule14
  }, {
      start: 3168,
      length: 2,
      convRule: rule14
  }, {
      start: 3170,
      length: 2,
      convRule: rule92
  }, {
      start: 3174,
      length: 10,
      convRule: rule8
  }, {
      start: 3191,
      length: 1,
      convRule: rule2
  }, {
      start: 3192,
      length: 7,
      convRule: rule17
  }, {
      start: 3199,
      length: 1,
      convRule: rule13
  }, {
      start: 3200,
      length: 1,
      convRule: rule14
  }, {
      start: 3201,
      length: 1,
      convRule: rule92
  }, {
      start: 3202,
      length: 2,
      convRule: rule124
  }, {
      start: 3204,
      length: 1,
      convRule: rule2
  }, {
      start: 3205,
      length: 8,
      convRule: rule14
  }, {
      start: 3214,
      length: 3,
      convRule: rule14
  }, {
      start: 3218,
      length: 23,
      convRule: rule14
  }, {
      start: 3242,
      length: 10,
      convRule: rule14
  }, {
      start: 3253,
      length: 5,
      convRule: rule14
  }, {
      start: 3260,
      length: 1,
      convRule: rule92
  }, {
      start: 3261,
      length: 1,
      convRule: rule14
  }, {
      start: 3262,
      length: 1,
      convRule: rule124
  }, {
      start: 3263,
      length: 1,
      convRule: rule92
  }, {
      start: 3264,
      length: 5,
      convRule: rule124
  }, {
      start: 3270,
      length: 1,
      convRule: rule92
  }, {
      start: 3271,
      length: 2,
      convRule: rule124
  }, {
      start: 3274,
      length: 2,
      convRule: rule124
  }, {
      start: 3276,
      length: 2,
      convRule: rule92
  }, {
      start: 3285,
      length: 2,
      convRule: rule124
  }, {
      start: 3294,
      length: 1,
      convRule: rule14
  }, {
      start: 3296,
      length: 2,
      convRule: rule14
  }, {
      start: 3298,
      length: 2,
      convRule: rule92
  }, {
      start: 3302,
      length: 10,
      convRule: rule8
  }, {
      start: 3313,
      length: 2,
      convRule: rule14
  }, {
      start: 3328,
      length: 2,
      convRule: rule92
  }, {
      start: 3330,
      length: 2,
      convRule: rule124
  }, {
      start: 3332,
      length: 9,
      convRule: rule14
  }, {
      start: 3342,
      length: 3,
      convRule: rule14
  }, {
      start: 3346,
      length: 41,
      convRule: rule14
  }, {
      start: 3387,
      length: 2,
      convRule: rule92
  }, {
      start: 3389,
      length: 1,
      convRule: rule14
  }, {
      start: 3390,
      length: 3,
      convRule: rule124
  }, {
      start: 3393,
      length: 4,
      convRule: rule92
  }, {
      start: 3398,
      length: 3,
      convRule: rule124
  }, {
      start: 3402,
      length: 3,
      convRule: rule124
  }, {
      start: 3405,
      length: 1,
      convRule: rule92
  }, {
      start: 3406,
      length: 1,
      convRule: rule14
  }, {
      start: 3407,
      length: 1,
      convRule: rule13
  }, {
      start: 3412,
      length: 3,
      convRule: rule14
  }, {
      start: 3415,
      length: 1,
      convRule: rule124
  }, {
      start: 3416,
      length: 7,
      convRule: rule17
  }, {
      start: 3423,
      length: 3,
      convRule: rule14
  }, {
      start: 3426,
      length: 2,
      convRule: rule92
  }, {
      start: 3430,
      length: 10,
      convRule: rule8
  }, {
      start: 3440,
      length: 9,
      convRule: rule17
  }, {
      start: 3449,
      length: 1,
      convRule: rule13
  }, {
      start: 3450,
      length: 6,
      convRule: rule14
  }, {
      start: 3457,
      length: 1,
      convRule: rule92
  }, {
      start: 3458,
      length: 2,
      convRule: rule124
  }, {
      start: 3461,
      length: 18,
      convRule: rule14
  }, {
      start: 3482,
      length: 24,
      convRule: rule14
  }, {
      start: 3507,
      length: 9,
      convRule: rule14
  }, {
      start: 3517,
      length: 1,
      convRule: rule14
  }, {
      start: 3520,
      length: 7,
      convRule: rule14
  }, {
      start: 3530,
      length: 1,
      convRule: rule92
  }, {
      start: 3535,
      length: 3,
      convRule: rule124
  }, {
      start: 3538,
      length: 3,
      convRule: rule92
  }, {
      start: 3542,
      length: 1,
      convRule: rule92
  }, {
      start: 3544,
      length: 8,
      convRule: rule124
  }, {
      start: 3558,
      length: 10,
      convRule: rule8
  }, {
      start: 3570,
      length: 2,
      convRule: rule124
  }, {
      start: 3572,
      length: 1,
      convRule: rule2
  }, {
      start: 3585,
      length: 48,
      convRule: rule14
  }, {
      start: 3633,
      length: 1,
      convRule: rule92
  }, {
      start: 3634,
      length: 2,
      convRule: rule14
  }, {
      start: 3636,
      length: 7,
      convRule: rule92
  }, {
      start: 3647,
      length: 1,
      convRule: rule3
  }, {
      start: 3648,
      length: 6,
      convRule: rule14
  }, {
      start: 3654,
      length: 1,
      convRule: rule91
  }, {
      start: 3655,
      length: 8,
      convRule: rule92
  }, {
      start: 3663,
      length: 1,
      convRule: rule2
  }, {
      start: 3664,
      length: 10,
      convRule: rule8
  }, {
      start: 3674,
      length: 2,
      convRule: rule2
  }, {
      start: 3713,
      length: 2,
      convRule: rule14
  }, {
      start: 3716,
      length: 1,
      convRule: rule14
  }, {
      start: 3718,
      length: 5,
      convRule: rule14
  }, {
      start: 3724,
      length: 24,
      convRule: rule14
  }, {
      start: 3749,
      length: 1,
      convRule: rule14
  }, {
      start: 3751,
      length: 10,
      convRule: rule14
  }, {
      start: 3761,
      length: 1,
      convRule: rule92
  }, {
      start: 3762,
      length: 2,
      convRule: rule14
  }, {
      start: 3764,
      length: 9,
      convRule: rule92
  }, {
      start: 3773,
      length: 1,
      convRule: rule14
  }, {
      start: 3776,
      length: 5,
      convRule: rule14
  }, {
      start: 3782,
      length: 1,
      convRule: rule91
  }, {
      start: 3784,
      length: 6,
      convRule: rule92
  }, {
      start: 3792,
      length: 10,
      convRule: rule8
  }, {
      start: 3804,
      length: 4,
      convRule: rule14
  }, {
      start: 3840,
      length: 1,
      convRule: rule14
  }, {
      start: 3841,
      length: 3,
      convRule: rule13
  }, {
      start: 3844,
      length: 15,
      convRule: rule2
  }, {
      start: 3859,
      length: 1,
      convRule: rule13
  }, {
      start: 3860,
      length: 1,
      convRule: rule2
  }, {
      start: 3861,
      length: 3,
      convRule: rule13
  }, {
      start: 3864,
      length: 2,
      convRule: rule92
  }, {
      start: 3866,
      length: 6,
      convRule: rule13
  }, {
      start: 3872,
      length: 10,
      convRule: rule8
  }, {
      start: 3882,
      length: 10,
      convRule: rule17
  }, {
      start: 3892,
      length: 1,
      convRule: rule13
  }, {
      start: 3893,
      length: 1,
      convRule: rule92
  }, {
      start: 3894,
      length: 1,
      convRule: rule13
  }, {
      start: 3895,
      length: 1,
      convRule: rule92
  }, {
      start: 3896,
      length: 1,
      convRule: rule13
  }, {
      start: 3897,
      length: 1,
      convRule: rule92
  }, {
      start: 3898,
      length: 1,
      convRule: rule4
  }, {
      start: 3899,
      length: 1,
      convRule: rule5
  }, {
      start: 3900,
      length: 1,
      convRule: rule4
  }, {
      start: 3901,
      length: 1,
      convRule: rule5
  }, {
      start: 3902,
      length: 2,
      convRule: rule124
  }, {
      start: 3904,
      length: 8,
      convRule: rule14
  }, {
      start: 3913,
      length: 36,
      convRule: rule14
  }, {
      start: 3953,
      length: 14,
      convRule: rule92
  }, {
      start: 3967,
      length: 1,
      convRule: rule124
  }, {
      start: 3968,
      length: 5,
      convRule: rule92
  }, {
      start: 3973,
      length: 1,
      convRule: rule2
  }, {
      start: 3974,
      length: 2,
      convRule: rule92
  }, {
      start: 3976,
      length: 5,
      convRule: rule14
  }, {
      start: 3981,
      length: 11,
      convRule: rule92
  }, {
      start: 3993,
      length: 36,
      convRule: rule92
  }, {
      start: 4030,
      length: 8,
      convRule: rule13
  }, {
      start: 4038,
      length: 1,
      convRule: rule92
  }, {
      start: 4039,
      length: 6,
      convRule: rule13
  }, {
      start: 4046,
      length: 2,
      convRule: rule13
  }, {
      start: 4048,
      length: 5,
      convRule: rule2
  }, {
      start: 4053,
      length: 4,
      convRule: rule13
  }, {
      start: 4057,
      length: 2,
      convRule: rule2
  }, {
      start: 4096,
      length: 43,
      convRule: rule14
  }, {
      start: 4139,
      length: 2,
      convRule: rule124
  }, {
      start: 4141,
      length: 4,
      convRule: rule92
  }, {
      start: 4145,
      length: 1,
      convRule: rule124
  }, {
      start: 4146,
      length: 6,
      convRule: rule92
  }, {
      start: 4152,
      length: 1,
      convRule: rule124
  }, {
      start: 4153,
      length: 2,
      convRule: rule92
  }, {
      start: 4155,
      length: 2,
      convRule: rule124
  }, {
      start: 4157,
      length: 2,
      convRule: rule92
  }, {
      start: 4159,
      length: 1,
      convRule: rule14
  }, {
      start: 4160,
      length: 10,
      convRule: rule8
  }, {
      start: 4170,
      length: 6,
      convRule: rule2
  }, {
      start: 4176,
      length: 6,
      convRule: rule14
  }, {
      start: 4182,
      length: 2,
      convRule: rule124
  }, {
      start: 4184,
      length: 2,
      convRule: rule92
  }, {
      start: 4186,
      length: 4,
      convRule: rule14
  }, {
      start: 4190,
      length: 3,
      convRule: rule92
  }, {
      start: 4193,
      length: 1,
      convRule: rule14
  }, {
      start: 4194,
      length: 3,
      convRule: rule124
  }, {
      start: 4197,
      length: 2,
      convRule: rule14
  }, {
      start: 4199,
      length: 7,
      convRule: rule124
  }, {
      start: 4206,
      length: 3,
      convRule: rule14
  }, {
      start: 4209,
      length: 4,
      convRule: rule92
  }, {
      start: 4213,
      length: 13,
      convRule: rule14
  }, {
      start: 4226,
      length: 1,
      convRule: rule92
  }, {
      start: 4227,
      length: 2,
      convRule: rule124
  }, {
      start: 4229,
      length: 2,
      convRule: rule92
  }, {
      start: 4231,
      length: 6,
      convRule: rule124
  }, {
      start: 4237,
      length: 1,
      convRule: rule92
  }, {
      start: 4238,
      length: 1,
      convRule: rule14
  }, {
      start: 4239,
      length: 1,
      convRule: rule124
  }, {
      start: 4240,
      length: 10,
      convRule: rule8
  }, {
      start: 4250,
      length: 3,
      convRule: rule124
  }, {
      start: 4253,
      length: 1,
      convRule: rule92
  }, {
      start: 4254,
      length: 2,
      convRule: rule13
  }, {
      start: 4256,
      length: 38,
      convRule: rule125
  }, {
      start: 4295,
      length: 1,
      convRule: rule125
  }, {
      start: 4301,
      length: 1,
      convRule: rule125
  }, {
      start: 4304,
      length: 43,
      convRule: rule126
  }, {
      start: 4347,
      length: 1,
      convRule: rule2
  }, {
      start: 4348,
      length: 1,
      convRule: rule91
  }, {
      start: 4349,
      length: 3,
      convRule: rule126
  }, {
      start: 4352,
      length: 329,
      convRule: rule14
  }, {
      start: 4682,
      length: 4,
      convRule: rule14
  }, {
      start: 4688,
      length: 7,
      convRule: rule14
  }, {
      start: 4696,
      length: 1,
      convRule: rule14
  }, {
      start: 4698,
      length: 4,
      convRule: rule14
  }, {
      start: 4704,
      length: 41,
      convRule: rule14
  }, {
      start: 4746,
      length: 4,
      convRule: rule14
  }, {
      start: 4752,
      length: 33,
      convRule: rule14
  }, {
      start: 4786,
      length: 4,
      convRule: rule14
  }, {
      start: 4792,
      length: 7,
      convRule: rule14
  }, {
      start: 4800,
      length: 1,
      convRule: rule14
  }, {
      start: 4802,
      length: 4,
      convRule: rule14
  }, {
      start: 4808,
      length: 15,
      convRule: rule14
  }, {
      start: 4824,
      length: 57,
      convRule: rule14
  }, {
      start: 4882,
      length: 4,
      convRule: rule14
  }, {
      start: 4888,
      length: 67,
      convRule: rule14
  }, {
      start: 4957,
      length: 3,
      convRule: rule92
  }, {
      start: 4960,
      length: 9,
      convRule: rule2
  }, {
      start: 4969,
      length: 20,
      convRule: rule17
  }, {
      start: 4992,
      length: 16,
      convRule: rule14
  }, {
      start: 5008,
      length: 10,
      convRule: rule13
  }, {
      start: 5024,
      length: 80,
      convRule: rule127
  }, {
      start: 5104,
      length: 6,
      convRule: rule104
  }, {
      start: 5112,
      length: 6,
      convRule: rule110
  }, {
      start: 5120,
      length: 1,
      convRule: rule7
  }, {
      start: 5121,
      length: 620,
      convRule: rule14
  }, {
      start: 5741,
      length: 1,
      convRule: rule13
  }, {
      start: 5742,
      length: 1,
      convRule: rule2
  }, {
      start: 5743,
      length: 17,
      convRule: rule14
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 5761,
      length: 26,
      convRule: rule14
  }, {
      start: 5787,
      length: 1,
      convRule: rule4
  }, {
      start: 5788,
      length: 1,
      convRule: rule5
  }, {
      start: 5792,
      length: 75,
      convRule: rule14
  }, {
      start: 5867,
      length: 3,
      convRule: rule2
  }, {
      start: 5870,
      length: 3,
      convRule: rule128
  }, {
      start: 5873,
      length: 8,
      convRule: rule14
  }, {
      start: 5888,
      length: 13,
      convRule: rule14
  }, {
      start: 5902,
      length: 4,
      convRule: rule14
  }, {
      start: 5906,
      length: 3,
      convRule: rule92
  }, {
      start: 5920,
      length: 18,
      convRule: rule14
  }, {
      start: 5938,
      length: 3,
      convRule: rule92
  }, {
      start: 5941,
      length: 2,
      convRule: rule2
  }, {
      start: 5952,
      length: 18,
      convRule: rule14
  }, {
      start: 5970,
      length: 2,
      convRule: rule92
  }, {
      start: 5984,
      length: 13,
      convRule: rule14
  }, {
      start: 5998,
      length: 3,
      convRule: rule14
  }, {
      start: 6002,
      length: 2,
      convRule: rule92
  }, {
      start: 6016,
      length: 52,
      convRule: rule14
  }, {
      start: 6068,
      length: 2,
      convRule: rule92
  }, {
      start: 6070,
      length: 1,
      convRule: rule124
  }, {
      start: 6071,
      length: 7,
      convRule: rule92
  }, {
      start: 6078,
      length: 8,
      convRule: rule124
  }, {
      start: 6086,
      length: 1,
      convRule: rule92
  }, {
      start: 6087,
      length: 2,
      convRule: rule124
  }, {
      start: 6089,
      length: 11,
      convRule: rule92
  }, {
      start: 6100,
      length: 3,
      convRule: rule2
  }, {
      start: 6103,
      length: 1,
      convRule: rule91
  }, {
      start: 6104,
      length: 3,
      convRule: rule2
  }, {
      start: 6107,
      length: 1,
      convRule: rule3
  }, {
      start: 6108,
      length: 1,
      convRule: rule14
  }, {
      start: 6109,
      length: 1,
      convRule: rule92
  }, {
      start: 6112,
      length: 10,
      convRule: rule8
  }, {
      start: 6128,
      length: 10,
      convRule: rule17
  }, {
      start: 6144,
      length: 6,
      convRule: rule2
  }, {
      start: 6150,
      length: 1,
      convRule: rule7
  }, {
      start: 6151,
      length: 4,
      convRule: rule2
  }, {
      start: 6155,
      length: 3,
      convRule: rule92
  }, {
      start: 6158,
      length: 1,
      convRule: rule16
  }, {
      start: 6160,
      length: 10,
      convRule: rule8
  }, {
      start: 6176,
      length: 35,
      convRule: rule14
  }, {
      start: 6211,
      length: 1,
      convRule: rule91
  }, {
      start: 6212,
      length: 53,
      convRule: rule14
  }, {
      start: 6272,
      length: 5,
      convRule: rule14
  }, {
      start: 6277,
      length: 2,
      convRule: rule92
  }, {
      start: 6279,
      length: 34,
      convRule: rule14
  }, {
      start: 6313,
      length: 1,
      convRule: rule92
  }, {
      start: 6314,
      length: 1,
      convRule: rule14
  }, {
      start: 6320,
      length: 70,
      convRule: rule14
  }, {
      start: 6400,
      length: 31,
      convRule: rule14
  }, {
      start: 6432,
      length: 3,
      convRule: rule92
  }, {
      start: 6435,
      length: 4,
      convRule: rule124
  }, {
      start: 6439,
      length: 2,
      convRule: rule92
  }, {
      start: 6441,
      length: 3,
      convRule: rule124
  }, {
      start: 6448,
      length: 2,
      convRule: rule124
  }, {
      start: 6450,
      length: 1,
      convRule: rule92
  }, {
      start: 6451,
      length: 6,
      convRule: rule124
  }, {
      start: 6457,
      length: 3,
      convRule: rule92
  }, {
      start: 6464,
      length: 1,
      convRule: rule13
  }, {
      start: 6468,
      length: 2,
      convRule: rule2
  }, {
      start: 6470,
      length: 10,
      convRule: rule8
  }, {
      start: 6480,
      length: 30,
      convRule: rule14
  }, {
      start: 6512,
      length: 5,
      convRule: rule14
  }, {
      start: 6528,
      length: 44,
      convRule: rule14
  }, {
      start: 6576,
      length: 26,
      convRule: rule14
  }, {
      start: 6608,
      length: 10,
      convRule: rule8
  }, {
      start: 6618,
      length: 1,
      convRule: rule17
  }, {
      start: 6622,
      length: 34,
      convRule: rule13
  }, {
      start: 6656,
      length: 23,
      convRule: rule14
  }, {
      start: 6679,
      length: 2,
      convRule: rule92
  }, {
      start: 6681,
      length: 2,
      convRule: rule124
  }, {
      start: 6683,
      length: 1,
      convRule: rule92
  }, {
      start: 6686,
      length: 2,
      convRule: rule2
  }, {
      start: 6688,
      length: 53,
      convRule: rule14
  }, {
      start: 6741,
      length: 1,
      convRule: rule124
  }, {
      start: 6742,
      length: 1,
      convRule: rule92
  }, {
      start: 6743,
      length: 1,
      convRule: rule124
  }, {
      start: 6744,
      length: 7,
      convRule: rule92
  }, {
      start: 6752,
      length: 1,
      convRule: rule92
  }, {
      start: 6753,
      length: 1,
      convRule: rule124
  }, {
      start: 6754,
      length: 1,
      convRule: rule92
  }, {
      start: 6755,
      length: 2,
      convRule: rule124
  }, {
      start: 6757,
      length: 8,
      convRule: rule92
  }, {
      start: 6765,
      length: 6,
      convRule: rule124
  }, {
      start: 6771,
      length: 10,
      convRule: rule92
  }, {
      start: 6783,
      length: 1,
      convRule: rule92
  }, {
      start: 6784,
      length: 10,
      convRule: rule8
  }, {
      start: 6800,
      length: 10,
      convRule: rule8
  }, {
      start: 6816,
      length: 7,
      convRule: rule2
  }, {
      start: 6823,
      length: 1,
      convRule: rule91
  }, {
      start: 6824,
      length: 6,
      convRule: rule2
  }, {
      start: 6832,
      length: 14,
      convRule: rule92
  }, {
      start: 6846,
      length: 1,
      convRule: rule119
  }, {
      start: 6847,
      length: 2,
      convRule: rule92
  }, {
      start: 6912,
      length: 4,
      convRule: rule92
  }, {
      start: 6916,
      length: 1,
      convRule: rule124
  }, {
      start: 6917,
      length: 47,
      convRule: rule14
  }, {
      start: 6964,
      length: 1,
      convRule: rule92
  }, {
      start: 6965,
      length: 1,
      convRule: rule124
  }, {
      start: 6966,
      length: 5,
      convRule: rule92
  }, {
      start: 6971,
      length: 1,
      convRule: rule124
  }, {
      start: 6972,
      length: 1,
      convRule: rule92
  }, {
      start: 6973,
      length: 5,
      convRule: rule124
  }, {
      start: 6978,
      length: 1,
      convRule: rule92
  }, {
      start: 6979,
      length: 2,
      convRule: rule124
  }, {
      start: 6981,
      length: 7,
      convRule: rule14
  }, {
      start: 6992,
      length: 10,
      convRule: rule8
  }, {
      start: 7002,
      length: 7,
      convRule: rule2
  }, {
      start: 7009,
      length: 10,
      convRule: rule13
  }, {
      start: 7019,
      length: 9,
      convRule: rule92
  }, {
      start: 7028,
      length: 9,
      convRule: rule13
  }, {
      start: 7040,
      length: 2,
      convRule: rule92
  }, {
      start: 7042,
      length: 1,
      convRule: rule124
  }, {
      start: 7043,
      length: 30,
      convRule: rule14
  }, {
      start: 7073,
      length: 1,
      convRule: rule124
  }, {
      start: 7074,
      length: 4,
      convRule: rule92
  }, {
      start: 7078,
      length: 2,
      convRule: rule124
  }, {
      start: 7080,
      length: 2,
      convRule: rule92
  }, {
      start: 7082,
      length: 1,
      convRule: rule124
  }, {
      start: 7083,
      length: 3,
      convRule: rule92
  }, {
      start: 7086,
      length: 2,
      convRule: rule14
  }, {
      start: 7088,
      length: 10,
      convRule: rule8
  }, {
      start: 7098,
      length: 44,
      convRule: rule14
  }, {
      start: 7142,
      length: 1,
      convRule: rule92
  }, {
      start: 7143,
      length: 1,
      convRule: rule124
  }, {
      start: 7144,
      length: 2,
      convRule: rule92
  }, {
      start: 7146,
      length: 3,
      convRule: rule124
  }, {
      start: 7149,
      length: 1,
      convRule: rule92
  }, {
      start: 7150,
      length: 1,
      convRule: rule124
  }, {
      start: 7151,
      length: 3,
      convRule: rule92
  }, {
      start: 7154,
      length: 2,
      convRule: rule124
  }, {
      start: 7164,
      length: 4,
      convRule: rule2
  }, {
      start: 7168,
      length: 36,
      convRule: rule14
  }, {
      start: 7204,
      length: 8,
      convRule: rule124
  }, {
      start: 7212,
      length: 8,
      convRule: rule92
  }, {
      start: 7220,
      length: 2,
      convRule: rule124
  }, {
      start: 7222,
      length: 2,
      convRule: rule92
  }, {
      start: 7227,
      length: 5,
      convRule: rule2
  }, {
      start: 7232,
      length: 10,
      convRule: rule8
  }, {
      start: 7245,
      length: 3,
      convRule: rule14
  }, {
      start: 7248,
      length: 10,
      convRule: rule8
  }, {
      start: 7258,
      length: 30,
      convRule: rule14
  }, {
      start: 7288,
      length: 6,
      convRule: rule91
  }, {
      start: 7294,
      length: 2,
      convRule: rule2
  }, {
      start: 7296,
      length: 1,
      convRule: rule129
  }, {
      start: 7297,
      length: 1,
      convRule: rule130
  }, {
      start: 7298,
      length: 1,
      convRule: rule131
  }, {
      start: 7299,
      length: 2,
      convRule: rule132
  }, {
      start: 7301,
      length: 1,
      convRule: rule133
  }, {
      start: 7302,
      length: 1,
      convRule: rule134
  }, {
      start: 7303,
      length: 1,
      convRule: rule135
  }, {
      start: 7304,
      length: 1,
      convRule: rule136
  }, {
      start: 7312,
      length: 43,
      convRule: rule137
  }, {
      start: 7357,
      length: 3,
      convRule: rule137
  }, {
      start: 7360,
      length: 8,
      convRule: rule2
  }, {
      start: 7376,
      length: 3,
      convRule: rule92
  }, {
      start: 7379,
      length: 1,
      convRule: rule2
  }, {
      start: 7380,
      length: 13,
      convRule: rule92
  }, {
      start: 7393,
      length: 1,
      convRule: rule124
  }, {
      start: 7394,
      length: 7,
      convRule: rule92
  }, {
      start: 7401,
      length: 4,
      convRule: rule14
  }, {
      start: 7405,
      length: 1,
      convRule: rule92
  }, {
      start: 7406,
      length: 6,
      convRule: rule14
  }, {
      start: 7412,
      length: 1,
      convRule: rule92
  }, {
      start: 7413,
      length: 2,
      convRule: rule14
  }, {
      start: 7415,
      length: 1,
      convRule: rule124
  }, {
      start: 7416,
      length: 2,
      convRule: rule92
  }, {
      start: 7418,
      length: 1,
      convRule: rule14
  }, {
      start: 7424,
      length: 44,
      convRule: rule20
  }, {
      start: 7468,
      length: 63,
      convRule: rule91
  }, {
      start: 7531,
      length: 13,
      convRule: rule20
  }, {
      start: 7544,
      length: 1,
      convRule: rule91
  }, {
      start: 7545,
      length: 1,
      convRule: rule138
  }, {
      start: 7546,
      length: 3,
      convRule: rule20
  }, {
      start: 7549,
      length: 1,
      convRule: rule139
  }, {
      start: 7550,
      length: 16,
      convRule: rule20
  }, {
      start: 7566,
      length: 1,
      convRule: rule140
  }, {
      start: 7567,
      length: 12,
      convRule: rule20
  }, {
      start: 7579,
      length: 37,
      convRule: rule91
  }, {
      start: 7616,
      length: 58,
      convRule: rule92
  }, {
      start: 7675,
      length: 5,
      convRule: rule92
  }, {
      start: 7680,
      length: 1,
      convRule: rule22
  }, {
      start: 7681,
      length: 1,
      convRule: rule23
  }, {
      start: 7682,
      length: 1,
      convRule: rule22
  }, {
      start: 7683,
      length: 1,
      convRule: rule23
  }, {
      start: 7684,
      length: 1,
      convRule: rule22
  }, {
      start: 7685,
      length: 1,
      convRule: rule23
  }, {
      start: 7686,
      length: 1,
      convRule: rule22
  }, {
      start: 7687,
      length: 1,
      convRule: rule23
  }, {
      start: 7688,
      length: 1,
      convRule: rule22
  }, {
      start: 7689,
      length: 1,
      convRule: rule23
  }, {
      start: 7690,
      length: 1,
      convRule: rule22
  }, {
      start: 7691,
      length: 1,
      convRule: rule23
  }, {
      start: 7692,
      length: 1,
      convRule: rule22
  }, {
      start: 7693,
      length: 1,
      convRule: rule23
  }, {
      start: 7694,
      length: 1,
      convRule: rule22
  }, {
      start: 7695,
      length: 1,
      convRule: rule23
  }, {
      start: 7696,
      length: 1,
      convRule: rule22
  }, {
      start: 7697,
      length: 1,
      convRule: rule23
  }, {
      start: 7698,
      length: 1,
      convRule: rule22
  }, {
      start: 7699,
      length: 1,
      convRule: rule23
  }, {
      start: 7700,
      length: 1,
      convRule: rule22
  }, {
      start: 7701,
      length: 1,
      convRule: rule23
  }, {
      start: 7702,
      length: 1,
      convRule: rule22
  }, {
      start: 7703,
      length: 1,
      convRule: rule23
  }, {
      start: 7704,
      length: 1,
      convRule: rule22
  }, {
      start: 7705,
      length: 1,
      convRule: rule23
  }, {
      start: 7706,
      length: 1,
      convRule: rule22
  }, {
      start: 7707,
      length: 1,
      convRule: rule23
  }, {
      start: 7708,
      length: 1,
      convRule: rule22
  }, {
      start: 7709,
      length: 1,
      convRule: rule23
  }, {
      start: 7710,
      length: 1,
      convRule: rule22
  }, {
      start: 7711,
      length: 1,
      convRule: rule23
  }, {
      start: 7712,
      length: 1,
      convRule: rule22
  }, {
      start: 7713,
      length: 1,
      convRule: rule23
  }, {
      start: 7714,
      length: 1,
      convRule: rule22
  }, {
      start: 7715,
      length: 1,
      convRule: rule23
  }, {
      start: 7716,
      length: 1,
      convRule: rule22
  }, {
      start: 7717,
      length: 1,
      convRule: rule23
  }, {
      start: 7718,
      length: 1,
      convRule: rule22
  }, {
      start: 7719,
      length: 1,
      convRule: rule23
  }, {
      start: 7720,
      length: 1,
      convRule: rule22
  }, {
      start: 7721,
      length: 1,
      convRule: rule23
  }, {
      start: 7722,
      length: 1,
      convRule: rule22
  }, {
      start: 7723,
      length: 1,
      convRule: rule23
  }, {
      start: 7724,
      length: 1,
      convRule: rule22
  }, {
      start: 7725,
      length: 1,
      convRule: rule23
  }, {
      start: 7726,
      length: 1,
      convRule: rule22
  }, {
      start: 7727,
      length: 1,
      convRule: rule23
  }, {
      start: 7728,
      length: 1,
      convRule: rule22
  }, {
      start: 7729,
      length: 1,
      convRule: rule23
  }, {
      start: 7730,
      length: 1,
      convRule: rule22
  }, {
      start: 7731,
      length: 1,
      convRule: rule23
  }, {
      start: 7732,
      length: 1,
      convRule: rule22
  }, {
      start: 7733,
      length: 1,
      convRule: rule23
  }, {
      start: 7734,
      length: 1,
      convRule: rule22
  }, {
      start: 7735,
      length: 1,
      convRule: rule23
  }, {
      start: 7736,
      length: 1,
      convRule: rule22
  }, {
      start: 7737,
      length: 1,
      convRule: rule23
  }, {
      start: 7738,
      length: 1,
      convRule: rule22
  }, {
      start: 7739,
      length: 1,
      convRule: rule23
  }, {
      start: 7740,
      length: 1,
      convRule: rule22
  }, {
      start: 7741,
      length: 1,
      convRule: rule23
  }, {
      start: 7742,
      length: 1,
      convRule: rule22
  }, {
      start: 7743,
      length: 1,
      convRule: rule23
  }, {
      start: 7744,
      length: 1,
      convRule: rule22
  }, {
      start: 7745,
      length: 1,
      convRule: rule23
  }, {
      start: 7746,
      length: 1,
      convRule: rule22
  }, {
      start: 7747,
      length: 1,
      convRule: rule23
  }, {
      start: 7748,
      length: 1,
      convRule: rule22
  }, {
      start: 7749,
      length: 1,
      convRule: rule23
  }, {
      start: 7750,
      length: 1,
      convRule: rule22
  }, {
      start: 7751,
      length: 1,
      convRule: rule23
  }, {
      start: 7752,
      length: 1,
      convRule: rule22
  }, {
      start: 7753,
      length: 1,
      convRule: rule23
  }, {
      start: 7754,
      length: 1,
      convRule: rule22
  }, {
      start: 7755,
      length: 1,
      convRule: rule23
  }, {
      start: 7756,
      length: 1,
      convRule: rule22
  }, {
      start: 7757,
      length: 1,
      convRule: rule23
  }, {
      start: 7758,
      length: 1,
      convRule: rule22
  }, {
      start: 7759,
      length: 1,
      convRule: rule23
  }, {
      start: 7760,
      length: 1,
      convRule: rule22
  }, {
      start: 7761,
      length: 1,
      convRule: rule23
  }, {
      start: 7762,
      length: 1,
      convRule: rule22
  }, {
      start: 7763,
      length: 1,
      convRule: rule23
  }, {
      start: 7764,
      length: 1,
      convRule: rule22
  }, {
      start: 7765,
      length: 1,
      convRule: rule23
  }, {
      start: 7766,
      length: 1,
      convRule: rule22
  }, {
      start: 7767,
      length: 1,
      convRule: rule23
  }, {
      start: 7768,
      length: 1,
      convRule: rule22
  }, {
      start: 7769,
      length: 1,
      convRule: rule23
  }, {
      start: 7770,
      length: 1,
      convRule: rule22
  }, {
      start: 7771,
      length: 1,
      convRule: rule23
  }, {
      start: 7772,
      length: 1,
      convRule: rule22
  }, {
      start: 7773,
      length: 1,
      convRule: rule23
  }, {
      start: 7774,
      length: 1,
      convRule: rule22
  }, {
      start: 7775,
      length: 1,
      convRule: rule23
  }, {
      start: 7776,
      length: 1,
      convRule: rule22
  }, {
      start: 7777,
      length: 1,
      convRule: rule23
  }, {
      start: 7778,
      length: 1,
      convRule: rule22
  }, {
      start: 7779,
      length: 1,
      convRule: rule23
  }, {
      start: 7780,
      length: 1,
      convRule: rule22
  }, {
      start: 7781,
      length: 1,
      convRule: rule23
  }, {
      start: 7782,
      length: 1,
      convRule: rule22
  }, {
      start: 7783,
      length: 1,
      convRule: rule23
  }, {
      start: 7784,
      length: 1,
      convRule: rule22
  }, {
      start: 7785,
      length: 1,
      convRule: rule23
  }, {
      start: 7786,
      length: 1,
      convRule: rule22
  }, {
      start: 7787,
      length: 1,
      convRule: rule23
  }, {
      start: 7788,
      length: 1,
      convRule: rule22
  }, {
      start: 7789,
      length: 1,
      convRule: rule23
  }, {
      start: 7790,
      length: 1,
      convRule: rule22
  }, {
      start: 7791,
      length: 1,
      convRule: rule23
  }, {
      start: 7792,
      length: 1,
      convRule: rule22
  }, {
      start: 7793,
      length: 1,
      convRule: rule23
  }, {
      start: 7794,
      length: 1,
      convRule: rule22
  }, {
      start: 7795,
      length: 1,
      convRule: rule23
  }, {
      start: 7796,
      length: 1,
      convRule: rule22
  }, {
      start: 7797,
      length: 1,
      convRule: rule23
  }, {
      start: 7798,
      length: 1,
      convRule: rule22
  }, {
      start: 7799,
      length: 1,
      convRule: rule23
  }, {
      start: 7800,
      length: 1,
      convRule: rule22
  }, {
      start: 7801,
      length: 1,
      convRule: rule23
  }, {
      start: 7802,
      length: 1,
      convRule: rule22
  }, {
      start: 7803,
      length: 1,
      convRule: rule23
  }, {
      start: 7804,
      length: 1,
      convRule: rule22
  }, {
      start: 7805,
      length: 1,
      convRule: rule23
  }, {
      start: 7806,
      length: 1,
      convRule: rule22
  }, {
      start: 7807,
      length: 1,
      convRule: rule23
  }, {
      start: 7808,
      length: 1,
      convRule: rule22
  }, {
      start: 7809,
      length: 1,
      convRule: rule23
  }, {
      start: 7810,
      length: 1,
      convRule: rule22
  }, {
      start: 7811,
      length: 1,
      convRule: rule23
  }, {
      start: 7812,
      length: 1,
      convRule: rule22
  }, {
      start: 7813,
      length: 1,
      convRule: rule23
  }, {
      start: 7814,
      length: 1,
      convRule: rule22
  }, {
      start: 7815,
      length: 1,
      convRule: rule23
  }, {
      start: 7816,
      length: 1,
      convRule: rule22
  }, {
      start: 7817,
      length: 1,
      convRule: rule23
  }, {
      start: 7818,
      length: 1,
      convRule: rule22
  }, {
      start: 7819,
      length: 1,
      convRule: rule23
  }, {
      start: 7820,
      length: 1,
      convRule: rule22
  }, {
      start: 7821,
      length: 1,
      convRule: rule23
  }, {
      start: 7822,
      length: 1,
      convRule: rule22
  }, {
      start: 7823,
      length: 1,
      convRule: rule23
  }, {
      start: 7824,
      length: 1,
      convRule: rule22
  }, {
      start: 7825,
      length: 1,
      convRule: rule23
  }, {
      start: 7826,
      length: 1,
      convRule: rule22
  }, {
      start: 7827,
      length: 1,
      convRule: rule23
  }, {
      start: 7828,
      length: 1,
      convRule: rule22
  }, {
      start: 7829,
      length: 1,
      convRule: rule23
  }, {
      start: 7830,
      length: 5,
      convRule: rule20
  }, {
      start: 7835,
      length: 1,
      convRule: rule141
  }, {
      start: 7836,
      length: 2,
      convRule: rule20
  }, {
      start: 7838,
      length: 1,
      convRule: rule142
  }, {
      start: 7839,
      length: 1,
      convRule: rule20
  }, {
      start: 7840,
      length: 1,
      convRule: rule22
  }, {
      start: 7841,
      length: 1,
      convRule: rule23
  }, {
      start: 7842,
      length: 1,
      convRule: rule22
  }, {
      start: 7843,
      length: 1,
      convRule: rule23
  }, {
      start: 7844,
      length: 1,
      convRule: rule22
  }, {
      start: 7845,
      length: 1,
      convRule: rule23
  }, {
      start: 7846,
      length: 1,
      convRule: rule22
  }, {
      start: 7847,
      length: 1,
      convRule: rule23
  }, {
      start: 7848,
      length: 1,
      convRule: rule22
  }, {
      start: 7849,
      length: 1,
      convRule: rule23
  }, {
      start: 7850,
      length: 1,
      convRule: rule22
  }, {
      start: 7851,
      length: 1,
      convRule: rule23
  }, {
      start: 7852,
      length: 1,
      convRule: rule22
  }, {
      start: 7853,
      length: 1,
      convRule: rule23
  }, {
      start: 7854,
      length: 1,
      convRule: rule22
  }, {
      start: 7855,
      length: 1,
      convRule: rule23
  }, {
      start: 7856,
      length: 1,
      convRule: rule22
  }, {
      start: 7857,
      length: 1,
      convRule: rule23
  }, {
      start: 7858,
      length: 1,
      convRule: rule22
  }, {
      start: 7859,
      length: 1,
      convRule: rule23
  }, {
      start: 7860,
      length: 1,
      convRule: rule22
  }, {
      start: 7861,
      length: 1,
      convRule: rule23
  }, {
      start: 7862,
      length: 1,
      convRule: rule22
  }, {
      start: 7863,
      length: 1,
      convRule: rule23
  }, {
      start: 7864,
      length: 1,
      convRule: rule22
  }, {
      start: 7865,
      length: 1,
      convRule: rule23
  }, {
      start: 7866,
      length: 1,
      convRule: rule22
  }, {
      start: 7867,
      length: 1,
      convRule: rule23
  }, {
      start: 7868,
      length: 1,
      convRule: rule22
  }, {
      start: 7869,
      length: 1,
      convRule: rule23
  }, {
      start: 7870,
      length: 1,
      convRule: rule22
  }, {
      start: 7871,
      length: 1,
      convRule: rule23
  }, {
      start: 7872,
      length: 1,
      convRule: rule22
  }, {
      start: 7873,
      length: 1,
      convRule: rule23
  }, {
      start: 7874,
      length: 1,
      convRule: rule22
  }, {
      start: 7875,
      length: 1,
      convRule: rule23
  }, {
      start: 7876,
      length: 1,
      convRule: rule22
  }, {
      start: 7877,
      length: 1,
      convRule: rule23
  }, {
      start: 7878,
      length: 1,
      convRule: rule22
  }, {
      start: 7879,
      length: 1,
      convRule: rule23
  }, {
      start: 7880,
      length: 1,
      convRule: rule22
  }, {
      start: 7881,
      length: 1,
      convRule: rule23
  }, {
      start: 7882,
      length: 1,
      convRule: rule22
  }, {
      start: 7883,
      length: 1,
      convRule: rule23
  }, {
      start: 7884,
      length: 1,
      convRule: rule22
  }, {
      start: 7885,
      length: 1,
      convRule: rule23
  }, {
      start: 7886,
      length: 1,
      convRule: rule22
  }, {
      start: 7887,
      length: 1,
      convRule: rule23
  }, {
      start: 7888,
      length: 1,
      convRule: rule22
  }, {
      start: 7889,
      length: 1,
      convRule: rule23
  }, {
      start: 7890,
      length: 1,
      convRule: rule22
  }, {
      start: 7891,
      length: 1,
      convRule: rule23
  }, {
      start: 7892,
      length: 1,
      convRule: rule22
  }, {
      start: 7893,
      length: 1,
      convRule: rule23
  }, {
      start: 7894,
      length: 1,
      convRule: rule22
  }, {
      start: 7895,
      length: 1,
      convRule: rule23
  }, {
      start: 7896,
      length: 1,
      convRule: rule22
  }, {
      start: 7897,
      length: 1,
      convRule: rule23
  }, {
      start: 7898,
      length: 1,
      convRule: rule22
  }, {
      start: 7899,
      length: 1,
      convRule: rule23
  }, {
      start: 7900,
      length: 1,
      convRule: rule22
  }, {
      start: 7901,
      length: 1,
      convRule: rule23
  }, {
      start: 7902,
      length: 1,
      convRule: rule22
  }, {
      start: 7903,
      length: 1,
      convRule: rule23
  }, {
      start: 7904,
      length: 1,
      convRule: rule22
  }, {
      start: 7905,
      length: 1,
      convRule: rule23
  }, {
      start: 7906,
      length: 1,
      convRule: rule22
  }, {
      start: 7907,
      length: 1,
      convRule: rule23
  }, {
      start: 7908,
      length: 1,
      convRule: rule22
  }, {
      start: 7909,
      length: 1,
      convRule: rule23
  }, {
      start: 7910,
      length: 1,
      convRule: rule22
  }, {
      start: 7911,
      length: 1,
      convRule: rule23
  }, {
      start: 7912,
      length: 1,
      convRule: rule22
  }, {
      start: 7913,
      length: 1,
      convRule: rule23
  }, {
      start: 7914,
      length: 1,
      convRule: rule22
  }, {
      start: 7915,
      length: 1,
      convRule: rule23
  }, {
      start: 7916,
      length: 1,
      convRule: rule22
  }, {
      start: 7917,
      length: 1,
      convRule: rule23
  }, {
      start: 7918,
      length: 1,
      convRule: rule22
  }, {
      start: 7919,
      length: 1,
      convRule: rule23
  }, {
      start: 7920,
      length: 1,
      convRule: rule22
  }, {
      start: 7921,
      length: 1,
      convRule: rule23
  }, {
      start: 7922,
      length: 1,
      convRule: rule22
  }, {
      start: 7923,
      length: 1,
      convRule: rule23
  }, {
      start: 7924,
      length: 1,
      convRule: rule22
  }, {
      start: 7925,
      length: 1,
      convRule: rule23
  }, {
      start: 7926,
      length: 1,
      convRule: rule22
  }, {
      start: 7927,
      length: 1,
      convRule: rule23
  }, {
      start: 7928,
      length: 1,
      convRule: rule22
  }, {
      start: 7929,
      length: 1,
      convRule: rule23
  }, {
      start: 7930,
      length: 1,
      convRule: rule22
  }, {
      start: 7931,
      length: 1,
      convRule: rule23
  }, {
      start: 7932,
      length: 1,
      convRule: rule22
  }, {
      start: 7933,
      length: 1,
      convRule: rule23
  }, {
      start: 7934,
      length: 1,
      convRule: rule22
  }, {
      start: 7935,
      length: 1,
      convRule: rule23
  }, {
      start: 7936,
      length: 8,
      convRule: rule143
  }, {
      start: 7944,
      length: 8,
      convRule: rule144
  }, {
      start: 7952,
      length: 6,
      convRule: rule143
  }, {
      start: 7960,
      length: 6,
      convRule: rule144
  }, {
      start: 7968,
      length: 8,
      convRule: rule143
  }, {
      start: 7976,
      length: 8,
      convRule: rule144
  }, {
      start: 7984,
      length: 8,
      convRule: rule143
  }, {
      start: 7992,
      length: 8,
      convRule: rule144
  }, {
      start: 8000,
      length: 6,
      convRule: rule143
  }, {
      start: 8008,
      length: 6,
      convRule: rule144
  }, {
      start: 8016,
      length: 1,
      convRule: rule20
  }, {
      start: 8017,
      length: 1,
      convRule: rule143
  }, {
      start: 8018,
      length: 1,
      convRule: rule20
  }, {
      start: 8019,
      length: 1,
      convRule: rule143
  }, {
      start: 8020,
      length: 1,
      convRule: rule20
  }, {
      start: 8021,
      length: 1,
      convRule: rule143
  }, {
      start: 8022,
      length: 1,
      convRule: rule20
  }, {
      start: 8023,
      length: 1,
      convRule: rule143
  }, {
      start: 8025,
      length: 1,
      convRule: rule144
  }, {
      start: 8027,
      length: 1,
      convRule: rule144
  }, {
      start: 8029,
      length: 1,
      convRule: rule144
  }, {
      start: 8031,
      length: 1,
      convRule: rule144
  }, {
      start: 8032,
      length: 8,
      convRule: rule143
  }, {
      start: 8040,
      length: 8,
      convRule: rule144
  }, {
      start: 8048,
      length: 2,
      convRule: rule145
  }, {
      start: 8050,
      length: 4,
      convRule: rule146
  }, {
      start: 8054,
      length: 2,
      convRule: rule147
  }, {
      start: 8056,
      length: 2,
      convRule: rule148
  }, {
      start: 8058,
      length: 2,
      convRule: rule149
  }, {
      start: 8060,
      length: 2,
      convRule: rule150
  }, {
      start: 8064,
      length: 8,
      convRule: rule143
  }, {
      start: 8072,
      length: 8,
      convRule: rule151
  }, {
      start: 8080,
      length: 8,
      convRule: rule143
  }, {
      start: 8088,
      length: 8,
      convRule: rule151
  }, {
      start: 8096,
      length: 8,
      convRule: rule143
  }, {
      start: 8104,
      length: 8,
      convRule: rule151
  }, {
      start: 8112,
      length: 2,
      convRule: rule143
  }, {
      start: 8114,
      length: 1,
      convRule: rule20
  }, {
      start: 8115,
      length: 1,
      convRule: rule152
  }, {
      start: 8116,
      length: 1,
      convRule: rule20
  }, {
      start: 8118,
      length: 2,
      convRule: rule20
  }, {
      start: 8120,
      length: 2,
      convRule: rule144
  }, {
      start: 8122,
      length: 2,
      convRule: rule153
  }, {
      start: 8124,
      length: 1,
      convRule: rule154
  }, {
      start: 8125,
      length: 1,
      convRule: rule10
  }, {
      start: 8126,
      length: 1,
      convRule: rule155
  }, {
      start: 8127,
      length: 3,
      convRule: rule10
  }, {
      start: 8130,
      length: 1,
      convRule: rule20
  }, {
      start: 8131,
      length: 1,
      convRule: rule152
  }, {
      start: 8132,
      length: 1,
      convRule: rule20
  }, {
      start: 8134,
      length: 2,
      convRule: rule20
  }, {
      start: 8136,
      length: 4,
      convRule: rule156
  }, {
      start: 8140,
      length: 1,
      convRule: rule154
  }, {
      start: 8141,
      length: 3,
      convRule: rule10
  }, {
      start: 8144,
      length: 2,
      convRule: rule143
  }, {
      start: 8146,
      length: 2,
      convRule: rule20
  }, {
      start: 8150,
      length: 2,
      convRule: rule20
  }, {
      start: 8152,
      length: 2,
      convRule: rule144
  }, {
      start: 8154,
      length: 2,
      convRule: rule157
  }, {
      start: 8157,
      length: 3,
      convRule: rule10
  }, {
      start: 8160,
      length: 2,
      convRule: rule143
  }, {
      start: 8162,
      length: 3,
      convRule: rule20
  }, {
      start: 8165,
      length: 1,
      convRule: rule113
  }, {
      start: 8166,
      length: 2,
      convRule: rule20
  }, {
      start: 8168,
      length: 2,
      convRule: rule144
  }, {
      start: 8170,
      length: 2,
      convRule: rule158
  }, {
      start: 8172,
      length: 1,
      convRule: rule117
  }, {
      start: 8173,
      length: 3,
      convRule: rule10
  }, {
      start: 8178,
      length: 1,
      convRule: rule20
  }, {
      start: 8179,
      length: 1,
      convRule: rule152
  }, {
      start: 8180,
      length: 1,
      convRule: rule20
  }, {
      start: 8182,
      length: 2,
      convRule: rule20
  }, {
      start: 8184,
      length: 2,
      convRule: rule159
  }, {
      start: 8186,
      length: 2,
      convRule: rule160
  }, {
      start: 8188,
      length: 1,
      convRule: rule154
  }, {
      start: 8189,
      length: 2,
      convRule: rule10
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8203,
      length: 5,
      convRule: rule16
  }, {
      start: 8208,
      length: 6,
      convRule: rule7
  }, {
      start: 8214,
      length: 2,
      convRule: rule2
  }, {
      start: 8216,
      length: 1,
      convRule: rule15
  }, {
      start: 8217,
      length: 1,
      convRule: rule19
  }, {
      start: 8218,
      length: 1,
      convRule: rule4
  }, {
      start: 8219,
      length: 2,
      convRule: rule15
  }, {
      start: 8221,
      length: 1,
      convRule: rule19
  }, {
      start: 8222,
      length: 1,
      convRule: rule4
  }, {
      start: 8223,
      length: 1,
      convRule: rule15
  }, {
      start: 8224,
      length: 8,
      convRule: rule2
  }, {
      start: 8232,
      length: 1,
      convRule: rule161
  }, {
      start: 8233,
      length: 1,
      convRule: rule162
  }, {
      start: 8234,
      length: 5,
      convRule: rule16
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8240,
      length: 9,
      convRule: rule2
  }, {
      start: 8249,
      length: 1,
      convRule: rule15
  }, {
      start: 8250,
      length: 1,
      convRule: rule19
  }, {
      start: 8251,
      length: 4,
      convRule: rule2
  }, {
      start: 8255,
      length: 2,
      convRule: rule11
  }, {
      start: 8257,
      length: 3,
      convRule: rule2
  }, {
      start: 8260,
      length: 1,
      convRule: rule6
  }, {
      start: 8261,
      length: 1,
      convRule: rule4
  }, {
      start: 8262,
      length: 1,
      convRule: rule5
  }, {
      start: 8263,
      length: 11,
      convRule: rule2
  }, {
      start: 8274,
      length: 1,
      convRule: rule6
  }, {
      start: 8275,
      length: 1,
      convRule: rule2
  }, {
      start: 8276,
      length: 1,
      convRule: rule11
  }, {
      start: 8277,
      length: 10,
      convRule: rule2
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 8288,
      length: 5,
      convRule: rule16
  }, {
      start: 8294,
      length: 10,
      convRule: rule16
  }, {
      start: 8304,
      length: 1,
      convRule: rule17
  }, {
      start: 8305,
      length: 1,
      convRule: rule91
  }, {
      start: 8308,
      length: 6,
      convRule: rule17
  }, {
      start: 8314,
      length: 3,
      convRule: rule6
  }, {
      start: 8317,
      length: 1,
      convRule: rule4
  }, {
      start: 8318,
      length: 1,
      convRule: rule5
  }, {
      start: 8319,
      length: 1,
      convRule: rule91
  }, {
      start: 8320,
      length: 10,
      convRule: rule17
  }, {
      start: 8330,
      length: 3,
      convRule: rule6
  }, {
      start: 8333,
      length: 1,
      convRule: rule4
  }, {
      start: 8334,
      length: 1,
      convRule: rule5
  }, {
      start: 8336,
      length: 13,
      convRule: rule91
  }, {
      start: 8352,
      length: 32,
      convRule: rule3
  }, {
      start: 8400,
      length: 13,
      convRule: rule92
  }, {
      start: 8413,
      length: 4,
      convRule: rule119
  }, {
      start: 8417,
      length: 1,
      convRule: rule92
  }, {
      start: 8418,
      length: 3,
      convRule: rule119
  }, {
      start: 8421,
      length: 12,
      convRule: rule92
  }, {
      start: 8448,
      length: 2,
      convRule: rule13
  }, {
      start: 8450,
      length: 1,
      convRule: rule107
  }, {
      start: 8451,
      length: 4,
      convRule: rule13
  }, {
      start: 8455,
      length: 1,
      convRule: rule107
  }, {
      start: 8456,
      length: 2,
      convRule: rule13
  }, {
      start: 8458,
      length: 1,
      convRule: rule20
  }, {
      start: 8459,
      length: 3,
      convRule: rule107
  }, {
      start: 8462,
      length: 2,
      convRule: rule20
  }, {
      start: 8464,
      length: 3,
      convRule: rule107
  }, {
      start: 8467,
      length: 1,
      convRule: rule20
  }, {
      start: 8468,
      length: 1,
      convRule: rule13
  }, {
      start: 8469,
      length: 1,
      convRule: rule107
  }, {
      start: 8470,
      length: 2,
      convRule: rule13
  }, {
      start: 8472,
      length: 1,
      convRule: rule6
  }, {
      start: 8473,
      length: 5,
      convRule: rule107
  }, {
      start: 8478,
      length: 6,
      convRule: rule13
  }, {
      start: 8484,
      length: 1,
      convRule: rule107
  }, {
      start: 8485,
      length: 1,
      convRule: rule13
  }, {
      start: 8486,
      length: 1,
      convRule: rule163
  }, {
      start: 8487,
      length: 1,
      convRule: rule13
  }, {
      start: 8488,
      length: 1,
      convRule: rule107
  }, {
      start: 8489,
      length: 1,
      convRule: rule13
  }, {
      start: 8490,
      length: 1,
      convRule: rule164
  }, {
      start: 8491,
      length: 1,
      convRule: rule165
  }, {
      start: 8492,
      length: 2,
      convRule: rule107
  }, {
      start: 8494,
      length: 1,
      convRule: rule13
  }, {
      start: 8495,
      length: 1,
      convRule: rule20
  }, {
      start: 8496,
      length: 2,
      convRule: rule107
  }, {
      start: 8498,
      length: 1,
      convRule: rule166
  }, {
      start: 8499,
      length: 1,
      convRule: rule107
  }, {
      start: 8500,
      length: 1,
      convRule: rule20
  }, {
      start: 8501,
      length: 4,
      convRule: rule14
  }, {
      start: 8505,
      length: 1,
      convRule: rule20
  }, {
      start: 8506,
      length: 2,
      convRule: rule13
  }, {
      start: 8508,
      length: 2,
      convRule: rule20
  }, {
      start: 8510,
      length: 2,
      convRule: rule107
  }, {
      start: 8512,
      length: 5,
      convRule: rule6
  }, {
      start: 8517,
      length: 1,
      convRule: rule107
  }, {
      start: 8518,
      length: 4,
      convRule: rule20
  }, {
      start: 8522,
      length: 1,
      convRule: rule13
  }, {
      start: 8523,
      length: 1,
      convRule: rule6
  }, {
      start: 8524,
      length: 2,
      convRule: rule13
  }, {
      start: 8526,
      length: 1,
      convRule: rule167
  }, {
      start: 8527,
      length: 1,
      convRule: rule13
  }, {
      start: 8528,
      length: 16,
      convRule: rule17
  }, {
      start: 8544,
      length: 16,
      convRule: rule168
  }, {
      start: 8560,
      length: 16,
      convRule: rule169
  }, {
      start: 8576,
      length: 3,
      convRule: rule128
  }, {
      start: 8579,
      length: 1,
      convRule: rule22
  }, {
      start: 8580,
      length: 1,
      convRule: rule23
  }, {
      start: 8581,
      length: 4,
      convRule: rule128
  }, {
      start: 8585,
      length: 1,
      convRule: rule17
  }, {
      start: 8586,
      length: 2,
      convRule: rule13
  }, {
      start: 8592,
      length: 5,
      convRule: rule6
  }, {
      start: 8597,
      length: 5,
      convRule: rule13
  }, {
      start: 8602,
      length: 2,
      convRule: rule6
  }, {
      start: 8604,
      length: 4,
      convRule: rule13
  }, {
      start: 8608,
      length: 1,
      convRule: rule6
  }, {
      start: 8609,
      length: 2,
      convRule: rule13
  }, {
      start: 8611,
      length: 1,
      convRule: rule6
  }, {
      start: 8612,
      length: 2,
      convRule: rule13
  }, {
      start: 8614,
      length: 1,
      convRule: rule6
  }, {
      start: 8615,
      length: 7,
      convRule: rule13
  }, {
      start: 8622,
      length: 1,
      convRule: rule6
  }, {
      start: 8623,
      length: 31,
      convRule: rule13
  }, {
      start: 8654,
      length: 2,
      convRule: rule6
  }, {
      start: 8656,
      length: 2,
      convRule: rule13
  }, {
      start: 8658,
      length: 1,
      convRule: rule6
  }, {
      start: 8659,
      length: 1,
      convRule: rule13
  }, {
      start: 8660,
      length: 1,
      convRule: rule6
  }, {
      start: 8661,
      length: 31,
      convRule: rule13
  }, {
      start: 8692,
      length: 268,
      convRule: rule6
  }, {
      start: 8960,
      length: 8,
      convRule: rule13
  }, {
      start: 8968,
      length: 1,
      convRule: rule4
  }, {
      start: 8969,
      length: 1,
      convRule: rule5
  }, {
      start: 8970,
      length: 1,
      convRule: rule4
  }, {
      start: 8971,
      length: 1,
      convRule: rule5
  }, {
      start: 8972,
      length: 20,
      convRule: rule13
  }, {
      start: 8992,
      length: 2,
      convRule: rule6
  }, {
      start: 8994,
      length: 7,
      convRule: rule13
  }, {
      start: 9001,
      length: 1,
      convRule: rule4
  }, {
      start: 9002,
      length: 1,
      convRule: rule5
  }, {
      start: 9003,
      length: 81,
      convRule: rule13
  }, {
      start: 9084,
      length: 1,
      convRule: rule6
  }, {
      start: 9085,
      length: 30,
      convRule: rule13
  }, {
      start: 9115,
      length: 25,
      convRule: rule6
  }, {
      start: 9140,
      length: 40,
      convRule: rule13
  }, {
      start: 9180,
      length: 6,
      convRule: rule6
  }, {
      start: 9186,
      length: 69,
      convRule: rule13
  }, {
      start: 9280,
      length: 11,
      convRule: rule13
  }, {
      start: 9312,
      length: 60,
      convRule: rule17
  }, {
      start: 9372,
      length: 26,
      convRule: rule13
  }, {
      start: 9398,
      length: 26,
      convRule: rule170
  }, {
      start: 9424,
      length: 26,
      convRule: rule171
  }, {
      start: 9450,
      length: 22,
      convRule: rule17
  }, {
      start: 9472,
      length: 183,
      convRule: rule13
  }, {
      start: 9655,
      length: 1,
      convRule: rule6
  }, {
      start: 9656,
      length: 9,
      convRule: rule13
  }, {
      start: 9665,
      length: 1,
      convRule: rule6
  }, {
      start: 9666,
      length: 54,
      convRule: rule13
  }, {
      start: 9720,
      length: 8,
      convRule: rule6
  }, {
      start: 9728,
      length: 111,
      convRule: rule13
  }, {
      start: 9839,
      length: 1,
      convRule: rule6
  }, {
      start: 9840,
      length: 248,
      convRule: rule13
  }, {
      start: 10088,
      length: 1,
      convRule: rule4
  }, {
      start: 10089,
      length: 1,
      convRule: rule5
  }, {
      start: 10090,
      length: 1,
      convRule: rule4
  }, {
      start: 10091,
      length: 1,
      convRule: rule5
  }, {
      start: 10092,
      length: 1,
      convRule: rule4
  }, {
      start: 10093,
      length: 1,
      convRule: rule5
  }, {
      start: 10094,
      length: 1,
      convRule: rule4
  }, {
      start: 10095,
      length: 1,
      convRule: rule5
  }, {
      start: 10096,
      length: 1,
      convRule: rule4
  }, {
      start: 10097,
      length: 1,
      convRule: rule5
  }, {
      start: 10098,
      length: 1,
      convRule: rule4
  }, {
      start: 10099,
      length: 1,
      convRule: rule5
  }, {
      start: 10100,
      length: 1,
      convRule: rule4
  }, {
      start: 10101,
      length: 1,
      convRule: rule5
  }, {
      start: 10102,
      length: 30,
      convRule: rule17
  }, {
      start: 10132,
      length: 44,
      convRule: rule13
  }, {
      start: 10176,
      length: 5,
      convRule: rule6
  }, {
      start: 10181,
      length: 1,
      convRule: rule4
  }, {
      start: 10182,
      length: 1,
      convRule: rule5
  }, {
      start: 10183,
      length: 31,
      convRule: rule6
  }, {
      start: 10214,
      length: 1,
      convRule: rule4
  }, {
      start: 10215,
      length: 1,
      convRule: rule5
  }, {
      start: 10216,
      length: 1,
      convRule: rule4
  }, {
      start: 10217,
      length: 1,
      convRule: rule5
  }, {
      start: 10218,
      length: 1,
      convRule: rule4
  }, {
      start: 10219,
      length: 1,
      convRule: rule5
  }, {
      start: 10220,
      length: 1,
      convRule: rule4
  }, {
      start: 10221,
      length: 1,
      convRule: rule5
  }, {
      start: 10222,
      length: 1,
      convRule: rule4
  }, {
      start: 10223,
      length: 1,
      convRule: rule5
  }, {
      start: 10224,
      length: 16,
      convRule: rule6
  }, {
      start: 10240,
      length: 256,
      convRule: rule13
  }, {
      start: 10496,
      length: 131,
      convRule: rule6
  }, {
      start: 10627,
      length: 1,
      convRule: rule4
  }, {
      start: 10628,
      length: 1,
      convRule: rule5
  }, {
      start: 10629,
      length: 1,
      convRule: rule4
  }, {
      start: 10630,
      length: 1,
      convRule: rule5
  }, {
      start: 10631,
      length: 1,
      convRule: rule4
  }, {
      start: 10632,
      length: 1,
      convRule: rule5
  }, {
      start: 10633,
      length: 1,
      convRule: rule4
  }, {
      start: 10634,
      length: 1,
      convRule: rule5
  }, {
      start: 10635,
      length: 1,
      convRule: rule4
  }, {
      start: 10636,
      length: 1,
      convRule: rule5
  }, {
      start: 10637,
      length: 1,
      convRule: rule4
  }, {
      start: 10638,
      length: 1,
      convRule: rule5
  }, {
      start: 10639,
      length: 1,
      convRule: rule4
  }, {
      start: 10640,
      length: 1,
      convRule: rule5
  }, {
      start: 10641,
      length: 1,
      convRule: rule4
  }, {
      start: 10642,
      length: 1,
      convRule: rule5
  }, {
      start: 10643,
      length: 1,
      convRule: rule4
  }, {
      start: 10644,
      length: 1,
      convRule: rule5
  }, {
      start: 10645,
      length: 1,
      convRule: rule4
  }, {
      start: 10646,
      length: 1,
      convRule: rule5
  }, {
      start: 10647,
      length: 1,
      convRule: rule4
  }, {
      start: 10648,
      length: 1,
      convRule: rule5
  }, {
      start: 10649,
      length: 63,
      convRule: rule6
  }, {
      start: 10712,
      length: 1,
      convRule: rule4
  }, {
      start: 10713,
      length: 1,
      convRule: rule5
  }, {
      start: 10714,
      length: 1,
      convRule: rule4
  }, {
      start: 10715,
      length: 1,
      convRule: rule5
  }, {
      start: 10716,
      length: 32,
      convRule: rule6
  }, {
      start: 10748,
      length: 1,
      convRule: rule4
  }, {
      start: 10749,
      length: 1,
      convRule: rule5
  }, {
      start: 10750,
      length: 258,
      convRule: rule6
  }, {
      start: 11008,
      length: 48,
      convRule: rule13
  }, {
      start: 11056,
      length: 21,
      convRule: rule6
  }, {
      start: 11077,
      length: 2,
      convRule: rule13
  }, {
      start: 11079,
      length: 6,
      convRule: rule6
  }, {
      start: 11085,
      length: 39,
      convRule: rule13
  }, {
      start: 11126,
      length: 32,
      convRule: rule13
  }, {
      start: 11159,
      length: 105,
      convRule: rule13
  }, {
      start: 11264,
      length: 47,
      convRule: rule122
  }, {
      start: 11312,
      length: 47,
      convRule: rule123
  }, {
      start: 11360,
      length: 1,
      convRule: rule22
  }, {
      start: 11361,
      length: 1,
      convRule: rule23
  }, {
      start: 11362,
      length: 1,
      convRule: rule172
  }, {
      start: 11363,
      length: 1,
      convRule: rule173
  }, {
      start: 11364,
      length: 1,
      convRule: rule174
  }, {
      start: 11365,
      length: 1,
      convRule: rule175
  }, {
      start: 11366,
      length: 1,
      convRule: rule176
  }, {
      start: 11367,
      length: 1,
      convRule: rule22
  }, {
      start: 11368,
      length: 1,
      convRule: rule23
  }, {
      start: 11369,
      length: 1,
      convRule: rule22
  }, {
      start: 11370,
      length: 1,
      convRule: rule23
  }, {
      start: 11371,
      length: 1,
      convRule: rule22
  }, {
      start: 11372,
      length: 1,
      convRule: rule23
  }, {
      start: 11373,
      length: 1,
      convRule: rule177
  }, {
      start: 11374,
      length: 1,
      convRule: rule178
  }, {
      start: 11375,
      length: 1,
      convRule: rule179
  }, {
      start: 11376,
      length: 1,
      convRule: rule180
  }, {
      start: 11377,
      length: 1,
      convRule: rule20
  }, {
      start: 11378,
      length: 1,
      convRule: rule22
  }, {
      start: 11379,
      length: 1,
      convRule: rule23
  }, {
      start: 11380,
      length: 1,
      convRule: rule20
  }, {
      start: 11381,
      length: 1,
      convRule: rule22
  }, {
      start: 11382,
      length: 1,
      convRule: rule23
  }, {
      start: 11383,
      length: 5,
      convRule: rule20
  }, {
      start: 11388,
      length: 2,
      convRule: rule91
  }, {
      start: 11390,
      length: 2,
      convRule: rule181
  }, {
      start: 11392,
      length: 1,
      convRule: rule22
  }, {
      start: 11393,
      length: 1,
      convRule: rule23
  }, {
      start: 11394,
      length: 1,
      convRule: rule22
  }, {
      start: 11395,
      length: 1,
      convRule: rule23
  }, {
      start: 11396,
      length: 1,
      convRule: rule22
  }, {
      start: 11397,
      length: 1,
      convRule: rule23
  }, {
      start: 11398,
      length: 1,
      convRule: rule22
  }, {
      start: 11399,
      length: 1,
      convRule: rule23
  }, {
      start: 11400,
      length: 1,
      convRule: rule22
  }, {
      start: 11401,
      length: 1,
      convRule: rule23
  }, {
      start: 11402,
      length: 1,
      convRule: rule22
  }, {
      start: 11403,
      length: 1,
      convRule: rule23
  }, {
      start: 11404,
      length: 1,
      convRule: rule22
  }, {
      start: 11405,
      length: 1,
      convRule: rule23
  }, {
      start: 11406,
      length: 1,
      convRule: rule22
  }, {
      start: 11407,
      length: 1,
      convRule: rule23
  }, {
      start: 11408,
      length: 1,
      convRule: rule22
  }, {
      start: 11409,
      length: 1,
      convRule: rule23
  }, {
      start: 11410,
      length: 1,
      convRule: rule22
  }, {
      start: 11411,
      length: 1,
      convRule: rule23
  }, {
      start: 11412,
      length: 1,
      convRule: rule22
  }, {
      start: 11413,
      length: 1,
      convRule: rule23
  }, {
      start: 11414,
      length: 1,
      convRule: rule22
  }, {
      start: 11415,
      length: 1,
      convRule: rule23
  }, {
      start: 11416,
      length: 1,
      convRule: rule22
  }, {
      start: 11417,
      length: 1,
      convRule: rule23
  }, {
      start: 11418,
      length: 1,
      convRule: rule22
  }, {
      start: 11419,
      length: 1,
      convRule: rule23
  }, {
      start: 11420,
      length: 1,
      convRule: rule22
  }, {
      start: 11421,
      length: 1,
      convRule: rule23
  }, {
      start: 11422,
      length: 1,
      convRule: rule22
  }, {
      start: 11423,
      length: 1,
      convRule: rule23
  }, {
      start: 11424,
      length: 1,
      convRule: rule22
  }, {
      start: 11425,
      length: 1,
      convRule: rule23
  }, {
      start: 11426,
      length: 1,
      convRule: rule22
  }, {
      start: 11427,
      length: 1,
      convRule: rule23
  }, {
      start: 11428,
      length: 1,
      convRule: rule22
  }, {
      start: 11429,
      length: 1,
      convRule: rule23
  }, {
      start: 11430,
      length: 1,
      convRule: rule22
  }, {
      start: 11431,
      length: 1,
      convRule: rule23
  }, {
      start: 11432,
      length: 1,
      convRule: rule22
  }, {
      start: 11433,
      length: 1,
      convRule: rule23
  }, {
      start: 11434,
      length: 1,
      convRule: rule22
  }, {
      start: 11435,
      length: 1,
      convRule: rule23
  }, {
      start: 11436,
      length: 1,
      convRule: rule22
  }, {
      start: 11437,
      length: 1,
      convRule: rule23
  }, {
      start: 11438,
      length: 1,
      convRule: rule22
  }, {
      start: 11439,
      length: 1,
      convRule: rule23
  }, {
      start: 11440,
      length: 1,
      convRule: rule22
  }, {
      start: 11441,
      length: 1,
      convRule: rule23
  }, {
      start: 11442,
      length: 1,
      convRule: rule22
  }, {
      start: 11443,
      length: 1,
      convRule: rule23
  }, {
      start: 11444,
      length: 1,
      convRule: rule22
  }, {
      start: 11445,
      length: 1,
      convRule: rule23
  }, {
      start: 11446,
      length: 1,
      convRule: rule22
  }, {
      start: 11447,
      length: 1,
      convRule: rule23
  }, {
      start: 11448,
      length: 1,
      convRule: rule22
  }, {
      start: 11449,
      length: 1,
      convRule: rule23
  }, {
      start: 11450,
      length: 1,
      convRule: rule22
  }, {
      start: 11451,
      length: 1,
      convRule: rule23
  }, {
      start: 11452,
      length: 1,
      convRule: rule22
  }, {
      start: 11453,
      length: 1,
      convRule: rule23
  }, {
      start: 11454,
      length: 1,
      convRule: rule22
  }, {
      start: 11455,
      length: 1,
      convRule: rule23
  }, {
      start: 11456,
      length: 1,
      convRule: rule22
  }, {
      start: 11457,
      length: 1,
      convRule: rule23
  }, {
      start: 11458,
      length: 1,
      convRule: rule22
  }, {
      start: 11459,
      length: 1,
      convRule: rule23
  }, {
      start: 11460,
      length: 1,
      convRule: rule22
  }, {
      start: 11461,
      length: 1,
      convRule: rule23
  }, {
      start: 11462,
      length: 1,
      convRule: rule22
  }, {
      start: 11463,
      length: 1,
      convRule: rule23
  }, {
      start: 11464,
      length: 1,
      convRule: rule22
  }, {
      start: 11465,
      length: 1,
      convRule: rule23
  }, {
      start: 11466,
      length: 1,
      convRule: rule22
  }, {
      start: 11467,
      length: 1,
      convRule: rule23
  }, {
      start: 11468,
      length: 1,
      convRule: rule22
  }, {
      start: 11469,
      length: 1,
      convRule: rule23
  }, {
      start: 11470,
      length: 1,
      convRule: rule22
  }, {
      start: 11471,
      length: 1,
      convRule: rule23
  }, {
      start: 11472,
      length: 1,
      convRule: rule22
  }, {
      start: 11473,
      length: 1,
      convRule: rule23
  }, {
      start: 11474,
      length: 1,
      convRule: rule22
  }, {
      start: 11475,
      length: 1,
      convRule: rule23
  }, {
      start: 11476,
      length: 1,
      convRule: rule22
  }, {
      start: 11477,
      length: 1,
      convRule: rule23
  }, {
      start: 11478,
      length: 1,
      convRule: rule22
  }, {
      start: 11479,
      length: 1,
      convRule: rule23
  }, {
      start: 11480,
      length: 1,
      convRule: rule22
  }, {
      start: 11481,
      length: 1,
      convRule: rule23
  }, {
      start: 11482,
      length: 1,
      convRule: rule22
  }, {
      start: 11483,
      length: 1,
      convRule: rule23
  }, {
      start: 11484,
      length: 1,
      convRule: rule22
  }, {
      start: 11485,
      length: 1,
      convRule: rule23
  }, {
      start: 11486,
      length: 1,
      convRule: rule22
  }, {
      start: 11487,
      length: 1,
      convRule: rule23
  }, {
      start: 11488,
      length: 1,
      convRule: rule22
  }, {
      start: 11489,
      length: 1,
      convRule: rule23
  }, {
      start: 11490,
      length: 1,
      convRule: rule22
  }, {
      start: 11491,
      length: 1,
      convRule: rule23
  }, {
      start: 11492,
      length: 1,
      convRule: rule20
  }, {
      start: 11493,
      length: 6,
      convRule: rule13
  }, {
      start: 11499,
      length: 1,
      convRule: rule22
  }, {
      start: 11500,
      length: 1,
      convRule: rule23
  }, {
      start: 11501,
      length: 1,
      convRule: rule22
  }, {
      start: 11502,
      length: 1,
      convRule: rule23
  }, {
      start: 11503,
      length: 3,
      convRule: rule92
  }, {
      start: 11506,
      length: 1,
      convRule: rule22
  }, {
      start: 11507,
      length: 1,
      convRule: rule23
  }, {
      start: 11513,
      length: 4,
      convRule: rule2
  }, {
      start: 11517,
      length: 1,
      convRule: rule17
  }, {
      start: 11518,
      length: 2,
      convRule: rule2
  }, {
      start: 11520,
      length: 38,
      convRule: rule182
  }, {
      start: 11559,
      length: 1,
      convRule: rule182
  }, {
      start: 11565,
      length: 1,
      convRule: rule182
  }, {
      start: 11568,
      length: 56,
      convRule: rule14
  }, {
      start: 11631,
      length: 1,
      convRule: rule91
  }, {
      start: 11632,
      length: 1,
      convRule: rule2
  }, {
      start: 11647,
      length: 1,
      convRule: rule92
  }, {
      start: 11648,
      length: 23,
      convRule: rule14
  }, {
      start: 11680,
      length: 7,
      convRule: rule14
  }, {
      start: 11688,
      length: 7,
      convRule: rule14
  }, {
      start: 11696,
      length: 7,
      convRule: rule14
  }, {
      start: 11704,
      length: 7,
      convRule: rule14
  }, {
      start: 11712,
      length: 7,
      convRule: rule14
  }, {
      start: 11720,
      length: 7,
      convRule: rule14
  }, {
      start: 11728,
      length: 7,
      convRule: rule14
  }, {
      start: 11736,
      length: 7,
      convRule: rule14
  }, {
      start: 11744,
      length: 32,
      convRule: rule92
  }, {
      start: 11776,
      length: 2,
      convRule: rule2
  }, {
      start: 11778,
      length: 1,
      convRule: rule15
  }, {
      start: 11779,
      length: 1,
      convRule: rule19
  }, {
      start: 11780,
      length: 1,
      convRule: rule15
  }, {
      start: 11781,
      length: 1,
      convRule: rule19
  }, {
      start: 11782,
      length: 3,
      convRule: rule2
  }, {
      start: 11785,
      length: 1,
      convRule: rule15
  }, {
      start: 11786,
      length: 1,
      convRule: rule19
  }, {
      start: 11787,
      length: 1,
      convRule: rule2
  }, {
      start: 11788,
      length: 1,
      convRule: rule15
  }, {
      start: 11789,
      length: 1,
      convRule: rule19
  }, {
      start: 11790,
      length: 9,
      convRule: rule2
  }, {
      start: 11799,
      length: 1,
      convRule: rule7
  }, {
      start: 11800,
      length: 2,
      convRule: rule2
  }, {
      start: 11802,
      length: 1,
      convRule: rule7
  }, {
      start: 11803,
      length: 1,
      convRule: rule2
  }, {
      start: 11804,
      length: 1,
      convRule: rule15
  }, {
      start: 11805,
      length: 1,
      convRule: rule19
  }, {
      start: 11806,
      length: 2,
      convRule: rule2
  }, {
      start: 11808,
      length: 1,
      convRule: rule15
  }, {
      start: 11809,
      length: 1,
      convRule: rule19
  }, {
      start: 11810,
      length: 1,
      convRule: rule4
  }, {
      start: 11811,
      length: 1,
      convRule: rule5
  }, {
      start: 11812,
      length: 1,
      convRule: rule4
  }, {
      start: 11813,
      length: 1,
      convRule: rule5
  }, {
      start: 11814,
      length: 1,
      convRule: rule4
  }, {
      start: 11815,
      length: 1,
      convRule: rule5
  }, {
      start: 11816,
      length: 1,
      convRule: rule4
  }, {
      start: 11817,
      length: 1,
      convRule: rule5
  }, {
      start: 11818,
      length: 5,
      convRule: rule2
  }, {
      start: 11823,
      length: 1,
      convRule: rule91
  }, {
      start: 11824,
      length: 10,
      convRule: rule2
  }, {
      start: 11834,
      length: 2,
      convRule: rule7
  }, {
      start: 11836,
      length: 4,
      convRule: rule2
  }, {
      start: 11840,
      length: 1,
      convRule: rule7
  }, {
      start: 11841,
      length: 1,
      convRule: rule2
  }, {
      start: 11842,
      length: 1,
      convRule: rule4
  }, {
      start: 11843,
      length: 13,
      convRule: rule2
  }, {
      start: 11856,
      length: 2,
      convRule: rule13
  }, {
      start: 11858,
      length: 1,
      convRule: rule2
  }, {
      start: 11904,
      length: 26,
      convRule: rule13
  }, {
      start: 11931,
      length: 89,
      convRule: rule13
  }, {
      start: 12032,
      length: 214,
      convRule: rule13
  }, {
      start: 12272,
      length: 12,
      convRule: rule13
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  }, {
      start: 12289,
      length: 3,
      convRule: rule2
  }, {
      start: 12292,
      length: 1,
      convRule: rule13
  }, {
      start: 12293,
      length: 1,
      convRule: rule91
  }, {
      start: 12294,
      length: 1,
      convRule: rule14
  }, {
      start: 12295,
      length: 1,
      convRule: rule128
  }, {
      start: 12296,
      length: 1,
      convRule: rule4
  }, {
      start: 12297,
      length: 1,
      convRule: rule5
  }, {
      start: 12298,
      length: 1,
      convRule: rule4
  }, {
      start: 12299,
      length: 1,
      convRule: rule5
  }, {
      start: 12300,
      length: 1,
      convRule: rule4
  }, {
      start: 12301,
      length: 1,
      convRule: rule5
  }, {
      start: 12302,
      length: 1,
      convRule: rule4
  }, {
      start: 12303,
      length: 1,
      convRule: rule5
  }, {
      start: 12304,
      length: 1,
      convRule: rule4
  }, {
      start: 12305,
      length: 1,
      convRule: rule5
  }, {
      start: 12306,
      length: 2,
      convRule: rule13
  }, {
      start: 12308,
      length: 1,
      convRule: rule4
  }, {
      start: 12309,
      length: 1,
      convRule: rule5
  }, {
      start: 12310,
      length: 1,
      convRule: rule4
  }, {
      start: 12311,
      length: 1,
      convRule: rule5
  }, {
      start: 12312,
      length: 1,
      convRule: rule4
  }, {
      start: 12313,
      length: 1,
      convRule: rule5
  }, {
      start: 12314,
      length: 1,
      convRule: rule4
  }, {
      start: 12315,
      length: 1,
      convRule: rule5
  }, {
      start: 12316,
      length: 1,
      convRule: rule7
  }, {
      start: 12317,
      length: 1,
      convRule: rule4
  }, {
      start: 12318,
      length: 2,
      convRule: rule5
  }, {
      start: 12320,
      length: 1,
      convRule: rule13
  }, {
      start: 12321,
      length: 9,
      convRule: rule128
  }, {
      start: 12330,
      length: 4,
      convRule: rule92
  }, {
      start: 12334,
      length: 2,
      convRule: rule124
  }, {
      start: 12336,
      length: 1,
      convRule: rule7
  }, {
      start: 12337,
      length: 5,
      convRule: rule91
  }, {
      start: 12342,
      length: 2,
      convRule: rule13
  }, {
      start: 12344,
      length: 3,
      convRule: rule128
  }, {
      start: 12347,
      length: 1,
      convRule: rule91
  }, {
      start: 12348,
      length: 1,
      convRule: rule14
  }, {
      start: 12349,
      length: 1,
      convRule: rule2
  }, {
      start: 12350,
      length: 2,
      convRule: rule13
  }, {
      start: 12353,
      length: 86,
      convRule: rule14
  }, {
      start: 12441,
      length: 2,
      convRule: rule92
  }, {
      start: 12443,
      length: 2,
      convRule: rule10
  }, {
      start: 12445,
      length: 2,
      convRule: rule91
  }, {
      start: 12447,
      length: 1,
      convRule: rule14
  }, {
      start: 12448,
      length: 1,
      convRule: rule7
  }, {
      start: 12449,
      length: 90,
      convRule: rule14
  }, {
      start: 12539,
      length: 1,
      convRule: rule2
  }, {
      start: 12540,
      length: 3,
      convRule: rule91
  }, {
      start: 12543,
      length: 1,
      convRule: rule14
  }, {
      start: 12549,
      length: 43,
      convRule: rule14
  }, {
      start: 12593,
      length: 94,
      convRule: rule14
  }, {
      start: 12688,
      length: 2,
      convRule: rule13
  }, {
      start: 12690,
      length: 4,
      convRule: rule17
  }, {
      start: 12694,
      length: 10,
      convRule: rule13
  }, {
      start: 12704,
      length: 32,
      convRule: rule14
  }, {
      start: 12736,
      length: 36,
      convRule: rule13
  }, {
      start: 12784,
      length: 16,
      convRule: rule14
  }, {
      start: 12800,
      length: 31,
      convRule: rule13
  }, {
      start: 12832,
      length: 10,
      convRule: rule17
  }, {
      start: 12842,
      length: 30,
      convRule: rule13
  }, {
      start: 12872,
      length: 8,
      convRule: rule17
  }, {
      start: 12880,
      length: 1,
      convRule: rule13
  }, {
      start: 12881,
      length: 15,
      convRule: rule17
  }, {
      start: 12896,
      length: 32,
      convRule: rule13
  }, {
      start: 12928,
      length: 10,
      convRule: rule17
  }, {
      start: 12938,
      length: 39,
      convRule: rule13
  }, {
      start: 12977,
      length: 15,
      convRule: rule17
  }, {
      start: 12992,
      length: 320,
      convRule: rule13
  }, {
      start: 13312,
      length: 6592,
      convRule: rule14
  }, {
      start: 19904,
      length: 64,
      convRule: rule13
  }, {
      start: 19968,
      length: 20989,
      convRule: rule14
  }, {
      start: 40960,
      length: 21,
      convRule: rule14
  }, {
      start: 40981,
      length: 1,
      convRule: rule91
  }, {
      start: 40982,
      length: 1143,
      convRule: rule14
  }, {
      start: 42128,
      length: 55,
      convRule: rule13
  }, {
      start: 42192,
      length: 40,
      convRule: rule14
  }, {
      start: 42232,
      length: 6,
      convRule: rule91
  }, {
      start: 42238,
      length: 2,
      convRule: rule2
  }, {
      start: 42240,
      length: 268,
      convRule: rule14
  }, {
      start: 42508,
      length: 1,
      convRule: rule91
  }, {
      start: 42509,
      length: 3,
      convRule: rule2
  }, {
      start: 42512,
      length: 16,
      convRule: rule14
  }, {
      start: 42528,
      length: 10,
      convRule: rule8
  }, {
      start: 42538,
      length: 2,
      convRule: rule14
  }, {
      start: 42560,
      length: 1,
      convRule: rule22
  }, {
      start: 42561,
      length: 1,
      convRule: rule23
  }, {
      start: 42562,
      length: 1,
      convRule: rule22
  }, {
      start: 42563,
      length: 1,
      convRule: rule23
  }, {
      start: 42564,
      length: 1,
      convRule: rule22
  }, {
      start: 42565,
      length: 1,
      convRule: rule23
  }, {
      start: 42566,
      length: 1,
      convRule: rule22
  }, {
      start: 42567,
      length: 1,
      convRule: rule23
  }, {
      start: 42568,
      length: 1,
      convRule: rule22
  }, {
      start: 42569,
      length: 1,
      convRule: rule23
  }, {
      start: 42570,
      length: 1,
      convRule: rule22
  }, {
      start: 42571,
      length: 1,
      convRule: rule23
  }, {
      start: 42572,
      length: 1,
      convRule: rule22
  }, {
      start: 42573,
      length: 1,
      convRule: rule23
  }, {
      start: 42574,
      length: 1,
      convRule: rule22
  }, {
      start: 42575,
      length: 1,
      convRule: rule23
  }, {
      start: 42576,
      length: 1,
      convRule: rule22
  }, {
      start: 42577,
      length: 1,
      convRule: rule23
  }, {
      start: 42578,
      length: 1,
      convRule: rule22
  }, {
      start: 42579,
      length: 1,
      convRule: rule23
  }, {
      start: 42580,
      length: 1,
      convRule: rule22
  }, {
      start: 42581,
      length: 1,
      convRule: rule23
  }, {
      start: 42582,
      length: 1,
      convRule: rule22
  }, {
      start: 42583,
      length: 1,
      convRule: rule23
  }, {
      start: 42584,
      length: 1,
      convRule: rule22
  }, {
      start: 42585,
      length: 1,
      convRule: rule23
  }, {
      start: 42586,
      length: 1,
      convRule: rule22
  }, {
      start: 42587,
      length: 1,
      convRule: rule23
  }, {
      start: 42588,
      length: 1,
      convRule: rule22
  }, {
      start: 42589,
      length: 1,
      convRule: rule23
  }, {
      start: 42590,
      length: 1,
      convRule: rule22
  }, {
      start: 42591,
      length: 1,
      convRule: rule23
  }, {
      start: 42592,
      length: 1,
      convRule: rule22
  }, {
      start: 42593,
      length: 1,
      convRule: rule23
  }, {
      start: 42594,
      length: 1,
      convRule: rule22
  }, {
      start: 42595,
      length: 1,
      convRule: rule23
  }, {
      start: 42596,
      length: 1,
      convRule: rule22
  }, {
      start: 42597,
      length: 1,
      convRule: rule23
  }, {
      start: 42598,
      length: 1,
      convRule: rule22
  }, {
      start: 42599,
      length: 1,
      convRule: rule23
  }, {
      start: 42600,
      length: 1,
      convRule: rule22
  }, {
      start: 42601,
      length: 1,
      convRule: rule23
  }, {
      start: 42602,
      length: 1,
      convRule: rule22
  }, {
      start: 42603,
      length: 1,
      convRule: rule23
  }, {
      start: 42604,
      length: 1,
      convRule: rule22
  }, {
      start: 42605,
      length: 1,
      convRule: rule23
  }, {
      start: 42606,
      length: 1,
      convRule: rule14
  }, {
      start: 42607,
      length: 1,
      convRule: rule92
  }, {
      start: 42608,
      length: 3,
      convRule: rule119
  }, {
      start: 42611,
      length: 1,
      convRule: rule2
  }, {
      start: 42612,
      length: 10,
      convRule: rule92
  }, {
      start: 42622,
      length: 1,
      convRule: rule2
  }, {
      start: 42623,
      length: 1,
      convRule: rule91
  }, {
      start: 42624,
      length: 1,
      convRule: rule22
  }, {
      start: 42625,
      length: 1,
      convRule: rule23
  }, {
      start: 42626,
      length: 1,
      convRule: rule22
  }, {
      start: 42627,
      length: 1,
      convRule: rule23
  }, {
      start: 42628,
      length: 1,
      convRule: rule22
  }, {
      start: 42629,
      length: 1,
      convRule: rule23
  }, {
      start: 42630,
      length: 1,
      convRule: rule22
  }, {
      start: 42631,
      length: 1,
      convRule: rule23
  }, {
      start: 42632,
      length: 1,
      convRule: rule22
  }, {
      start: 42633,
      length: 1,
      convRule: rule23
  }, {
      start: 42634,
      length: 1,
      convRule: rule22
  }, {
      start: 42635,
      length: 1,
      convRule: rule23
  }, {
      start: 42636,
      length: 1,
      convRule: rule22
  }, {
      start: 42637,
      length: 1,
      convRule: rule23
  }, {
      start: 42638,
      length: 1,
      convRule: rule22
  }, {
      start: 42639,
      length: 1,
      convRule: rule23
  }, {
      start: 42640,
      length: 1,
      convRule: rule22
  }, {
      start: 42641,
      length: 1,
      convRule: rule23
  }, {
      start: 42642,
      length: 1,
      convRule: rule22
  }, {
      start: 42643,
      length: 1,
      convRule: rule23
  }, {
      start: 42644,
      length: 1,
      convRule: rule22
  }, {
      start: 42645,
      length: 1,
      convRule: rule23
  }, {
      start: 42646,
      length: 1,
      convRule: rule22
  }, {
      start: 42647,
      length: 1,
      convRule: rule23
  }, {
      start: 42648,
      length: 1,
      convRule: rule22
  }, {
      start: 42649,
      length: 1,
      convRule: rule23
  }, {
      start: 42650,
      length: 1,
      convRule: rule22
  }, {
      start: 42651,
      length: 1,
      convRule: rule23
  }, {
      start: 42652,
      length: 2,
      convRule: rule91
  }, {
      start: 42654,
      length: 2,
      convRule: rule92
  }, {
      start: 42656,
      length: 70,
      convRule: rule14
  }, {
      start: 42726,
      length: 10,
      convRule: rule128
  }, {
      start: 42736,
      length: 2,
      convRule: rule92
  }, {
      start: 42738,
      length: 6,
      convRule: rule2
  }, {
      start: 42752,
      length: 23,
      convRule: rule10
  }, {
      start: 42775,
      length: 9,
      convRule: rule91
  }, {
      start: 42784,
      length: 2,
      convRule: rule10
  }, {
      start: 42786,
      length: 1,
      convRule: rule22
  }, {
      start: 42787,
      length: 1,
      convRule: rule23
  }, {
      start: 42788,
      length: 1,
      convRule: rule22
  }, {
      start: 42789,
      length: 1,
      convRule: rule23
  }, {
      start: 42790,
      length: 1,
      convRule: rule22
  }, {
      start: 42791,
      length: 1,
      convRule: rule23
  }, {
      start: 42792,
      length: 1,
      convRule: rule22
  }, {
      start: 42793,
      length: 1,
      convRule: rule23
  }, {
      start: 42794,
      length: 1,
      convRule: rule22
  }, {
      start: 42795,
      length: 1,
      convRule: rule23
  }, {
      start: 42796,
      length: 1,
      convRule: rule22
  }, {
      start: 42797,
      length: 1,
      convRule: rule23
  }, {
      start: 42798,
      length: 1,
      convRule: rule22
  }, {
      start: 42799,
      length: 1,
      convRule: rule23
  }, {
      start: 42800,
      length: 2,
      convRule: rule20
  }, {
      start: 42802,
      length: 1,
      convRule: rule22
  }, {
      start: 42803,
      length: 1,
      convRule: rule23
  }, {
      start: 42804,
      length: 1,
      convRule: rule22
  }, {
      start: 42805,
      length: 1,
      convRule: rule23
  }, {
      start: 42806,
      length: 1,
      convRule: rule22
  }, {
      start: 42807,
      length: 1,
      convRule: rule23
  }, {
      start: 42808,
      length: 1,
      convRule: rule22
  }, {
      start: 42809,
      length: 1,
      convRule: rule23
  }, {
      start: 42810,
      length: 1,
      convRule: rule22
  }, {
      start: 42811,
      length: 1,
      convRule: rule23
  }, {
      start: 42812,
      length: 1,
      convRule: rule22
  }, {
      start: 42813,
      length: 1,
      convRule: rule23
  }, {
      start: 42814,
      length: 1,
      convRule: rule22
  }, {
      start: 42815,
      length: 1,
      convRule: rule23
  }, {
      start: 42816,
      length: 1,
      convRule: rule22
  }, {
      start: 42817,
      length: 1,
      convRule: rule23
  }, {
      start: 42818,
      length: 1,
      convRule: rule22
  }, {
      start: 42819,
      length: 1,
      convRule: rule23
  }, {
      start: 42820,
      length: 1,
      convRule: rule22
  }, {
      start: 42821,
      length: 1,
      convRule: rule23
  }, {
      start: 42822,
      length: 1,
      convRule: rule22
  }, {
      start: 42823,
      length: 1,
      convRule: rule23
  }, {
      start: 42824,
      length: 1,
      convRule: rule22
  }, {
      start: 42825,
      length: 1,
      convRule: rule23
  }, {
      start: 42826,
      length: 1,
      convRule: rule22
  }, {
      start: 42827,
      length: 1,
      convRule: rule23
  }, {
      start: 42828,
      length: 1,
      convRule: rule22
  }, {
      start: 42829,
      length: 1,
      convRule: rule23
  }, {
      start: 42830,
      length: 1,
      convRule: rule22
  }, {
      start: 42831,
      length: 1,
      convRule: rule23
  }, {
      start: 42832,
      length: 1,
      convRule: rule22
  }, {
      start: 42833,
      length: 1,
      convRule: rule23
  }, {
      start: 42834,
      length: 1,
      convRule: rule22
  }, {
      start: 42835,
      length: 1,
      convRule: rule23
  }, {
      start: 42836,
      length: 1,
      convRule: rule22
  }, {
      start: 42837,
      length: 1,
      convRule: rule23
  }, {
      start: 42838,
      length: 1,
      convRule: rule22
  }, {
      start: 42839,
      length: 1,
      convRule: rule23
  }, {
      start: 42840,
      length: 1,
      convRule: rule22
  }, {
      start: 42841,
      length: 1,
      convRule: rule23
  }, {
      start: 42842,
      length: 1,
      convRule: rule22
  }, {
      start: 42843,
      length: 1,
      convRule: rule23
  }, {
      start: 42844,
      length: 1,
      convRule: rule22
  }, {
      start: 42845,
      length: 1,
      convRule: rule23
  }, {
      start: 42846,
      length: 1,
      convRule: rule22
  }, {
      start: 42847,
      length: 1,
      convRule: rule23
  }, {
      start: 42848,
      length: 1,
      convRule: rule22
  }, {
      start: 42849,
      length: 1,
      convRule: rule23
  }, {
      start: 42850,
      length: 1,
      convRule: rule22
  }, {
      start: 42851,
      length: 1,
      convRule: rule23
  }, {
      start: 42852,
      length: 1,
      convRule: rule22
  }, {
      start: 42853,
      length: 1,
      convRule: rule23
  }, {
      start: 42854,
      length: 1,
      convRule: rule22
  }, {
      start: 42855,
      length: 1,
      convRule: rule23
  }, {
      start: 42856,
      length: 1,
      convRule: rule22
  }, {
      start: 42857,
      length: 1,
      convRule: rule23
  }, {
      start: 42858,
      length: 1,
      convRule: rule22
  }, {
      start: 42859,
      length: 1,
      convRule: rule23
  }, {
      start: 42860,
      length: 1,
      convRule: rule22
  }, {
      start: 42861,
      length: 1,
      convRule: rule23
  }, {
      start: 42862,
      length: 1,
      convRule: rule22
  }, {
      start: 42863,
      length: 1,
      convRule: rule23
  }, {
      start: 42864,
      length: 1,
      convRule: rule91
  }, {
      start: 42865,
      length: 8,
      convRule: rule20
  }, {
      start: 42873,
      length: 1,
      convRule: rule22
  }, {
      start: 42874,
      length: 1,
      convRule: rule23
  }, {
      start: 42875,
      length: 1,
      convRule: rule22
  }, {
      start: 42876,
      length: 1,
      convRule: rule23
  }, {
      start: 42877,
      length: 1,
      convRule: rule183
  }, {
      start: 42878,
      length: 1,
      convRule: rule22
  }, {
      start: 42879,
      length: 1,
      convRule: rule23
  }, {
      start: 42880,
      length: 1,
      convRule: rule22
  }, {
      start: 42881,
      length: 1,
      convRule: rule23
  }, {
      start: 42882,
      length: 1,
      convRule: rule22
  }, {
      start: 42883,
      length: 1,
      convRule: rule23
  }, {
      start: 42884,
      length: 1,
      convRule: rule22
  }, {
      start: 42885,
      length: 1,
      convRule: rule23
  }, {
      start: 42886,
      length: 1,
      convRule: rule22
  }, {
      start: 42887,
      length: 1,
      convRule: rule23
  }, {
      start: 42888,
      length: 1,
      convRule: rule91
  }, {
      start: 42889,
      length: 2,
      convRule: rule10
  }, {
      start: 42891,
      length: 1,
      convRule: rule22
  }, {
      start: 42892,
      length: 1,
      convRule: rule23
  }, {
      start: 42893,
      length: 1,
      convRule: rule184
  }, {
      start: 42894,
      length: 1,
      convRule: rule20
  }, {
      start: 42895,
      length: 1,
      convRule: rule14
  }, {
      start: 42896,
      length: 1,
      convRule: rule22
  }, {
      start: 42897,
      length: 1,
      convRule: rule23
  }, {
      start: 42898,
      length: 1,
      convRule: rule22
  }, {
      start: 42899,
      length: 1,
      convRule: rule23
  }, {
      start: 42900,
      length: 1,
      convRule: rule185
  }, {
      start: 42901,
      length: 1,
      convRule: rule20
  }, {
      start: 42902,
      length: 1,
      convRule: rule22
  }, {
      start: 42903,
      length: 1,
      convRule: rule23
  }, {
      start: 42904,
      length: 1,
      convRule: rule22
  }, {
      start: 42905,
      length: 1,
      convRule: rule23
  }, {
      start: 42906,
      length: 1,
      convRule: rule22
  }, {
      start: 42907,
      length: 1,
      convRule: rule23
  }, {
      start: 42908,
      length: 1,
      convRule: rule22
  }, {
      start: 42909,
      length: 1,
      convRule: rule23
  }, {
      start: 42910,
      length: 1,
      convRule: rule22
  }, {
      start: 42911,
      length: 1,
      convRule: rule23
  }, {
      start: 42912,
      length: 1,
      convRule: rule22
  }, {
      start: 42913,
      length: 1,
      convRule: rule23
  }, {
      start: 42914,
      length: 1,
      convRule: rule22
  }, {
      start: 42915,
      length: 1,
      convRule: rule23
  }, {
      start: 42916,
      length: 1,
      convRule: rule22
  }, {
      start: 42917,
      length: 1,
      convRule: rule23
  }, {
      start: 42918,
      length: 1,
      convRule: rule22
  }, {
      start: 42919,
      length: 1,
      convRule: rule23
  }, {
      start: 42920,
      length: 1,
      convRule: rule22
  }, {
      start: 42921,
      length: 1,
      convRule: rule23
  }, {
      start: 42922,
      length: 1,
      convRule: rule186
  }, {
      start: 42923,
      length: 1,
      convRule: rule187
  }, {
      start: 42924,
      length: 1,
      convRule: rule188
  }, {
      start: 42925,
      length: 1,
      convRule: rule189
  }, {
      start: 42926,
      length: 1,
      convRule: rule186
  }, {
      start: 42927,
      length: 1,
      convRule: rule20
  }, {
      start: 42928,
      length: 1,
      convRule: rule190
  }, {
      start: 42929,
      length: 1,
      convRule: rule191
  }, {
      start: 42930,
      length: 1,
      convRule: rule192
  }, {
      start: 42931,
      length: 1,
      convRule: rule193
  }, {
      start: 42932,
      length: 1,
      convRule: rule22
  }, {
      start: 42933,
      length: 1,
      convRule: rule23
  }, {
      start: 42934,
      length: 1,
      convRule: rule22
  }, {
      start: 42935,
      length: 1,
      convRule: rule23
  }, {
      start: 42936,
      length: 1,
      convRule: rule22
  }, {
      start: 42937,
      length: 1,
      convRule: rule23
  }, {
      start: 42938,
      length: 1,
      convRule: rule22
  }, {
      start: 42939,
      length: 1,
      convRule: rule23
  }, {
      start: 42940,
      length: 1,
      convRule: rule22
  }, {
      start: 42941,
      length: 1,
      convRule: rule23
  }, {
      start: 42942,
      length: 1,
      convRule: rule22
  }, {
      start: 42943,
      length: 1,
      convRule: rule23
  }, {
      start: 42946,
      length: 1,
      convRule: rule22
  }, {
      start: 42947,
      length: 1,
      convRule: rule23
  }, {
      start: 42948,
      length: 1,
      convRule: rule194
  }, {
      start: 42949,
      length: 1,
      convRule: rule195
  }, {
      start: 42950,
      length: 1,
      convRule: rule196
  }, {
      start: 42951,
      length: 1,
      convRule: rule22
  }, {
      start: 42952,
      length: 1,
      convRule: rule23
  }, {
      start: 42953,
      length: 1,
      convRule: rule22
  }, {
      start: 42954,
      length: 1,
      convRule: rule23
  }, {
      start: 42997,
      length: 1,
      convRule: rule22
  }, {
      start: 42998,
      length: 1,
      convRule: rule23
  }, {
      start: 42999,
      length: 1,
      convRule: rule14
  }, {
      start: 43000,
      length: 2,
      convRule: rule91
  }, {
      start: 43002,
      length: 1,
      convRule: rule20
  }, {
      start: 43003,
      length: 7,
      convRule: rule14
  }, {
      start: 43010,
      length: 1,
      convRule: rule92
  }, {
      start: 43011,
      length: 3,
      convRule: rule14
  }, {
      start: 43014,
      length: 1,
      convRule: rule92
  }, {
      start: 43015,
      length: 4,
      convRule: rule14
  }, {
      start: 43019,
      length: 1,
      convRule: rule92
  }, {
      start: 43020,
      length: 23,
      convRule: rule14
  }, {
      start: 43043,
      length: 2,
      convRule: rule124
  }, {
      start: 43045,
      length: 2,
      convRule: rule92
  }, {
      start: 43047,
      length: 1,
      convRule: rule124
  }, {
      start: 43048,
      length: 4,
      convRule: rule13
  }, {
      start: 43052,
      length: 1,
      convRule: rule92
  }, {
      start: 43056,
      length: 6,
      convRule: rule17
  }, {
      start: 43062,
      length: 2,
      convRule: rule13
  }, {
      start: 43064,
      length: 1,
      convRule: rule3
  }, {
      start: 43065,
      length: 1,
      convRule: rule13
  }, {
      start: 43072,
      length: 52,
      convRule: rule14
  }, {
      start: 43124,
      length: 4,
      convRule: rule2
  }, {
      start: 43136,
      length: 2,
      convRule: rule124
  }, {
      start: 43138,
      length: 50,
      convRule: rule14
  }, {
      start: 43188,
      length: 16,
      convRule: rule124
  }, {
      start: 43204,
      length: 2,
      convRule: rule92
  }, {
      start: 43214,
      length: 2,
      convRule: rule2
  }, {
      start: 43216,
      length: 10,
      convRule: rule8
  }, {
      start: 43232,
      length: 18,
      convRule: rule92
  }, {
      start: 43250,
      length: 6,
      convRule: rule14
  }, {
      start: 43256,
      length: 3,
      convRule: rule2
  }, {
      start: 43259,
      length: 1,
      convRule: rule14
  }, {
      start: 43260,
      length: 1,
      convRule: rule2
  }, {
      start: 43261,
      length: 2,
      convRule: rule14
  }, {
      start: 43263,
      length: 1,
      convRule: rule92
  }, {
      start: 43264,
      length: 10,
      convRule: rule8
  }, {
      start: 43274,
      length: 28,
      convRule: rule14
  }, {
      start: 43302,
      length: 8,
      convRule: rule92
  }, {
      start: 43310,
      length: 2,
      convRule: rule2
  }, {
      start: 43312,
      length: 23,
      convRule: rule14
  }, {
      start: 43335,
      length: 11,
      convRule: rule92
  }, {
      start: 43346,
      length: 2,
      convRule: rule124
  }, {
      start: 43359,
      length: 1,
      convRule: rule2
  }, {
      start: 43360,
      length: 29,
      convRule: rule14
  }, {
      start: 43392,
      length: 3,
      convRule: rule92
  }, {
      start: 43395,
      length: 1,
      convRule: rule124
  }, {
      start: 43396,
      length: 47,
      convRule: rule14
  }, {
      start: 43443,
      length: 1,
      convRule: rule92
  }, {
      start: 43444,
      length: 2,
      convRule: rule124
  }, {
      start: 43446,
      length: 4,
      convRule: rule92
  }, {
      start: 43450,
      length: 2,
      convRule: rule124
  }, {
      start: 43452,
      length: 2,
      convRule: rule92
  }, {
      start: 43454,
      length: 3,
      convRule: rule124
  }, {
      start: 43457,
      length: 13,
      convRule: rule2
  }, {
      start: 43471,
      length: 1,
      convRule: rule91
  }, {
      start: 43472,
      length: 10,
      convRule: rule8
  }, {
      start: 43486,
      length: 2,
      convRule: rule2
  }, {
      start: 43488,
      length: 5,
      convRule: rule14
  }, {
      start: 43493,
      length: 1,
      convRule: rule92
  }, {
      start: 43494,
      length: 1,
      convRule: rule91
  }, {
      start: 43495,
      length: 9,
      convRule: rule14
  }, {
      start: 43504,
      length: 10,
      convRule: rule8
  }, {
      start: 43514,
      length: 5,
      convRule: rule14
  }, {
      start: 43520,
      length: 41,
      convRule: rule14
  }, {
      start: 43561,
      length: 6,
      convRule: rule92
  }, {
      start: 43567,
      length: 2,
      convRule: rule124
  }, {
      start: 43569,
      length: 2,
      convRule: rule92
  }, {
      start: 43571,
      length: 2,
      convRule: rule124
  }, {
      start: 43573,
      length: 2,
      convRule: rule92
  }, {
      start: 43584,
      length: 3,
      convRule: rule14
  }, {
      start: 43587,
      length: 1,
      convRule: rule92
  }, {
      start: 43588,
      length: 8,
      convRule: rule14
  }, {
      start: 43596,
      length: 1,
      convRule: rule92
  }, {
      start: 43597,
      length: 1,
      convRule: rule124
  }, {
      start: 43600,
      length: 10,
      convRule: rule8
  }, {
      start: 43612,
      length: 4,
      convRule: rule2
  }, {
      start: 43616,
      length: 16,
      convRule: rule14
  }, {
      start: 43632,
      length: 1,
      convRule: rule91
  }, {
      start: 43633,
      length: 6,
      convRule: rule14
  }, {
      start: 43639,
      length: 3,
      convRule: rule13
  }, {
      start: 43642,
      length: 1,
      convRule: rule14
  }, {
      start: 43643,
      length: 1,
      convRule: rule124
  }, {
      start: 43644,
      length: 1,
      convRule: rule92
  }, {
      start: 43645,
      length: 1,
      convRule: rule124
  }, {
      start: 43646,
      length: 50,
      convRule: rule14
  }, {
      start: 43696,
      length: 1,
      convRule: rule92
  }, {
      start: 43697,
      length: 1,
      convRule: rule14
  }, {
      start: 43698,
      length: 3,
      convRule: rule92
  }, {
      start: 43701,
      length: 2,
      convRule: rule14
  }, {
      start: 43703,
      length: 2,
      convRule: rule92
  }, {
      start: 43705,
      length: 5,
      convRule: rule14
  }, {
      start: 43710,
      length: 2,
      convRule: rule92
  }, {
      start: 43712,
      length: 1,
      convRule: rule14
  }, {
      start: 43713,
      length: 1,
      convRule: rule92
  }, {
      start: 43714,
      length: 1,
      convRule: rule14
  }, {
      start: 43739,
      length: 2,
      convRule: rule14
  }, {
      start: 43741,
      length: 1,
      convRule: rule91
  }, {
      start: 43742,
      length: 2,
      convRule: rule2
  }, {
      start: 43744,
      length: 11,
      convRule: rule14
  }, {
      start: 43755,
      length: 1,
      convRule: rule124
  }, {
      start: 43756,
      length: 2,
      convRule: rule92
  }, {
      start: 43758,
      length: 2,
      convRule: rule124
  }, {
      start: 43760,
      length: 2,
      convRule: rule2
  }, {
      start: 43762,
      length: 1,
      convRule: rule14
  }, {
      start: 43763,
      length: 2,
      convRule: rule91
  }, {
      start: 43765,
      length: 1,
      convRule: rule124
  }, {
      start: 43766,
      length: 1,
      convRule: rule92
  }, {
      start: 43777,
      length: 6,
      convRule: rule14
  }, {
      start: 43785,
      length: 6,
      convRule: rule14
  }, {
      start: 43793,
      length: 6,
      convRule: rule14
  }, {
      start: 43808,
      length: 7,
      convRule: rule14
  }, {
      start: 43816,
      length: 7,
      convRule: rule14
  }, {
      start: 43824,
      length: 35,
      convRule: rule20
  }, {
      start: 43859,
      length: 1,
      convRule: rule197
  }, {
      start: 43860,
      length: 7,
      convRule: rule20
  }, {
      start: 43867,
      length: 1,
      convRule: rule10
  }, {
      start: 43868,
      length: 4,
      convRule: rule91
  }, {
      start: 43872,
      length: 9,
      convRule: rule20
  }, {
      start: 43881,
      length: 1,
      convRule: rule91
  }, {
      start: 43882,
      length: 2,
      convRule: rule10
  }, {
      start: 43888,
      length: 80,
      convRule: rule198
  }, {
      start: 43968,
      length: 35,
      convRule: rule14
  }, {
      start: 44003,
      length: 2,
      convRule: rule124
  }, {
      start: 44005,
      length: 1,
      convRule: rule92
  }, {
      start: 44006,
      length: 2,
      convRule: rule124
  }, {
      start: 44008,
      length: 1,
      convRule: rule92
  }, {
      start: 44009,
      length: 2,
      convRule: rule124
  }, {
      start: 44011,
      length: 1,
      convRule: rule2
  }, {
      start: 44012,
      length: 1,
      convRule: rule124
  }, {
      start: 44013,
      length: 1,
      convRule: rule92
  }, {
      start: 44016,
      length: 10,
      convRule: rule8
  }, {
      start: 44032,
      length: 11172,
      convRule: rule14
  }, {
      start: 55216,
      length: 23,
      convRule: rule14
  }, {
      start: 55243,
      length: 49,
      convRule: rule14
  }, {
      start: 55296,
      length: 896,
      convRule: rule199
  }, {
      start: 56192,
      length: 128,
      convRule: rule199
  }, {
      start: 56320,
      length: 1024,
      convRule: rule199
  }, {
      start: 57344,
      length: 6400,
      convRule: rule200
  }, {
      start: 63744,
      length: 366,
      convRule: rule14
  }, {
      start: 64112,
      length: 106,
      convRule: rule14
  }, {
      start: 64256,
      length: 7,
      convRule: rule20
  }, {
      start: 64275,
      length: 5,
      convRule: rule20
  }, {
      start: 64285,
      length: 1,
      convRule: rule14
  }, {
      start: 64286,
      length: 1,
      convRule: rule92
  }, {
      start: 64287,
      length: 10,
      convRule: rule14
  }, {
      start: 64297,
      length: 1,
      convRule: rule6
  }, {
      start: 64298,
      length: 13,
      convRule: rule14
  }, {
      start: 64312,
      length: 5,
      convRule: rule14
  }, {
      start: 64318,
      length: 1,
      convRule: rule14
  }, {
      start: 64320,
      length: 2,
      convRule: rule14
  }, {
      start: 64323,
      length: 2,
      convRule: rule14
  }, {
      start: 64326,
      length: 108,
      convRule: rule14
  }, {
      start: 64434,
      length: 16,
      convRule: rule10
  }, {
      start: 64467,
      length: 363,
      convRule: rule14
  }, {
      start: 64830,
      length: 1,
      convRule: rule5
  }, {
      start: 64831,
      length: 1,
      convRule: rule4
  }, {
      start: 64848,
      length: 64,
      convRule: rule14
  }, {
      start: 64914,
      length: 54,
      convRule: rule14
  }, {
      start: 65008,
      length: 12,
      convRule: rule14
  }, {
      start: 65020,
      length: 1,
      convRule: rule3
  }, {
      start: 65021,
      length: 1,
      convRule: rule13
  }, {
      start: 65024,
      length: 16,
      convRule: rule92
  }, {
      start: 65040,
      length: 7,
      convRule: rule2
  }, {
      start: 65047,
      length: 1,
      convRule: rule4
  }, {
      start: 65048,
      length: 1,
      convRule: rule5
  }, {
      start: 65049,
      length: 1,
      convRule: rule2
  }, {
      start: 65056,
      length: 16,
      convRule: rule92
  }, {
      start: 65072,
      length: 1,
      convRule: rule2
  }, {
      start: 65073,
      length: 2,
      convRule: rule7
  }, {
      start: 65075,
      length: 2,
      convRule: rule11
  }, {
      start: 65077,
      length: 1,
      convRule: rule4
  }, {
      start: 65078,
      length: 1,
      convRule: rule5
  }, {
      start: 65079,
      length: 1,
      convRule: rule4
  }, {
      start: 65080,
      length: 1,
      convRule: rule5
  }, {
      start: 65081,
      length: 1,
      convRule: rule4
  }, {
      start: 65082,
      length: 1,
      convRule: rule5
  }, {
      start: 65083,
      length: 1,
      convRule: rule4
  }, {
      start: 65084,
      length: 1,
      convRule: rule5
  }, {
      start: 65085,
      length: 1,
      convRule: rule4
  }, {
      start: 65086,
      length: 1,
      convRule: rule5
  }, {
      start: 65087,
      length: 1,
      convRule: rule4
  }, {
      start: 65088,
      length: 1,
      convRule: rule5
  }, {
      start: 65089,
      length: 1,
      convRule: rule4
  }, {
      start: 65090,
      length: 1,
      convRule: rule5
  }, {
      start: 65091,
      length: 1,
      convRule: rule4
  }, {
      start: 65092,
      length: 1,
      convRule: rule5
  }, {
      start: 65093,
      length: 2,
      convRule: rule2
  }, {
      start: 65095,
      length: 1,
      convRule: rule4
  }, {
      start: 65096,
      length: 1,
      convRule: rule5
  }, {
      start: 65097,
      length: 4,
      convRule: rule2
  }, {
      start: 65101,
      length: 3,
      convRule: rule11
  }, {
      start: 65104,
      length: 3,
      convRule: rule2
  }, {
      start: 65108,
      length: 4,
      convRule: rule2
  }, {
      start: 65112,
      length: 1,
      convRule: rule7
  }, {
      start: 65113,
      length: 1,
      convRule: rule4
  }, {
      start: 65114,
      length: 1,
      convRule: rule5
  }, {
      start: 65115,
      length: 1,
      convRule: rule4
  }, {
      start: 65116,
      length: 1,
      convRule: rule5
  }, {
      start: 65117,
      length: 1,
      convRule: rule4
  }, {
      start: 65118,
      length: 1,
      convRule: rule5
  }, {
      start: 65119,
      length: 3,
      convRule: rule2
  }, {
      start: 65122,
      length: 1,
      convRule: rule6
  }, {
      start: 65123,
      length: 1,
      convRule: rule7
  }, {
      start: 65124,
      length: 3,
      convRule: rule6
  }, {
      start: 65128,
      length: 1,
      convRule: rule2
  }, {
      start: 65129,
      length: 1,
      convRule: rule3
  }, {
      start: 65130,
      length: 2,
      convRule: rule2
  }, {
      start: 65136,
      length: 5,
      convRule: rule14
  }, {
      start: 65142,
      length: 135,
      convRule: rule14
  }, {
      start: 65279,
      length: 1,
      convRule: rule16
  }, {
      start: 65281,
      length: 3,
      convRule: rule2
  }, {
      start: 65284,
      length: 1,
      convRule: rule3
  }, {
      start: 65285,
      length: 3,
      convRule: rule2
  }, {
      start: 65288,
      length: 1,
      convRule: rule4
  }, {
      start: 65289,
      length: 1,
      convRule: rule5
  }, {
      start: 65290,
      length: 1,
      convRule: rule2
  }, {
      start: 65291,
      length: 1,
      convRule: rule6
  }, {
      start: 65292,
      length: 1,
      convRule: rule2
  }, {
      start: 65293,
      length: 1,
      convRule: rule7
  }, {
      start: 65294,
      length: 2,
      convRule: rule2
  }, {
      start: 65296,
      length: 10,
      convRule: rule8
  }, {
      start: 65306,
      length: 2,
      convRule: rule2
  }, {
      start: 65308,
      length: 3,
      convRule: rule6
  }, {
      start: 65311,
      length: 2,
      convRule: rule2
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65339,
      length: 1,
      convRule: rule4
  }, {
      start: 65340,
      length: 1,
      convRule: rule2
  }, {
      start: 65341,
      length: 1,
      convRule: rule5
  }, {
      start: 65342,
      length: 1,
      convRule: rule10
  }, {
      start: 65343,
      length: 1,
      convRule: rule11
  }, {
      start: 65344,
      length: 1,
      convRule: rule10
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 65371,
      length: 1,
      convRule: rule4
  }, {
      start: 65372,
      length: 1,
      convRule: rule6
  }, {
      start: 65373,
      length: 1,
      convRule: rule5
  }, {
      start: 65374,
      length: 1,
      convRule: rule6
  }, {
      start: 65375,
      length: 1,
      convRule: rule4
  }, {
      start: 65376,
      length: 1,
      convRule: rule5
  }, {
      start: 65377,
      length: 1,
      convRule: rule2
  }, {
      start: 65378,
      length: 1,
      convRule: rule4
  }, {
      start: 65379,
      length: 1,
      convRule: rule5
  }, {
      start: 65380,
      length: 2,
      convRule: rule2
  }, {
      start: 65382,
      length: 10,
      convRule: rule14
  }, {
      start: 65392,
      length: 1,
      convRule: rule91
  }, {
      start: 65393,
      length: 45,
      convRule: rule14
  }, {
      start: 65438,
      length: 2,
      convRule: rule91
  }, {
      start: 65440,
      length: 31,
      convRule: rule14
  }, {
      start: 65474,
      length: 6,
      convRule: rule14
  }, {
      start: 65482,
      length: 6,
      convRule: rule14
  }, {
      start: 65490,
      length: 6,
      convRule: rule14
  }, {
      start: 65498,
      length: 3,
      convRule: rule14
  }, {
      start: 65504,
      length: 2,
      convRule: rule3
  }, {
      start: 65506,
      length: 1,
      convRule: rule6
  }, {
      start: 65507,
      length: 1,
      convRule: rule10
  }, {
      start: 65508,
      length: 1,
      convRule: rule13
  }, {
      start: 65509,
      length: 2,
      convRule: rule3
  }, {
      start: 65512,
      length: 1,
      convRule: rule13
  }, {
      start: 65513,
      length: 4,
      convRule: rule6
  }, {
      start: 65517,
      length: 2,
      convRule: rule13
  }, {
      start: 65529,
      length: 3,
      convRule: rule16
  }, {
      start: 65532,
      length: 2,
      convRule: rule13
  }, {
      start: 65536,
      length: 12,
      convRule: rule14
  }, {
      start: 65549,
      length: 26,
      convRule: rule14
  }, {
      start: 65576,
      length: 19,
      convRule: rule14
  }, {
      start: 65596,
      length: 2,
      convRule: rule14
  }, {
      start: 65599,
      length: 15,
      convRule: rule14
  }, {
      start: 65616,
      length: 14,
      convRule: rule14
  }, {
      start: 65664,
      length: 123,
      convRule: rule14
  }, {
      start: 65792,
      length: 3,
      convRule: rule2
  }, {
      start: 65799,
      length: 45,
      convRule: rule17
  }, {
      start: 65847,
      length: 9,
      convRule: rule13
  }, {
      start: 65856,
      length: 53,
      convRule: rule128
  }, {
      start: 65909,
      length: 4,
      convRule: rule17
  }, {
      start: 65913,
      length: 17,
      convRule: rule13
  }, {
      start: 65930,
      length: 2,
      convRule: rule17
  }, {
      start: 65932,
      length: 3,
      convRule: rule13
  }, {
      start: 65936,
      length: 13,
      convRule: rule13
  }, {
      start: 65952,
      length: 1,
      convRule: rule13
  }, {
      start: 66000,
      length: 45,
      convRule: rule13
  }, {
      start: 66045,
      length: 1,
      convRule: rule92
  }, {
      start: 66176,
      length: 29,
      convRule: rule14
  }, {
      start: 66208,
      length: 49,
      convRule: rule14
  }, {
      start: 66272,
      length: 1,
      convRule: rule92
  }, {
      start: 66273,
      length: 27,
      convRule: rule17
  }, {
      start: 66304,
      length: 32,
      convRule: rule14
  }, {
      start: 66336,
      length: 4,
      convRule: rule17
  }, {
      start: 66349,
      length: 20,
      convRule: rule14
  }, {
      start: 66369,
      length: 1,
      convRule: rule128
  }, {
      start: 66370,
      length: 8,
      convRule: rule14
  }, {
      start: 66378,
      length: 1,
      convRule: rule128
  }, {
      start: 66384,
      length: 38,
      convRule: rule14
  }, {
      start: 66422,
      length: 5,
      convRule: rule92
  }, {
      start: 66432,
      length: 30,
      convRule: rule14
  }, {
      start: 66463,
      length: 1,
      convRule: rule2
  }, {
      start: 66464,
      length: 36,
      convRule: rule14
  }, {
      start: 66504,
      length: 8,
      convRule: rule14
  }, {
      start: 66512,
      length: 1,
      convRule: rule2
  }, {
      start: 66513,
      length: 5,
      convRule: rule128
  }, {
      start: 66560,
      length: 40,
      convRule: rule201
  }, {
      start: 66600,
      length: 40,
      convRule: rule202
  }, {
      start: 66640,
      length: 78,
      convRule: rule14
  }, {
      start: 66720,
      length: 10,
      convRule: rule8
  }, {
      start: 66736,
      length: 36,
      convRule: rule201
  }, {
      start: 66776,
      length: 36,
      convRule: rule202
  }, {
      start: 66816,
      length: 40,
      convRule: rule14
  }, {
      start: 66864,
      length: 52,
      convRule: rule14
  }, {
      start: 66927,
      length: 1,
      convRule: rule2
  }, {
      start: 67072,
      length: 311,
      convRule: rule14
  }, {
      start: 67392,
      length: 22,
      convRule: rule14
  }, {
      start: 67424,
      length: 8,
      convRule: rule14
  }, {
      start: 67584,
      length: 6,
      convRule: rule14
  }, {
      start: 67592,
      length: 1,
      convRule: rule14
  }, {
      start: 67594,
      length: 44,
      convRule: rule14
  }, {
      start: 67639,
      length: 2,
      convRule: rule14
  }, {
      start: 67644,
      length: 1,
      convRule: rule14
  }, {
      start: 67647,
      length: 23,
      convRule: rule14
  }, {
      start: 67671,
      length: 1,
      convRule: rule2
  }, {
      start: 67672,
      length: 8,
      convRule: rule17
  }, {
      start: 67680,
      length: 23,
      convRule: rule14
  }, {
      start: 67703,
      length: 2,
      convRule: rule13
  }, {
      start: 67705,
      length: 7,
      convRule: rule17
  }, {
      start: 67712,
      length: 31,
      convRule: rule14
  }, {
      start: 67751,
      length: 9,
      convRule: rule17
  }, {
      start: 67808,
      length: 19,
      convRule: rule14
  }, {
      start: 67828,
      length: 2,
      convRule: rule14
  }, {
      start: 67835,
      length: 5,
      convRule: rule17
  }, {
      start: 67840,
      length: 22,
      convRule: rule14
  }, {
      start: 67862,
      length: 6,
      convRule: rule17
  }, {
      start: 67871,
      length: 1,
      convRule: rule2
  }, {
      start: 67872,
      length: 26,
      convRule: rule14
  }, {
      start: 67903,
      length: 1,
      convRule: rule2
  }, {
      start: 67968,
      length: 56,
      convRule: rule14
  }, {
      start: 68028,
      length: 2,
      convRule: rule17
  }, {
      start: 68030,
      length: 2,
      convRule: rule14
  }, {
      start: 68032,
      length: 16,
      convRule: rule17
  }, {
      start: 68050,
      length: 46,
      convRule: rule17
  }, {
      start: 68096,
      length: 1,
      convRule: rule14
  }, {
      start: 68097,
      length: 3,
      convRule: rule92
  }, {
      start: 68101,
      length: 2,
      convRule: rule92
  }, {
      start: 68108,
      length: 4,
      convRule: rule92
  }, {
      start: 68112,
      length: 4,
      convRule: rule14
  }, {
      start: 68117,
      length: 3,
      convRule: rule14
  }, {
      start: 68121,
      length: 29,
      convRule: rule14
  }, {
      start: 68152,
      length: 3,
      convRule: rule92
  }, {
      start: 68159,
      length: 1,
      convRule: rule92
  }, {
      start: 68160,
      length: 9,
      convRule: rule17
  }, {
      start: 68176,
      length: 9,
      convRule: rule2
  }, {
      start: 68192,
      length: 29,
      convRule: rule14
  }, {
      start: 68221,
      length: 2,
      convRule: rule17
  }, {
      start: 68223,
      length: 1,
      convRule: rule2
  }, {
      start: 68224,
      length: 29,
      convRule: rule14
  }, {
      start: 68253,
      length: 3,
      convRule: rule17
  }, {
      start: 68288,
      length: 8,
      convRule: rule14
  }, {
      start: 68296,
      length: 1,
      convRule: rule13
  }, {
      start: 68297,
      length: 28,
      convRule: rule14
  }, {
      start: 68325,
      length: 2,
      convRule: rule92
  }, {
      start: 68331,
      length: 5,
      convRule: rule17
  }, {
      start: 68336,
      length: 7,
      convRule: rule2
  }, {
      start: 68352,
      length: 54,
      convRule: rule14
  }, {
      start: 68409,
      length: 7,
      convRule: rule2
  }, {
      start: 68416,
      length: 22,
      convRule: rule14
  }, {
      start: 68440,
      length: 8,
      convRule: rule17
  }, {
      start: 68448,
      length: 19,
      convRule: rule14
  }, {
      start: 68472,
      length: 8,
      convRule: rule17
  }, {
      start: 68480,
      length: 18,
      convRule: rule14
  }, {
      start: 68505,
      length: 4,
      convRule: rule2
  }, {
      start: 68521,
      length: 7,
      convRule: rule17
  }, {
      start: 68608,
      length: 73,
      convRule: rule14
  }, {
      start: 68736,
      length: 51,
      convRule: rule97
  }, {
      start: 68800,
      length: 51,
      convRule: rule102
  }, {
      start: 68858,
      length: 6,
      convRule: rule17
  }, {
      start: 68864,
      length: 36,
      convRule: rule14
  }, {
      start: 68900,
      length: 4,
      convRule: rule92
  }, {
      start: 68912,
      length: 10,
      convRule: rule8
  }, {
      start: 69216,
      length: 31,
      convRule: rule17
  }, {
      start: 69248,
      length: 42,
      convRule: rule14
  }, {
      start: 69291,
      length: 2,
      convRule: rule92
  }, {
      start: 69293,
      length: 1,
      convRule: rule7
  }, {
      start: 69296,
      length: 2,
      convRule: rule14
  }, {
      start: 69376,
      length: 29,
      convRule: rule14
  }, {
      start: 69405,
      length: 10,
      convRule: rule17
  }, {
      start: 69415,
      length: 1,
      convRule: rule14
  }, {
      start: 69424,
      length: 22,
      convRule: rule14
  }, {
      start: 69446,
      length: 11,
      convRule: rule92
  }, {
      start: 69457,
      length: 4,
      convRule: rule17
  }, {
      start: 69461,
      length: 5,
      convRule: rule2
  }, {
      start: 69552,
      length: 21,
      convRule: rule14
  }, {
      start: 69573,
      length: 7,
      convRule: rule17
  }, {
      start: 69600,
      length: 23,
      convRule: rule14
  }, {
      start: 69632,
      length: 1,
      convRule: rule124
  }, {
      start: 69633,
      length: 1,
      convRule: rule92
  }, {
      start: 69634,
      length: 1,
      convRule: rule124
  }, {
      start: 69635,
      length: 53,
      convRule: rule14
  }, {
      start: 69688,
      length: 15,
      convRule: rule92
  }, {
      start: 69703,
      length: 7,
      convRule: rule2
  }, {
      start: 69714,
      length: 20,
      convRule: rule17
  }, {
      start: 69734,
      length: 10,
      convRule: rule8
  }, {
      start: 69759,
      length: 3,
      convRule: rule92
  }, {
      start: 69762,
      length: 1,
      convRule: rule124
  }, {
      start: 69763,
      length: 45,
      convRule: rule14
  }, {
      start: 69808,
      length: 3,
      convRule: rule124
  }, {
      start: 69811,
      length: 4,
      convRule: rule92
  }, {
      start: 69815,
      length: 2,
      convRule: rule124
  }, {
      start: 69817,
      length: 2,
      convRule: rule92
  }, {
      start: 69819,
      length: 2,
      convRule: rule2
  }, {
      start: 69821,
      length: 1,
      convRule: rule16
  }, {
      start: 69822,
      length: 4,
      convRule: rule2
  }, {
      start: 69837,
      length: 1,
      convRule: rule16
  }, {
      start: 69840,
      length: 25,
      convRule: rule14
  }, {
      start: 69872,
      length: 10,
      convRule: rule8
  }, {
      start: 69888,
      length: 3,
      convRule: rule92
  }, {
      start: 69891,
      length: 36,
      convRule: rule14
  }, {
      start: 69927,
      length: 5,
      convRule: rule92
  }, {
      start: 69932,
      length: 1,
      convRule: rule124
  }, {
      start: 69933,
      length: 8,
      convRule: rule92
  }, {
      start: 69942,
      length: 10,
      convRule: rule8
  }, {
      start: 69952,
      length: 4,
      convRule: rule2
  }, {
      start: 69956,
      length: 1,
      convRule: rule14
  }, {
      start: 69957,
      length: 2,
      convRule: rule124
  }, {
      start: 69959,
      length: 1,
      convRule: rule14
  }, {
      start: 69968,
      length: 35,
      convRule: rule14
  }, {
      start: 70003,
      length: 1,
      convRule: rule92
  }, {
      start: 70004,
      length: 2,
      convRule: rule2
  }, {
      start: 70006,
      length: 1,
      convRule: rule14
  }, {
      start: 70016,
      length: 2,
      convRule: rule92
  }, {
      start: 70018,
      length: 1,
      convRule: rule124
  }, {
      start: 70019,
      length: 48,
      convRule: rule14
  }, {
      start: 70067,
      length: 3,
      convRule: rule124
  }, {
      start: 70070,
      length: 9,
      convRule: rule92
  }, {
      start: 70079,
      length: 2,
      convRule: rule124
  }, {
      start: 70081,
      length: 4,
      convRule: rule14
  }, {
      start: 70085,
      length: 4,
      convRule: rule2
  }, {
      start: 70089,
      length: 4,
      convRule: rule92
  }, {
      start: 70093,
      length: 1,
      convRule: rule2
  }, {
      start: 70094,
      length: 1,
      convRule: rule124
  }, {
      start: 70095,
      length: 1,
      convRule: rule92
  }, {
      start: 70096,
      length: 10,
      convRule: rule8
  }, {
      start: 70106,
      length: 1,
      convRule: rule14
  }, {
      start: 70107,
      length: 1,
      convRule: rule2
  }, {
      start: 70108,
      length: 1,
      convRule: rule14
  }, {
      start: 70109,
      length: 3,
      convRule: rule2
  }, {
      start: 70113,
      length: 20,
      convRule: rule17
  }, {
      start: 70144,
      length: 18,
      convRule: rule14
  }, {
      start: 70163,
      length: 25,
      convRule: rule14
  }, {
      start: 70188,
      length: 3,
      convRule: rule124
  }, {
      start: 70191,
      length: 3,
      convRule: rule92
  }, {
      start: 70194,
      length: 2,
      convRule: rule124
  }, {
      start: 70196,
      length: 1,
      convRule: rule92
  }, {
      start: 70197,
      length: 1,
      convRule: rule124
  }, {
      start: 70198,
      length: 2,
      convRule: rule92
  }, {
      start: 70200,
      length: 6,
      convRule: rule2
  }, {
      start: 70206,
      length: 1,
      convRule: rule92
  }, {
      start: 70272,
      length: 7,
      convRule: rule14
  }, {
      start: 70280,
      length: 1,
      convRule: rule14
  }, {
      start: 70282,
      length: 4,
      convRule: rule14
  }, {
      start: 70287,
      length: 15,
      convRule: rule14
  }, {
      start: 70303,
      length: 10,
      convRule: rule14
  }, {
      start: 70313,
      length: 1,
      convRule: rule2
  }, {
      start: 70320,
      length: 47,
      convRule: rule14
  }, {
      start: 70367,
      length: 1,
      convRule: rule92
  }, {
      start: 70368,
      length: 3,
      convRule: rule124
  }, {
      start: 70371,
      length: 8,
      convRule: rule92
  }, {
      start: 70384,
      length: 10,
      convRule: rule8
  }, {
      start: 70400,
      length: 2,
      convRule: rule92
  }, {
      start: 70402,
      length: 2,
      convRule: rule124
  }, {
      start: 70405,
      length: 8,
      convRule: rule14
  }, {
      start: 70415,
      length: 2,
      convRule: rule14
  }, {
      start: 70419,
      length: 22,
      convRule: rule14
  }, {
      start: 70442,
      length: 7,
      convRule: rule14
  }, {
      start: 70450,
      length: 2,
      convRule: rule14
  }, {
      start: 70453,
      length: 5,
      convRule: rule14
  }, {
      start: 70459,
      length: 2,
      convRule: rule92
  }, {
      start: 70461,
      length: 1,
      convRule: rule14
  }, {
      start: 70462,
      length: 2,
      convRule: rule124
  }, {
      start: 70464,
      length: 1,
      convRule: rule92
  }, {
      start: 70465,
      length: 4,
      convRule: rule124
  }, {
      start: 70471,
      length: 2,
      convRule: rule124
  }, {
      start: 70475,
      length: 3,
      convRule: rule124
  }, {
      start: 70480,
      length: 1,
      convRule: rule14
  }, {
      start: 70487,
      length: 1,
      convRule: rule124
  }, {
      start: 70493,
      length: 5,
      convRule: rule14
  }, {
      start: 70498,
      length: 2,
      convRule: rule124
  }, {
      start: 70502,
      length: 7,
      convRule: rule92
  }, {
      start: 70512,
      length: 5,
      convRule: rule92
  }, {
      start: 70656,
      length: 53,
      convRule: rule14
  }, {
      start: 70709,
      length: 3,
      convRule: rule124
  }, {
      start: 70712,
      length: 8,
      convRule: rule92
  }, {
      start: 70720,
      length: 2,
      convRule: rule124
  }, {
      start: 70722,
      length: 3,
      convRule: rule92
  }, {
      start: 70725,
      length: 1,
      convRule: rule124
  }, {
      start: 70726,
      length: 1,
      convRule: rule92
  }, {
      start: 70727,
      length: 4,
      convRule: rule14
  }, {
      start: 70731,
      length: 5,
      convRule: rule2
  }, {
      start: 70736,
      length: 10,
      convRule: rule8
  }, {
      start: 70746,
      length: 2,
      convRule: rule2
  }, {
      start: 70749,
      length: 1,
      convRule: rule2
  }, {
      start: 70750,
      length: 1,
      convRule: rule92
  }, {
      start: 70751,
      length: 3,
      convRule: rule14
  }, {
      start: 70784,
      length: 48,
      convRule: rule14
  }, {
      start: 70832,
      length: 3,
      convRule: rule124
  }, {
      start: 70835,
      length: 6,
      convRule: rule92
  }, {
      start: 70841,
      length: 1,
      convRule: rule124
  }, {
      start: 70842,
      length: 1,
      convRule: rule92
  }, {
      start: 70843,
      length: 4,
      convRule: rule124
  }, {
      start: 70847,
      length: 2,
      convRule: rule92
  }, {
      start: 70849,
      length: 1,
      convRule: rule124
  }, {
      start: 70850,
      length: 2,
      convRule: rule92
  }, {
      start: 70852,
      length: 2,
      convRule: rule14
  }, {
      start: 70854,
      length: 1,
      convRule: rule2
  }, {
      start: 70855,
      length: 1,
      convRule: rule14
  }, {
      start: 70864,
      length: 10,
      convRule: rule8
  }, {
      start: 71040,
      length: 47,
      convRule: rule14
  }, {
      start: 71087,
      length: 3,
      convRule: rule124
  }, {
      start: 71090,
      length: 4,
      convRule: rule92
  }, {
      start: 71096,
      length: 4,
      convRule: rule124
  }, {
      start: 71100,
      length: 2,
      convRule: rule92
  }, {
      start: 71102,
      length: 1,
      convRule: rule124
  }, {
      start: 71103,
      length: 2,
      convRule: rule92
  }, {
      start: 71105,
      length: 23,
      convRule: rule2
  }, {
      start: 71128,
      length: 4,
      convRule: rule14
  }, {
      start: 71132,
      length: 2,
      convRule: rule92
  }, {
      start: 71168,
      length: 48,
      convRule: rule14
  }, {
      start: 71216,
      length: 3,
      convRule: rule124
  }, {
      start: 71219,
      length: 8,
      convRule: rule92
  }, {
      start: 71227,
      length: 2,
      convRule: rule124
  }, {
      start: 71229,
      length: 1,
      convRule: rule92
  }, {
      start: 71230,
      length: 1,
      convRule: rule124
  }, {
      start: 71231,
      length: 2,
      convRule: rule92
  }, {
      start: 71233,
      length: 3,
      convRule: rule2
  }, {
      start: 71236,
      length: 1,
      convRule: rule14
  }, {
      start: 71248,
      length: 10,
      convRule: rule8
  }, {
      start: 71264,
      length: 13,
      convRule: rule2
  }, {
      start: 71296,
      length: 43,
      convRule: rule14
  }, {
      start: 71339,
      length: 1,
      convRule: rule92
  }, {
      start: 71340,
      length: 1,
      convRule: rule124
  }, {
      start: 71341,
      length: 1,
      convRule: rule92
  }, {
      start: 71342,
      length: 2,
      convRule: rule124
  }, {
      start: 71344,
      length: 6,
      convRule: rule92
  }, {
      start: 71350,
      length: 1,
      convRule: rule124
  }, {
      start: 71351,
      length: 1,
      convRule: rule92
  }, {
      start: 71352,
      length: 1,
      convRule: rule14
  }, {
      start: 71360,
      length: 10,
      convRule: rule8
  }, {
      start: 71424,
      length: 27,
      convRule: rule14
  }, {
      start: 71453,
      length: 3,
      convRule: rule92
  }, {
      start: 71456,
      length: 2,
      convRule: rule124
  }, {
      start: 71458,
      length: 4,
      convRule: rule92
  }, {
      start: 71462,
      length: 1,
      convRule: rule124
  }, {
      start: 71463,
      length: 5,
      convRule: rule92
  }, {
      start: 71472,
      length: 10,
      convRule: rule8
  }, {
      start: 71482,
      length: 2,
      convRule: rule17
  }, {
      start: 71484,
      length: 3,
      convRule: rule2
  }, {
      start: 71487,
      length: 1,
      convRule: rule13
  }, {
      start: 71680,
      length: 44,
      convRule: rule14
  }, {
      start: 71724,
      length: 3,
      convRule: rule124
  }, {
      start: 71727,
      length: 9,
      convRule: rule92
  }, {
      start: 71736,
      length: 1,
      convRule: rule124
  }, {
      start: 71737,
      length: 2,
      convRule: rule92
  }, {
      start: 71739,
      length: 1,
      convRule: rule2
  }, {
      start: 71840,
      length: 32,
      convRule: rule9
  }, {
      start: 71872,
      length: 32,
      convRule: rule12
  }, {
      start: 71904,
      length: 10,
      convRule: rule8
  }, {
      start: 71914,
      length: 9,
      convRule: rule17
  }, {
      start: 71935,
      length: 8,
      convRule: rule14
  }, {
      start: 71945,
      length: 1,
      convRule: rule14
  }, {
      start: 71948,
      length: 8,
      convRule: rule14
  }, {
      start: 71957,
      length: 2,
      convRule: rule14
  }, {
      start: 71960,
      length: 24,
      convRule: rule14
  }, {
      start: 71984,
      length: 6,
      convRule: rule124
  }, {
      start: 71991,
      length: 2,
      convRule: rule124
  }, {
      start: 71995,
      length: 2,
      convRule: rule92
  }, {
      start: 71997,
      length: 1,
      convRule: rule124
  }, {
      start: 71998,
      length: 1,
      convRule: rule92
  }, {
      start: 71999,
      length: 1,
      convRule: rule14
  }, {
      start: 72000,
      length: 1,
      convRule: rule124
  }, {
      start: 72001,
      length: 1,
      convRule: rule14
  }, {
      start: 72002,
      length: 1,
      convRule: rule124
  }, {
      start: 72003,
      length: 1,
      convRule: rule92
  }, {
      start: 72004,
      length: 3,
      convRule: rule2
  }, {
      start: 72016,
      length: 10,
      convRule: rule8
  }, {
      start: 72096,
      length: 8,
      convRule: rule14
  }, {
      start: 72106,
      length: 39,
      convRule: rule14
  }, {
      start: 72145,
      length: 3,
      convRule: rule124
  }, {
      start: 72148,
      length: 4,
      convRule: rule92
  }, {
      start: 72154,
      length: 2,
      convRule: rule92
  }, {
      start: 72156,
      length: 4,
      convRule: rule124
  }, {
      start: 72160,
      length: 1,
      convRule: rule92
  }, {
      start: 72161,
      length: 1,
      convRule: rule14
  }, {
      start: 72162,
      length: 1,
      convRule: rule2
  }, {
      start: 72163,
      length: 1,
      convRule: rule14
  }, {
      start: 72164,
      length: 1,
      convRule: rule124
  }, {
      start: 72192,
      length: 1,
      convRule: rule14
  }, {
      start: 72193,
      length: 10,
      convRule: rule92
  }, {
      start: 72203,
      length: 40,
      convRule: rule14
  }, {
      start: 72243,
      length: 6,
      convRule: rule92
  }, {
      start: 72249,
      length: 1,
      convRule: rule124
  }, {
      start: 72250,
      length: 1,
      convRule: rule14
  }, {
      start: 72251,
      length: 4,
      convRule: rule92
  }, {
      start: 72255,
      length: 8,
      convRule: rule2
  }, {
      start: 72263,
      length: 1,
      convRule: rule92
  }, {
      start: 72272,
      length: 1,
      convRule: rule14
  }, {
      start: 72273,
      length: 6,
      convRule: rule92
  }, {
      start: 72279,
      length: 2,
      convRule: rule124
  }, {
      start: 72281,
      length: 3,
      convRule: rule92
  }, {
      start: 72284,
      length: 46,
      convRule: rule14
  }, {
      start: 72330,
      length: 13,
      convRule: rule92
  }, {
      start: 72343,
      length: 1,
      convRule: rule124
  }, {
      start: 72344,
      length: 2,
      convRule: rule92
  }, {
      start: 72346,
      length: 3,
      convRule: rule2
  }, {
      start: 72349,
      length: 1,
      convRule: rule14
  }, {
      start: 72350,
      length: 5,
      convRule: rule2
  }, {
      start: 72384,
      length: 57,
      convRule: rule14
  }, {
      start: 72704,
      length: 9,
      convRule: rule14
  }, {
      start: 72714,
      length: 37,
      convRule: rule14
  }, {
      start: 72751,
      length: 1,
      convRule: rule124
  }, {
      start: 72752,
      length: 7,
      convRule: rule92
  }, {
      start: 72760,
      length: 6,
      convRule: rule92
  }, {
      start: 72766,
      length: 1,
      convRule: rule124
  }, {
      start: 72767,
      length: 1,
      convRule: rule92
  }, {
      start: 72768,
      length: 1,
      convRule: rule14
  }, {
      start: 72769,
      length: 5,
      convRule: rule2
  }, {
      start: 72784,
      length: 10,
      convRule: rule8
  }, {
      start: 72794,
      length: 19,
      convRule: rule17
  }, {
      start: 72816,
      length: 2,
      convRule: rule2
  }, {
      start: 72818,
      length: 30,
      convRule: rule14
  }, {
      start: 72850,
      length: 22,
      convRule: rule92
  }, {
      start: 72873,
      length: 1,
      convRule: rule124
  }, {
      start: 72874,
      length: 7,
      convRule: rule92
  }, {
      start: 72881,
      length: 1,
      convRule: rule124
  }, {
      start: 72882,
      length: 2,
      convRule: rule92
  }, {
      start: 72884,
      length: 1,
      convRule: rule124
  }, {
      start: 72885,
      length: 2,
      convRule: rule92
  }, {
      start: 72960,
      length: 7,
      convRule: rule14
  }, {
      start: 72968,
      length: 2,
      convRule: rule14
  }, {
      start: 72971,
      length: 38,
      convRule: rule14
  }, {
      start: 73009,
      length: 6,
      convRule: rule92
  }, {
      start: 73018,
      length: 1,
      convRule: rule92
  }, {
      start: 73020,
      length: 2,
      convRule: rule92
  }, {
      start: 73023,
      length: 7,
      convRule: rule92
  }, {
      start: 73030,
      length: 1,
      convRule: rule14
  }, {
      start: 73031,
      length: 1,
      convRule: rule92
  }, {
      start: 73040,
      length: 10,
      convRule: rule8
  }, {
      start: 73056,
      length: 6,
      convRule: rule14
  }, {
      start: 73063,
      length: 2,
      convRule: rule14
  }, {
      start: 73066,
      length: 32,
      convRule: rule14
  }, {
      start: 73098,
      length: 5,
      convRule: rule124
  }, {
      start: 73104,
      length: 2,
      convRule: rule92
  }, {
      start: 73107,
      length: 2,
      convRule: rule124
  }, {
      start: 73109,
      length: 1,
      convRule: rule92
  }, {
      start: 73110,
      length: 1,
      convRule: rule124
  }, {
      start: 73111,
      length: 1,
      convRule: rule92
  }, {
      start: 73112,
      length: 1,
      convRule: rule14
  }, {
      start: 73120,
      length: 10,
      convRule: rule8
  }, {
      start: 73440,
      length: 19,
      convRule: rule14
  }, {
      start: 73459,
      length: 2,
      convRule: rule92
  }, {
      start: 73461,
      length: 2,
      convRule: rule124
  }, {
      start: 73463,
      length: 2,
      convRule: rule2
  }, {
      start: 73648,
      length: 1,
      convRule: rule14
  }, {
      start: 73664,
      length: 21,
      convRule: rule17
  }, {
      start: 73685,
      length: 8,
      convRule: rule13
  }, {
      start: 73693,
      length: 4,
      convRule: rule3
  }, {
      start: 73697,
      length: 17,
      convRule: rule13
  }, {
      start: 73727,
      length: 1,
      convRule: rule2
  }, {
      start: 73728,
      length: 922,
      convRule: rule14
  }, {
      start: 74752,
      length: 111,
      convRule: rule128
  }, {
      start: 74864,
      length: 5,
      convRule: rule2
  }, {
      start: 74880,
      length: 196,
      convRule: rule14
  }, {
      start: 77824,
      length: 1071,
      convRule: rule14
  }, {
      start: 78896,
      length: 9,
      convRule: rule16
  }, {
      start: 82944,
      length: 583,
      convRule: rule14
  }, {
      start: 92160,
      length: 569,
      convRule: rule14
  }, {
      start: 92736,
      length: 31,
      convRule: rule14
  }, {
      start: 92768,
      length: 10,
      convRule: rule8
  }, {
      start: 92782,
      length: 2,
      convRule: rule2
  }, {
      start: 92880,
      length: 30,
      convRule: rule14
  }, {
      start: 92912,
      length: 5,
      convRule: rule92
  }, {
      start: 92917,
      length: 1,
      convRule: rule2
  }, {
      start: 92928,
      length: 48,
      convRule: rule14
  }, {
      start: 92976,
      length: 7,
      convRule: rule92
  }, {
      start: 92983,
      length: 5,
      convRule: rule2
  }, {
      start: 92988,
      length: 4,
      convRule: rule13
  }, {
      start: 92992,
      length: 4,
      convRule: rule91
  }, {
      start: 92996,
      length: 1,
      convRule: rule2
  }, {
      start: 92997,
      length: 1,
      convRule: rule13
  }, {
      start: 93008,
      length: 10,
      convRule: rule8
  }, {
      start: 93019,
      length: 7,
      convRule: rule17
  }, {
      start: 93027,
      length: 21,
      convRule: rule14
  }, {
      start: 93053,
      length: 19,
      convRule: rule14
  }, {
      start: 93760,
      length: 32,
      convRule: rule9
  }, {
      start: 93792,
      length: 32,
      convRule: rule12
  }, {
      start: 93824,
      length: 23,
      convRule: rule17
  }, {
      start: 93847,
      length: 4,
      convRule: rule2
  }, {
      start: 93952,
      length: 75,
      convRule: rule14
  }, {
      start: 94031,
      length: 1,
      convRule: rule92
  }, {
      start: 94032,
      length: 1,
      convRule: rule14
  }, {
      start: 94033,
      length: 55,
      convRule: rule124
  }, {
      start: 94095,
      length: 4,
      convRule: rule92
  }, {
      start: 94099,
      length: 13,
      convRule: rule91
  }, {
      start: 94176,
      length: 2,
      convRule: rule91
  }, {
      start: 94178,
      length: 1,
      convRule: rule2
  }, {
      start: 94179,
      length: 1,
      convRule: rule91
  }, {
      start: 94180,
      length: 1,
      convRule: rule92
  }, {
      start: 94192,
      length: 2,
      convRule: rule124
  }, {
      start: 94208,
      length: 6136,
      convRule: rule14
  }, {
      start: 100352,
      length: 1238,
      convRule: rule14
  }, {
      start: 101632,
      length: 9,
      convRule: rule14
  }, {
      start: 110592,
      length: 287,
      convRule: rule14
  }, {
      start: 110928,
      length: 3,
      convRule: rule14
  }, {
      start: 110948,
      length: 4,
      convRule: rule14
  }, {
      start: 110960,
      length: 396,
      convRule: rule14
  }, {
      start: 113664,
      length: 107,
      convRule: rule14
  }, {
      start: 113776,
      length: 13,
      convRule: rule14
  }, {
      start: 113792,
      length: 9,
      convRule: rule14
  }, {
      start: 113808,
      length: 10,
      convRule: rule14
  }, {
      start: 113820,
      length: 1,
      convRule: rule13
  }, {
      start: 113821,
      length: 2,
      convRule: rule92
  }, {
      start: 113823,
      length: 1,
      convRule: rule2
  }, {
      start: 113824,
      length: 4,
      convRule: rule16
  }, {
      start: 118784,
      length: 246,
      convRule: rule13
  }, {
      start: 119040,
      length: 39,
      convRule: rule13
  }, {
      start: 119081,
      length: 60,
      convRule: rule13
  }, {
      start: 119141,
      length: 2,
      convRule: rule124
  }, {
      start: 119143,
      length: 3,
      convRule: rule92
  }, {
      start: 119146,
      length: 3,
      convRule: rule13
  }, {
      start: 119149,
      length: 6,
      convRule: rule124
  }, {
      start: 119155,
      length: 8,
      convRule: rule16
  }, {
      start: 119163,
      length: 8,
      convRule: rule92
  }, {
      start: 119171,
      length: 2,
      convRule: rule13
  }, {
      start: 119173,
      length: 7,
      convRule: rule92
  }, {
      start: 119180,
      length: 30,
      convRule: rule13
  }, {
      start: 119210,
      length: 4,
      convRule: rule92
  }, {
      start: 119214,
      length: 59,
      convRule: rule13
  }, {
      start: 119296,
      length: 66,
      convRule: rule13
  }, {
      start: 119362,
      length: 3,
      convRule: rule92
  }, {
      start: 119365,
      length: 1,
      convRule: rule13
  }, {
      start: 119520,
      length: 20,
      convRule: rule17
  }, {
      start: 119552,
      length: 87,
      convRule: rule13
  }, {
      start: 119648,
      length: 25,
      convRule: rule17
  }, {
      start: 119808,
      length: 26,
      convRule: rule107
  }, {
      start: 119834,
      length: 26,
      convRule: rule20
  }, {
      start: 119860,
      length: 26,
      convRule: rule107
  }, {
      start: 119886,
      length: 7,
      convRule: rule20
  }, {
      start: 119894,
      length: 18,
      convRule: rule20
  }, {
      start: 119912,
      length: 26,
      convRule: rule107
  }, {
      start: 119938,
      length: 26,
      convRule: rule20
  }, {
      start: 119964,
      length: 1,
      convRule: rule107
  }, {
      start: 119966,
      length: 2,
      convRule: rule107
  }, {
      start: 119970,
      length: 1,
      convRule: rule107
  }, {
      start: 119973,
      length: 2,
      convRule: rule107
  }, {
      start: 119977,
      length: 4,
      convRule: rule107
  }, {
      start: 119982,
      length: 8,
      convRule: rule107
  }, {
      start: 119990,
      length: 4,
      convRule: rule20
  }, {
      start: 119995,
      length: 1,
      convRule: rule20
  }, {
      start: 119997,
      length: 7,
      convRule: rule20
  }, {
      start: 120005,
      length: 11,
      convRule: rule20
  }, {
      start: 120016,
      length: 26,
      convRule: rule107
  }, {
      start: 120042,
      length: 26,
      convRule: rule20
  }, {
      start: 120068,
      length: 2,
      convRule: rule107
  }, {
      start: 120071,
      length: 4,
      convRule: rule107
  }, {
      start: 120077,
      length: 8,
      convRule: rule107
  }, {
      start: 120086,
      length: 7,
      convRule: rule107
  }, {
      start: 120094,
      length: 26,
      convRule: rule20
  }, {
      start: 120120,
      length: 2,
      convRule: rule107
  }, {
      start: 120123,
      length: 4,
      convRule: rule107
  }, {
      start: 120128,
      length: 5,
      convRule: rule107
  }, {
      start: 120134,
      length: 1,
      convRule: rule107
  }, {
      start: 120138,
      length: 7,
      convRule: rule107
  }, {
      start: 120146,
      length: 26,
      convRule: rule20
  }, {
      start: 120172,
      length: 26,
      convRule: rule107
  }, {
      start: 120198,
      length: 26,
      convRule: rule20
  }, {
      start: 120224,
      length: 26,
      convRule: rule107
  }, {
      start: 120250,
      length: 26,
      convRule: rule20
  }, {
      start: 120276,
      length: 26,
      convRule: rule107
  }, {
      start: 120302,
      length: 26,
      convRule: rule20
  }, {
      start: 120328,
      length: 26,
      convRule: rule107
  }, {
      start: 120354,
      length: 26,
      convRule: rule20
  }, {
      start: 120380,
      length: 26,
      convRule: rule107
  }, {
      start: 120406,
      length: 26,
      convRule: rule20
  }, {
      start: 120432,
      length: 26,
      convRule: rule107
  }, {
      start: 120458,
      length: 28,
      convRule: rule20
  }, {
      start: 120488,
      length: 25,
      convRule: rule107
  }, {
      start: 120513,
      length: 1,
      convRule: rule6
  }, {
      start: 120514,
      length: 25,
      convRule: rule20
  }, {
      start: 120539,
      length: 1,
      convRule: rule6
  }, {
      start: 120540,
      length: 6,
      convRule: rule20
  }, {
      start: 120546,
      length: 25,
      convRule: rule107
  }, {
      start: 120571,
      length: 1,
      convRule: rule6
  }, {
      start: 120572,
      length: 25,
      convRule: rule20
  }, {
      start: 120597,
      length: 1,
      convRule: rule6
  }, {
      start: 120598,
      length: 6,
      convRule: rule20
  }, {
      start: 120604,
      length: 25,
      convRule: rule107
  }, {
      start: 120629,
      length: 1,
      convRule: rule6
  }, {
      start: 120630,
      length: 25,
      convRule: rule20
  }, {
      start: 120655,
      length: 1,
      convRule: rule6
  }, {
      start: 120656,
      length: 6,
      convRule: rule20
  }, {
      start: 120662,
      length: 25,
      convRule: rule107
  }, {
      start: 120687,
      length: 1,
      convRule: rule6
  }, {
      start: 120688,
      length: 25,
      convRule: rule20
  }, {
      start: 120713,
      length: 1,
      convRule: rule6
  }, {
      start: 120714,
      length: 6,
      convRule: rule20
  }, {
      start: 120720,
      length: 25,
      convRule: rule107
  }, {
      start: 120745,
      length: 1,
      convRule: rule6
  }, {
      start: 120746,
      length: 25,
      convRule: rule20
  }, {
      start: 120771,
      length: 1,
      convRule: rule6
  }, {
      start: 120772,
      length: 6,
      convRule: rule20
  }, {
      start: 120778,
      length: 1,
      convRule: rule107
  }, {
      start: 120779,
      length: 1,
      convRule: rule20
  }, {
      start: 120782,
      length: 50,
      convRule: rule8
  }, {
      start: 120832,
      length: 512,
      convRule: rule13
  }, {
      start: 121344,
      length: 55,
      convRule: rule92
  }, {
      start: 121399,
      length: 4,
      convRule: rule13
  }, {
      start: 121403,
      length: 50,
      convRule: rule92
  }, {
      start: 121453,
      length: 8,
      convRule: rule13
  }, {
      start: 121461,
      length: 1,
      convRule: rule92
  }, {
      start: 121462,
      length: 14,
      convRule: rule13
  }, {
      start: 121476,
      length: 1,
      convRule: rule92
  }, {
      start: 121477,
      length: 2,
      convRule: rule13
  }, {
      start: 121479,
      length: 5,
      convRule: rule2
  }, {
      start: 121499,
      length: 5,
      convRule: rule92
  }, {
      start: 121505,
      length: 15,
      convRule: rule92
  }, {
      start: 122880,
      length: 7,
      convRule: rule92
  }, {
      start: 122888,
      length: 17,
      convRule: rule92
  }, {
      start: 122907,
      length: 7,
      convRule: rule92
  }, {
      start: 122915,
      length: 2,
      convRule: rule92
  }, {
      start: 122918,
      length: 5,
      convRule: rule92
  }, {
      start: 123136,
      length: 45,
      convRule: rule14
  }, {
      start: 123184,
      length: 7,
      convRule: rule92
  }, {
      start: 123191,
      length: 7,
      convRule: rule91
  }, {
      start: 123200,
      length: 10,
      convRule: rule8
  }, {
      start: 123214,
      length: 1,
      convRule: rule14
  }, {
      start: 123215,
      length: 1,
      convRule: rule13
  }, {
      start: 123584,
      length: 44,
      convRule: rule14
  }, {
      start: 123628,
      length: 4,
      convRule: rule92
  }, {
      start: 123632,
      length: 10,
      convRule: rule8
  }, {
      start: 123647,
      length: 1,
      convRule: rule3
  }, {
      start: 124928,
      length: 197,
      convRule: rule14
  }, {
      start: 125127,
      length: 9,
      convRule: rule17
  }, {
      start: 125136,
      length: 7,
      convRule: rule92
  }, {
      start: 125184,
      length: 34,
      convRule: rule203
  }, {
      start: 125218,
      length: 34,
      convRule: rule204
  }, {
      start: 125252,
      length: 7,
      convRule: rule92
  }, {
      start: 125259,
      length: 1,
      convRule: rule91
  }, {
      start: 125264,
      length: 10,
      convRule: rule8
  }, {
      start: 125278,
      length: 2,
      convRule: rule2
  }, {
      start: 126065,
      length: 59,
      convRule: rule17
  }, {
      start: 126124,
      length: 1,
      convRule: rule13
  }, {
      start: 126125,
      length: 3,
      convRule: rule17
  }, {
      start: 126128,
      length: 1,
      convRule: rule3
  }, {
      start: 126129,
      length: 4,
      convRule: rule17
  }, {
      start: 126209,
      length: 45,
      convRule: rule17
  }, {
      start: 126254,
      length: 1,
      convRule: rule13
  }, {
      start: 126255,
      length: 15,
      convRule: rule17
  }, {
      start: 126464,
      length: 4,
      convRule: rule14
  }, {
      start: 126469,
      length: 27,
      convRule: rule14
  }, {
      start: 126497,
      length: 2,
      convRule: rule14
  }, {
      start: 126500,
      length: 1,
      convRule: rule14
  }, {
      start: 126503,
      length: 1,
      convRule: rule14
  }, {
      start: 126505,
      length: 10,
      convRule: rule14
  }, {
      start: 126516,
      length: 4,
      convRule: rule14
  }, {
      start: 126521,
      length: 1,
      convRule: rule14
  }, {
      start: 126523,
      length: 1,
      convRule: rule14
  }, {
      start: 126530,
      length: 1,
      convRule: rule14
  }, {
      start: 126535,
      length: 1,
      convRule: rule14
  }, {
      start: 126537,
      length: 1,
      convRule: rule14
  }, {
      start: 126539,
      length: 1,
      convRule: rule14
  }, {
      start: 126541,
      length: 3,
      convRule: rule14
  }, {
      start: 126545,
      length: 2,
      convRule: rule14
  }, {
      start: 126548,
      length: 1,
      convRule: rule14
  }, {
      start: 126551,
      length: 1,
      convRule: rule14
  }, {
      start: 126553,
      length: 1,
      convRule: rule14
  }, {
      start: 126555,
      length: 1,
      convRule: rule14
  }, {
      start: 126557,
      length: 1,
      convRule: rule14
  }, {
      start: 126559,
      length: 1,
      convRule: rule14
  }, {
      start: 126561,
      length: 2,
      convRule: rule14
  }, {
      start: 126564,
      length: 1,
      convRule: rule14
  }, {
      start: 126567,
      length: 4,
      convRule: rule14
  }, {
      start: 126572,
      length: 7,
      convRule: rule14
  }, {
      start: 126580,
      length: 4,
      convRule: rule14
  }, {
      start: 126585,
      length: 4,
      convRule: rule14
  }, {
      start: 126590,
      length: 1,
      convRule: rule14
  }, {
      start: 126592,
      length: 10,
      convRule: rule14
  }, {
      start: 126603,
      length: 17,
      convRule: rule14
  }, {
      start: 126625,
      length: 3,
      convRule: rule14
  }, {
      start: 126629,
      length: 5,
      convRule: rule14
  }, {
      start: 126635,
      length: 17,
      convRule: rule14
  }, {
      start: 126704,
      length: 2,
      convRule: rule6
  }, {
      start: 126976,
      length: 44,
      convRule: rule13
  }, {
      start: 127024,
      length: 100,
      convRule: rule13
  }, {
      start: 127136,
      length: 15,
      convRule: rule13
  }, {
      start: 127153,
      length: 15,
      convRule: rule13
  }, {
      start: 127169,
      length: 15,
      convRule: rule13
  }, {
      start: 127185,
      length: 37,
      convRule: rule13
  }, {
      start: 127232,
      length: 13,
      convRule: rule17
  }, {
      start: 127245,
      length: 161,
      convRule: rule13
  }, {
      start: 127462,
      length: 29,
      convRule: rule13
  }, {
      start: 127504,
      length: 44,
      convRule: rule13
  }, {
      start: 127552,
      length: 9,
      convRule: rule13
  }, {
      start: 127568,
      length: 2,
      convRule: rule13
  }, {
      start: 127584,
      length: 6,
      convRule: rule13
  }, {
      start: 127744,
      length: 251,
      convRule: rule13
  }, {
      start: 127995,
      length: 5,
      convRule: rule10
  }, {
      start: 128000,
      length: 728,
      convRule: rule13
  }, {
      start: 128736,
      length: 13,
      convRule: rule13
  }, {
      start: 128752,
      length: 13,
      convRule: rule13
  }, {
      start: 128768,
      length: 116,
      convRule: rule13
  }, {
      start: 128896,
      length: 89,
      convRule: rule13
  }, {
      start: 128992,
      length: 12,
      convRule: rule13
  }, {
      start: 129024,
      length: 12,
      convRule: rule13
  }, {
      start: 129040,
      length: 56,
      convRule: rule13
  }, {
      start: 129104,
      length: 10,
      convRule: rule13
  }, {
      start: 129120,
      length: 40,
      convRule: rule13
  }, {
      start: 129168,
      length: 30,
      convRule: rule13
  }, {
      start: 129200,
      length: 2,
      convRule: rule13
  }, {
      start: 129280,
      length: 121,
      convRule: rule13
  }, {
      start: 129402,
      length: 82,
      convRule: rule13
  }, {
      start: 129485,
      length: 135,
      convRule: rule13
  }, {
      start: 129632,
      length: 14,
      convRule: rule13
  }, {
      start: 129648,
      length: 5,
      convRule: rule13
  }, {
      start: 129656,
      length: 3,
      convRule: rule13
  }, {
      start: 129664,
      length: 7,
      convRule: rule13
  }, {
      start: 129680,
      length: 25,
      convRule: rule13
  }, {
      start: 129712,
      length: 7,
      convRule: rule13
  }, {
      start: 129728,
      length: 3,
      convRule: rule13
  }, {
      start: 129744,
      length: 7,
      convRule: rule13
  }, {
      start: 129792,
      length: 147,
      convRule: rule13
  }, {
      start: 129940,
      length: 55,
      convRule: rule13
  }, {
      start: 130032,
      length: 10,
      convRule: rule8
  }, {
      start: 131072,
      length: 42718,
      convRule: rule14
  }, {
      start: 173824,
      length: 4149,
      convRule: rule14
  }, {
      start: 177984,
      length: 222,
      convRule: rule14
  }, {
      start: 178208,
      length: 5762,
      convRule: rule14
  }, {
      start: 183984,
      length: 7473,
      convRule: rule14
  }, {
      start: 194560,
      length: 542,
      convRule: rule14
  }, {
      start: 196608,
      length: 4939,
      convRule: rule14
  }, {
      start: 917505,
      length: 1,
      convRule: rule16
  }, {
      start: 917536,
      length: 96,
      convRule: rule16
  }, {
      start: 917760,
      length: 240,
      convRule: rule92
  }, {
      start: 983040,
      length: 65534,
      convRule: rule200
  }, {
      start: 1048576,
      length: 65534,
      convRule: rule200
  } ];                                              
  var uGencat = function ($$char) {
      var conversionRule = getRule(allchars)($$char)(numBlocks);
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.unicodeCat;
      })(conversionRule);
  };
  exports["NUMCAT_LU"] = NUMCAT_LU;
  exports["NUMCAT_LL"] = NUMCAT_LL;
  exports["NUMCAT_LT"] = NUMCAT_LT;
  exports["NUMCAT_LM"] = NUMCAT_LM;
  exports["NUMCAT_LO"] = NUMCAT_LO;
  exports["NUMCAT_MN"] = NUMCAT_MN;
  exports["NUMCAT_MC"] = NUMCAT_MC;
  exports["NUMCAT_ME"] = NUMCAT_ME;
  exports["NUMCAT_ND"] = NUMCAT_ND;
  exports["NUMCAT_NL"] = NUMCAT_NL;
  exports["NUMCAT_NO"] = NUMCAT_NO;
  exports["NUMCAT_PC"] = NUMCAT_PC;
  exports["NUMCAT_PD"] = NUMCAT_PD;
  exports["NUMCAT_PS"] = NUMCAT_PS;
  exports["NUMCAT_PE"] = NUMCAT_PE;
  exports["NUMCAT_PI"] = NUMCAT_PI;
  exports["NUMCAT_PF"] = NUMCAT_PF;
  exports["NUMCAT_PO"] = NUMCAT_PO;
  exports["NUMCAT_SM"] = NUMCAT_SM;
  exports["NUMCAT_SC"] = NUMCAT_SC;
  exports["NUMCAT_SK"] = NUMCAT_SK;
  exports["NUMCAT_SO"] = NUMCAT_SO;
  exports["NUMCAT_ZS"] = NUMCAT_ZS;
  exports["NUMCAT_ZL"] = NUMCAT_ZL;
  exports["NUMCAT_ZP"] = NUMCAT_ZP;
  exports["NUMCAT_CC"] = NUMCAT_CC;
  exports["NUMCAT_CF"] = NUMCAT_CF;
  exports["NUMCAT_CS"] = NUMCAT_CS;
  exports["NUMCAT_CO"] = NUMCAT_CO;
  exports["NUMCAT_CN"] = NUMCAT_CN;
  exports["uGencat"] = uGencat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CodePoint.Unicode"] = $PS["Data.CodePoint.Unicode"] || {};
  var exports = $PS["Data.CodePoint.Unicode"];
  var Data_CodePoint_Unicode_Internal = $PS["Data.CodePoint.Unicode.Internal"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var UppercaseLetter = (function () {
      function UppercaseLetter() {

      };
      UppercaseLetter.value = new UppercaseLetter();
      return UppercaseLetter;
  })();
  var LowercaseLetter = (function () {
      function LowercaseLetter() {

      };
      LowercaseLetter.value = new LowercaseLetter();
      return LowercaseLetter;
  })();
  var TitlecaseLetter = (function () {
      function TitlecaseLetter() {

      };
      TitlecaseLetter.value = new TitlecaseLetter();
      return TitlecaseLetter;
  })();
  var ModifierLetter = (function () {
      function ModifierLetter() {

      };
      ModifierLetter.value = new ModifierLetter();
      return ModifierLetter;
  })();
  var OtherLetter = (function () {
      function OtherLetter() {

      };
      OtherLetter.value = new OtherLetter();
      return OtherLetter;
  })();
  var NonSpacingMark = (function () {
      function NonSpacingMark() {

      };
      NonSpacingMark.value = new NonSpacingMark();
      return NonSpacingMark;
  })();
  var SpacingCombiningMark = (function () {
      function SpacingCombiningMark() {

      };
      SpacingCombiningMark.value = new SpacingCombiningMark();
      return SpacingCombiningMark;
  })();
  var EnclosingMark = (function () {
      function EnclosingMark() {

      };
      EnclosingMark.value = new EnclosingMark();
      return EnclosingMark;
  })();
  var DecimalNumber = (function () {
      function DecimalNumber() {

      };
      DecimalNumber.value = new DecimalNumber();
      return DecimalNumber;
  })();
  var LetterNumber = (function () {
      function LetterNumber() {

      };
      LetterNumber.value = new LetterNumber();
      return LetterNumber;
  })();
  var OtherNumber = (function () {
      function OtherNumber() {

      };
      OtherNumber.value = new OtherNumber();
      return OtherNumber;
  })();
  var ConnectorPunctuation = (function () {
      function ConnectorPunctuation() {

      };
      ConnectorPunctuation.value = new ConnectorPunctuation();
      return ConnectorPunctuation;
  })();
  var DashPunctuation = (function () {
      function DashPunctuation() {

      };
      DashPunctuation.value = new DashPunctuation();
      return DashPunctuation;
  })();
  var OpenPunctuation = (function () {
      function OpenPunctuation() {

      };
      OpenPunctuation.value = new OpenPunctuation();
      return OpenPunctuation;
  })();
  var ClosePunctuation = (function () {
      function ClosePunctuation() {

      };
      ClosePunctuation.value = new ClosePunctuation();
      return ClosePunctuation;
  })();
  var InitialQuote = (function () {
      function InitialQuote() {

      };
      InitialQuote.value = new InitialQuote();
      return InitialQuote;
  })();
  var FinalQuote = (function () {
      function FinalQuote() {

      };
      FinalQuote.value = new FinalQuote();
      return FinalQuote;
  })();
  var OtherPunctuation = (function () {
      function OtherPunctuation() {

      };
      OtherPunctuation.value = new OtherPunctuation();
      return OtherPunctuation;
  })();
  var MathSymbol = (function () {
      function MathSymbol() {

      };
      MathSymbol.value = new MathSymbol();
      return MathSymbol;
  })();
  var CurrencySymbol = (function () {
      function CurrencySymbol() {

      };
      CurrencySymbol.value = new CurrencySymbol();
      return CurrencySymbol;
  })();
  var ModifierSymbol = (function () {
      function ModifierSymbol() {

      };
      ModifierSymbol.value = new ModifierSymbol();
      return ModifierSymbol;
  })();
  var OtherSymbol = (function () {
      function OtherSymbol() {

      };
      OtherSymbol.value = new OtherSymbol();
      return OtherSymbol;
  })();
  var Space = (function () {
      function Space() {

      };
      Space.value = new Space();
      return Space;
  })();
  var LineSeparator = (function () {
      function LineSeparator() {

      };
      LineSeparator.value = new LineSeparator();
      return LineSeparator;
  })();
  var ParagraphSeparator = (function () {
      function ParagraphSeparator() {

      };
      ParagraphSeparator.value = new ParagraphSeparator();
      return ParagraphSeparator;
  })();
  var Control = (function () {
      function Control() {

      };
      Control.value = new Control();
      return Control;
  })();
  var Format = (function () {
      function Format() {

      };
      Format.value = new Format();
      return Format;
  })();
  var Surrogate = (function () {
      function Surrogate() {

      };
      Surrogate.value = new Surrogate();
      return Surrogate;
  })();
  var PrivateUse = (function () {
      function PrivateUse() {

      };
      PrivateUse.value = new PrivateUse();
      return PrivateUse;
  })();
  var NotAssigned = (function () {
      function NotAssigned() {

      };
      NotAssigned.value = new NotAssigned();
      return NotAssigned;
  })();
  var unicodeCatToGeneralCat = function (v) {
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_LU) {
          return UppercaseLetter.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_LL) {
          return LowercaseLetter.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_LT) {
          return TitlecaseLetter.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_LM) {
          return ModifierLetter.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_LO) {
          return OtherLetter.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_MN) {
          return NonSpacingMark.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_MC) {
          return SpacingCombiningMark.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_ME) {
          return EnclosingMark.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_ND) {
          return DecimalNumber.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_NL) {
          return LetterNumber.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_NO) {
          return OtherNumber.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PC) {
          return ConnectorPunctuation.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PD) {
          return DashPunctuation.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PS) {
          return OpenPunctuation.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PE) {
          return ClosePunctuation.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PI) {
          return InitialQuote.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PF) {
          return FinalQuote.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_PO) {
          return OtherPunctuation.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_SM) {
          return MathSymbol.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_SC) {
          return CurrencySymbol.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_SK) {
          return ModifierSymbol.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_SO) {
          return OtherSymbol.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_ZS) {
          return Space.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_ZL) {
          return LineSeparator.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_ZP) {
          return ParagraphSeparator.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_CC) {
          return Control.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_CF) {
          return Format.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_CS) {
          return Surrogate.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_CO) {
          return PrivateUse.value;
      };
      if (v instanceof Data_CodePoint_Unicode_Internal.NUMCAT_CN) {
          return NotAssigned.value;
      };
      throw new Error("Failed pattern match at Data.CodePoint.Unicode (line 206, column 1 - line 206, column 61): " + [ v.constructor.name ]);
  };
  var generalCategory = (function () {
      var $64 = Data_Functor.map(Data_Maybe.functorMaybe)(unicodeCatToGeneralCat);
      var $65 = Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);
      return function ($66) {
          return $64(Data_CodePoint_Unicode_Internal.uGencat($65($66)));
      };
  })();
  var generalCatToInt = function (v) {
      if (v instanceof UppercaseLetter) {
          return 1;
      };
      if (v instanceof LowercaseLetter) {
          return 2;
      };
      if (v instanceof TitlecaseLetter) {
          return 3;
      };
      if (v instanceof ModifierLetter) {
          return 4;
      };
      if (v instanceof OtherLetter) {
          return 5;
      };
      if (v instanceof NonSpacingMark) {
          return 6;
      };
      if (v instanceof SpacingCombiningMark) {
          return 7;
      };
      if (v instanceof EnclosingMark) {
          return 8;
      };
      if (v instanceof DecimalNumber) {
          return 9;
      };
      if (v instanceof LetterNumber) {
          return 10;
      };
      if (v instanceof OtherNumber) {
          return 11;
      };
      if (v instanceof ConnectorPunctuation) {
          return 12;
      };
      if (v instanceof DashPunctuation) {
          return 13;
      };
      if (v instanceof OpenPunctuation) {
          return 14;
      };
      if (v instanceof ClosePunctuation) {
          return 15;
      };
      if (v instanceof InitialQuote) {
          return 16;
      };
      if (v instanceof FinalQuote) {
          return 17;
      };
      if (v instanceof OtherPunctuation) {
          return 18;
      };
      if (v instanceof MathSymbol) {
          return 19;
      };
      if (v instanceof CurrencySymbol) {
          return 20;
      };
      if (v instanceof ModifierSymbol) {
          return 21;
      };
      if (v instanceof OtherSymbol) {
          return 22;
      };
      if (v instanceof Space) {
          return 23;
      };
      if (v instanceof LineSeparator) {
          return 24;
      };
      if (v instanceof ParagraphSeparator) {
          return 25;
      };
      if (v instanceof Control) {
          return 26;
      };
      if (v instanceof Format) {
          return 27;
      };
      if (v instanceof Surrogate) {
          return 28;
      };
      if (v instanceof PrivateUse) {
          return 29;
      };
      if (v instanceof NotAssigned) {
          return 30;
      };
      throw new Error("Failed pattern match at Data.CodePoint.Unicode (line 142, column 1 - line 142, column 42): " + [ v.constructor.name ]);
  };
  var eqGeneralCategory = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof UppercaseLetter && v1 instanceof UppercaseLetter) {
                  return true;
              };
              if (v instanceof LowercaseLetter && v1 instanceof LowercaseLetter) {
                  return true;
              };
              if (v instanceof TitlecaseLetter && v1 instanceof TitlecaseLetter) {
                  return true;
              };
              if (v instanceof ModifierLetter && v1 instanceof ModifierLetter) {
                  return true;
              };
              if (v instanceof OtherLetter && v1 instanceof OtherLetter) {
                  return true;
              };
              if (v instanceof NonSpacingMark && v1 instanceof NonSpacingMark) {
                  return true;
              };
              if (v instanceof SpacingCombiningMark && v1 instanceof SpacingCombiningMark) {
                  return true;
              };
              if (v instanceof EnclosingMark && v1 instanceof EnclosingMark) {
                  return true;
              };
              if (v instanceof DecimalNumber && v1 instanceof DecimalNumber) {
                  return true;
              };
              if (v instanceof LetterNumber && v1 instanceof LetterNumber) {
                  return true;
              };
              if (v instanceof OtherNumber && v1 instanceof OtherNumber) {
                  return true;
              };
              if (v instanceof ConnectorPunctuation && v1 instanceof ConnectorPunctuation) {
                  return true;
              };
              if (v instanceof DashPunctuation && v1 instanceof DashPunctuation) {
                  return true;
              };
              if (v instanceof OpenPunctuation && v1 instanceof OpenPunctuation) {
                  return true;
              };
              if (v instanceof ClosePunctuation && v1 instanceof ClosePunctuation) {
                  return true;
              };
              if (v instanceof InitialQuote && v1 instanceof InitialQuote) {
                  return true;
              };
              if (v instanceof FinalQuote && v1 instanceof FinalQuote) {
                  return true;
              };
              if (v instanceof OtherPunctuation && v1 instanceof OtherPunctuation) {
                  return true;
              };
              if (v instanceof MathSymbol && v1 instanceof MathSymbol) {
                  return true;
              };
              if (v instanceof CurrencySymbol && v1 instanceof CurrencySymbol) {
                  return true;
              };
              if (v instanceof ModifierSymbol && v1 instanceof ModifierSymbol) {
                  return true;
              };
              if (v instanceof OtherSymbol && v1 instanceof OtherSymbol) {
                  return true;
              };
              if (v instanceof Space && v1 instanceof Space) {
                  return true;
              };
              if (v instanceof LineSeparator && v1 instanceof LineSeparator) {
                  return true;
              };
              if (v instanceof ParagraphSeparator && v1 instanceof ParagraphSeparator) {
                  return true;
              };
              if (v instanceof Control && v1 instanceof Control) {
                  return true;
              };
              if (v instanceof Format && v1 instanceof Format) {
                  return true;
              };
              if (v instanceof Surrogate && v1 instanceof Surrogate) {
                  return true;
              };
              if (v instanceof PrivateUse && v1 instanceof PrivateUse) {
                  return true;
              };
              if (v instanceof NotAssigned && v1 instanceof NotAssigned) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordGeneralCategory = {
      compare: function (catA) {
          return function (catB) {
              return Data_Ord.compare(Data_Ord.ordInt)(generalCatToInt(catA))(generalCatToInt(catB));
          };
      },
      Eq0: function () {
          return eqGeneralCategory;
      }
  };
  exports["UppercaseLetter"] = UppercaseLetter;
  exports["LowercaseLetter"] = LowercaseLetter;
  exports["TitlecaseLetter"] = TitlecaseLetter;
  exports["OtherLetter"] = OtherLetter;
  exports["DecimalNumber"] = DecimalNumber;
  exports["LetterNumber"] = LetterNumber;
  exports["OtherNumber"] = OtherNumber;
  exports["ConnectorPunctuation"] = ConnectorPunctuation;
  exports["DashPunctuation"] = DashPunctuation;
  exports["OpenPunctuation"] = OpenPunctuation;
  exports["ClosePunctuation"] = ClosePunctuation;
  exports["InitialQuote"] = InitialQuote;
  exports["FinalQuote"] = FinalQuote;
  exports["OtherPunctuation"] = OtherPunctuation;
  exports["MathSymbol"] = MathSymbol;
  exports["CurrencySymbol"] = CurrencySymbol;
  exports["ModifierSymbol"] = ModifierSymbol;
  exports["OtherSymbol"] = OtherSymbol;
  exports["generalCategory"] = generalCategory;
  exports["ordGeneralCategory"] = ordGeneralCategory;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.Types"] = $PS["Tidy.Codegen.Types"] || {};
  var exports = $PS["Tidy.Codegen.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var SourceString = function (x) {
      return x;
  };
  var Qualified = (function () {
      function Qualified(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Qualified.create = function (value0) {
          return function (value1) {
              return new Qualified(value0, value1);
          };
      };
      return Qualified;
  })();
  var ordSymbolName = Data_Ord.ordString;
  var functorBinaryOp = Data_Tuple.functorTuple;
  var eqSymbolName = Data_Eq.eqString;
  exports["Qualified"] = Qualified;
  exports["SourceString"] = SourceString;
  exports["eqSymbolName"] = eqSymbolName;
  exports["ordSymbolName"] = ordSymbolName;
  exports["functorBinaryOp"] = functorBinaryOp;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.String"] = $PS["Tidy.Codegen.String"] || {};
  var exports = $PS["Tidy.Codegen.String"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_CodePoint_Unicode = $PS["Data.CodePoint.Unicode"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Tidy_Codegen_Types = $PS["Tidy.Codegen.Types"];                
  var escapeSourceString = (function () {
      var toHex = function (cp) {
          var hex = Data_Int.toStringAs(Data_Int.hexadecimal)(Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint)(cp));
          return Data_Monoid.power(Data_Monoid.monoidString)("0")(6 - Data_String_CodeUnits.length(hex) | 0) + hex;
      };
      var categories = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_CodePoint_Unicode.ordGeneralCategory)([ Data_CodePoint_Unicode.UppercaseLetter.value, Data_CodePoint_Unicode.LowercaseLetter.value, Data_CodePoint_Unicode.TitlecaseLetter.value, Data_CodePoint_Unicode.OtherLetter.value, Data_CodePoint_Unicode.DecimalNumber.value, Data_CodePoint_Unicode.LetterNumber.value, Data_CodePoint_Unicode.OtherNumber.value, Data_CodePoint_Unicode.ConnectorPunctuation.value, Data_CodePoint_Unicode.DashPunctuation.value, Data_CodePoint_Unicode.OpenPunctuation.value, Data_CodePoint_Unicode.ClosePunctuation.value, Data_CodePoint_Unicode.InitialQuote.value, Data_CodePoint_Unicode.FinalQuote.value, Data_CodePoint_Unicode.OtherPunctuation.value, Data_CodePoint_Unicode.MathSymbol.value, Data_CodePoint_Unicode.CurrencySymbol.value, Data_CodePoint_Unicode.ModifierSymbol.value, Data_CodePoint_Unicode.OtherSymbol.value ]);
      var shouldPrint = (function () {
          var $1 = Data_Maybe.maybe(false)(Data_Function.flip(Data_Set.member(Data_CodePoint_Unicode.ordGeneralCategory))(categories));
          return function ($2) {
              return $1(Data_CodePoint_Unicode.generalCategory($2));
          };
      })();
      var $$escape = function (cp) {
          if (Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(cp)(Data_String_CodePoints.codePointFromChar("\x0a"))) {
              return "\\n";
          };
          if (Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(cp)(Data_String_CodePoints.codePointFromChar("\x0d"))) {
              return "\\r";
          };
          if (Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(cp)(Data_String_CodePoints.codePointFromChar("\x09"))) {
              return "\\t";
          };
          if (Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(cp)(Data_String_CodePoints.codePointFromChar("\\"))) {
              return "\\\\";
          };
          if (Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(cp)(Data_String_CodePoints.codePointFromChar("\""))) {
              return "\\\"";
          };
          if (shouldPrint(cp)) {
              return Data_String_CodePoints.singleton(cp);
          };
          if (Data_Boolean.otherwise) {
              return "\\x" + toHex(cp);
          };
          throw new Error("Failed pattern match at Tidy.Codegen.String (line 21, column 3 - line 21, column 32): " + [ cp.constructor.name ]);
      };
      var $3 = Data_Array.foldMap(Data_Monoid.monoidString)($$escape);
      return function ($4) {
          return Tidy_Codegen_Types.SourceString($3(Data_String_CodePoints.toCodePointArray($4)));
      };
  })();
  exports["escapeSourceString"] = escapeSourceString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Equality"] = $PS["Type.Equality"] || {};
  var exports = $PS["Type.Equality"];
  var refl = {
      proof: function (a) {
          return a;
      },
      Coercible0: function () {
          return undefined;
      }
  };
  exports["refl"] = refl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.Class"] = $PS["Tidy.Codegen.Class"] || {};
  var exports = $PS["Tidy.Codegen.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Partial = $PS["Partial"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Tidy_Codegen_Common = $PS["Tidy.Codegen.Common"];
  var Tidy_Codegen_String = $PS["Tidy.Codegen.String"];
  var Tidy_Codegen_Types = $PS["Tidy.Codegen.Types"];
  var Type_Equality = $PS["Type.Equality"];
  var toWhereExpr = {
      toWhere: function ($615) {
          return PureScript_CST_Types.Where((function (v) {
              return {
                  bindings: Data_Maybe.Nothing.value,
                  expr: v
              };
          })($615));
      }
  };
  var toTokenSymbolNameSymbolNa = {
      toToken: function (str) {
          return new Data_Tuple.Tuple(new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, Data_Newtype.unwrap()(str)), str);
      }
  };
  var toTokenProperProper = {
      toToken: function (str) {
          return new Data_Tuple.Tuple(new PureScript_CST_Types.TokUpperName(Data_Maybe.Nothing.value, Data_Newtype.unwrap()(str)), str);
      }
  };
  var toTokenModuleNameModuleNa = {
      toToken: function (v) {
          var token = Data_Maybe.fromMaybe(new PureScript_CST_Types.TokUpperName(Data_Maybe.Nothing.value, v))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_CodePoints.lastIndexOf(".")(v))(function (ix) {
              var qual = Data_String_CodePoints.take(ix)(v);
              var mod = Data_String_CodePoints.drop(ix + 1 | 0)(v);
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PureScript_CST_Types.TokUpperName(new Data_Maybe.Just(qual), mod));
          }));
          return new Data_Tuple.Tuple(token, v);
      }
  };
  var toTokenLabelLabel = {
      toToken: function (v) {
          return new Data_Tuple.Tuple(new PureScript_CST_Types.TokString(Data_Newtype.unwrap()(Tidy_Codegen_String.escapeSourceString(v)), v), v);
      }
  };
  var toTokenIdentIdent = {
      toToken: function (str) {
          return new Data_Tuple.Tuple(new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, Data_Newtype.unwrap()(str)), str);
      }
  };
  var toQualifiedNameQualifiedN = {
      toQualifiedName: Control_Category.identity(Control_Category.categoryFn)
  };
  var toQualifiedNameQualifiedN2 = {
      toQualifiedName: function (v) {
          if (v.token.value instanceof PureScript_CST_Types.TokSymbolName) {
              return {
                  module: v.token.value.value0,
                  token: Tidy_Codegen_Common.toSourceToken(new PureScript_CST_Types.TokOperator(v.token.value.value0, v.token.value.value1)),
                  name: v.token.value.value1
              };
          };
          return {
              token: v.token,
              module: v.module,
              name: Safe_Coerce.coerce()(v.name)
          };
      }
  };
  var toGuardedWhere = {
      toGuarded: PureScript_CST_Types.Unconditional.create
  };
  var overTrailingCommentsModul = {
      overTrailingComments: function (k) {
          return function (v) {
              return {
                  decls: v.decls,
                  trailingComments: k(v.trailingComments),
                  end: v.end
              };
          };
      }
  };
  var overLeadingCommentsRecord = function (dictTypeEquals) {
      return {
          overLeadingComments: function (k) {
              return function (r) {
                  var r$prime = Safe_Coerce.coerce()(r);
                  return Safe_Coerce.coerce()((function () {
                      var $343 = {};
                      for (var $344 in r$prime) {
                          if ({}.hasOwnProperty.call(r$prime, $344)) {
                              $343[$344] = r$prime[$344];
                          };
                      };
                      $343.leadingComments = k(r$prime.leadingComments);
                      return $343;
                  })());
              };
          }
      };
  };
  var fromTokenQualifiedSymbolN = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokSymbolName) {
              return new Data_Maybe.Just(new Tidy_Codegen_Types.Qualified(v.value0, v.value1));
          };
          if (v instanceof PureScript_CST_Types.TokOperator) {
              return new Data_Maybe.Just(new Tidy_Codegen_Types.Qualified(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenQualifiedProper = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokUpperName) {
              return new Data_Maybe.Just(new Tidy_Codegen_Types.Qualified(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenQualifiedOperato = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokOperator) {
              return new Data_Maybe.Just(new Tidy_Codegen_Types.Qualified(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenQualifiedIdent = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName) {
              return new Data_Maybe.Just(new Tidy_Codegen_Types.Qualified(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenProper = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokUpperName && v.value0 instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v.value1);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenModuleName = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokUpperName && v.value0 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(Data_Newtype.unwrap()(v.value0.value0) + ("." + v.value1));
          };
          if (v instanceof PureScript_CST_Types.TokUpperName && v.value0 instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v.value1);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromTokenIdent = {
      fromToken: function (v) {
          if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v.value1);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var toWhere = function (dict) {
      return dict.toWhere;
  };
  var toGuardedExpr = {
      toGuarded: function (tok) {
          var $620 = PureScript_CST_Types.Unconditional.create(tok);
          var $621 = toWhere(toWhereExpr);
          return function ($622) {
              return $620($621($622));
          };
      }
  };
  var toToken = function (dict) {
      return dict.toToken;
  };
  var toTokenStringLabel = {
      toToken: function (str) {
          var v = PureScript_CST_Lexer.lexToken(str);
          if (v instanceof Data_Either.Right && (v.value0 instanceof PureScript_CST_Types.TokLowerName && v.value0.value0 instanceof Data_Maybe.Nothing)) {
              return new Data_Tuple.Tuple(v.value0, v.value0.value1);
          };
          return toToken(toTokenLabelLabel)(str);
      }
  };
  var toQualifiedName = function (dict) {
      return dict.toQualifiedName;
  };
  var toName = function (dict) {
      return dict.toName;
  };
  var toModuleName = function (dict) {
      return dict.toModuleName;
  };
  var toGuarded = function (dict) {
      return dict.toGuarded;
  };
  var overTrailingComments = function (dict) {
      return dict.overTrailingComments;
  };
  var overTrailingCommentsModul1 = {
      overTrailingComments: function (k) {
          return function (v) {
              return {
                  header: v.header,
                  body: overTrailingComments(overTrailingCommentsModul)(k)(v.body)
              };
          };
      }
  };
  var overLeadingComments = function (dict) {
      return dict.overLeadingComments;
  };
  var overLeadingCommentsImport = {
      overLeadingComments: function (k) {
          return function (v) {
              return {
                  keyword: overLeadingComments(overLeadingCommentsRecord(Type_Equality.refl))(k)(v.keyword),
                  module: v.module,
                  names: v.names,
                  qualified: v.qualified
              };
          };
      }
  };
  var fromToken = function (dict) {
      return dict.fromToken;
  };
  var toTokenFromString = function () {
      return function (dictFromToken) {
          return function (v) {
              return function (str) {
                  var v1 = PureScript_CST_Lexer.lexToken(str);
                  var v2 = function (v3) {
                      return Partial.crashWith()(v + (": " + str));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      var $597 = fromToken(dictFromToken)(v1.value0);
                      if ($597 instanceof Data_Maybe.Just) {
                          return new Data_Tuple.Tuple(v1.value0, $597.value0);
                      };
                      return v2(true);
                  };
                  return v2(true);
              };
          };
      };
  };
  var toTokenStringIdent = function () {
      return {
          toToken: toTokenFromString()(fromTokenIdent)("Not an Ident")
      };
  };
  var toTokenStringModuleName = function () {
      return {
          toToken: toTokenFromString()(fromTokenModuleName)("Not a ModuleName")
      };
  };
  var toModuleNameString = function () {
      return {
          toModuleName: (function () {
              var $630 = toToken(toTokenStringModuleName());
              return function ($631) {
                  return Data_Tuple.snd($630($631));
              };
          })()
      };
  };
  var toTokenStringProper = function () {
      return {
          toToken: toTokenFromString()(fromTokenProper)("Not a Proper")
      };
  };
  var toTokenStringQualifiedIde = function () {
      return {
          toToken: toTokenFromString()(fromTokenQualifiedIdent)("Not a Qualified dIdent")
      };
  };
  var toTokenStringQualifiedPro = function () {
      return {
          toToken: toTokenFromString()(fromTokenQualifiedProper)("Not a Qualified Proper")
      };
  };
  var toTokenStringQualifiedSym = function () {
      return {
          toToken: toTokenFromString()(fromTokenQualifiedSymbolN)("Not a Qualified SymbolName")
      };
  };
  var toQualifiedNameString = function () {
      return function (dictFromToken) {
          return {
              toQualifiedName: function (str) {
                  var v = PureScript_CST_Lexer.lexToken(str);
                  var v1 = function (v2) {
                      return Partial.crashWith()("Not a QualifiedName: " + str);
                  };
                  if (v instanceof Data_Either.Right) {
                      var $601 = fromToken(dictFromToken)(v.value0);
                      if ($601 instanceof Data_Maybe.Just) {
                          return {
                              module: $601.value0.value0,
                              name: $601.value0.value1,
                              token: Tidy_Codegen_Common.toSourceToken(v.value0)
                          };
                      };
                      return v1(true);
                  };
                  return v1(true);
              }
          };
      };
  };
  var defaultToName = function (dictToToken) {
      return function (val) {
          var v = toToken(dictToToken)(val);
          return {
              name: v.value1,
              token: Tidy_Codegen_Common.toSourceToken(v.value0)
          };
      };
  };
  var toNameIdentIdent = {
      toName: defaultToName(toTokenIdentIdent)
  };
  var toNameModuleNameModuleNam = {
      toName: defaultToName(toTokenModuleNameModuleNa)
  };
  var toNameProperProper = {
      toName: defaultToName(toTokenProperProper)
  };
  var toNameStringIdent = function () {
      return {
          toName: defaultToName(toTokenStringIdent())
      };
  };
  var toNameStringLabel = {
      toName: defaultToName(toTokenStringLabel)
  };
  var toNameStringModuleName = function () {
      return {
          toName: defaultToName(toTokenStringModuleName())
      };
  };
  var toNameStringProper = function () {
      return {
          toName: defaultToName(toTokenStringProper())
      };
  };
  var toNameSymbolNameSymbolNam = {
      toName: defaultToName(toTokenSymbolNameSymbolNa)
  };
  exports["overLeadingComments"] = overLeadingComments;
  exports["overTrailingComments"] = overTrailingComments;
  exports["toGuarded"] = toGuarded;
  exports["toModuleName"] = toModuleName;
  exports["toName"] = toName;
  exports["toQualifiedName"] = toQualifiedName;
  exports["toToken"] = toToken;
  exports["toTokenStringProper"] = toTokenStringProper;
  exports["toTokenStringQualifiedIde"] = toTokenStringQualifiedIde;
  exports["toTokenStringQualifiedPro"] = toTokenStringQualifiedPro;
  exports["toTokenStringQualifiedSym"] = toTokenStringQualifiedSym;
  exports["toNameStringIdent"] = toNameStringIdent;
  exports["toNameIdentIdent"] = toNameIdentIdent;
  exports["toNameStringProper"] = toNameStringProper;
  exports["toNameProperProper"] = toNameProperProper;
  exports["toNameSymbolNameSymbolNam"] = toNameSymbolNameSymbolNam;
  exports["toNameStringLabel"] = toNameStringLabel;
  exports["toNameStringModuleName"] = toNameStringModuleName;
  exports["toNameModuleNameModuleNam"] = toNameModuleNameModuleNam;
  exports["fromTokenQualifiedIdent"] = fromTokenQualifiedIdent;
  exports["fromTokenQualifiedProper"] = fromTokenQualifiedProper;
  exports["fromTokenQualifiedOperato"] = fromTokenQualifiedOperato;
  exports["toQualifiedNameString"] = toQualifiedNameString;
  exports["toQualifiedNameQualifiedN2"] = toQualifiedNameQualifiedN2;
  exports["toQualifiedNameQualifiedN"] = toQualifiedNameQualifiedN;
  exports["toModuleNameString"] = toModuleNameString;
  exports["toGuardedExpr"] = toGuardedExpr;
  exports["toGuardedWhere"] = toGuardedWhere;
  exports["overTrailingCommentsModul1"] = overTrailingCommentsModul1;
  exports["overLeadingCommentsImport"] = overLeadingCommentsImport;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.Precedence"] = $PS["Tidy.Codegen.Precedence"] || {};
  var exports = $PS["Tidy.Codegen.Precedence"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Tidy_Codegen_Common = $PS["Tidy.Codegen.Common"];                
  var typeParens = (function () {
      var $215 = Tidy_Codegen_Common.toWrapped(Tidy_Codegen_Common.tokLeftParen)(Tidy_Codegen_Common.tokRightParen);
      return function ($216) {
          return PureScript_CST_Types.TypeParens.create($215($216));
      };
  })();
  var precType3 = function (a) {
      if (a instanceof PureScript_CST_Types.TypeConstrained) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeForall) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeArrow) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeKinded) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeOp) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeApp) {
          return typeParens(a);
      };
      return a;
  };
  var precType2 = function (a) {
      if (a instanceof PureScript_CST_Types.TypeConstrained) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeForall) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeArrow) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeKinded) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeOp) {
          return typeParens(a);
      };
      return a;
  };
  var precType1 = function (a) {
      if (a instanceof PureScript_CST_Types.TypeKinded) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeForall) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeArrow) {
          return typeParens(a);
      };
      if (a instanceof PureScript_CST_Types.TypeConstrained) {
          return typeParens(a);
      };
      return a;
  };
  var precType0 = function (a) {
      if (a instanceof PureScript_CST_Types.TypeKinded) {
          return typeParens(a);
      };
      return a;
  };
  var precInitLast = function (p1) {
      return function (p2) {
          var $217 = Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return Data_Array_NonEmpty["snoc'"](Data_Functor.map(Data_Functor.functorArray)(p1)(v.init))(p2(v.last));
          });
          return function ($218) {
              return $217(Data_Array.unsnoc($218));
          };
      };
  };
  var exprParens = (function () {
      var $219 = Tidy_Codegen_Common.toWrapped(Tidy_Codegen_Common.tokLeftParen)(Tidy_Codegen_Common.tokRightParen);
      return function ($220) {
          return PureScript_CST_Types.ExprParens.create($219($220));
      };
  })();
  var precExpr0 = function (a) {
      if (a instanceof PureScript_CST_Types.ExprTyped) {
          return exprParens(a);
      };
      return a;
  };
  var precExpr1 = function (a) {
      if (a instanceof PureScript_CST_Types.ExprTyped) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprOp) {
          return exprParens(a);
      };
      return a;
  };
  var precExpr2 = function (a) {
      if (a instanceof PureScript_CST_Types.ExprTyped) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprOp) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprLambda) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprIf) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprLet) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprAdo) {
          return exprParens(a);
      };
      return a;
  };
  var precExprApp = function (a) {
      if (a instanceof PureScript_CST_Types.ExprTyped) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprOp) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprLambda) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprIf) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprLet) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprAdo) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprInfix) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprApp) {
          return exprParens(a);
      };
      return a;
  };
  var precExprAppLast = function (a) {
      if (a instanceof PureScript_CST_Types.ExprTyped) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprOp) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprInfix) {
          return exprParens(a);
      };
      if (a instanceof PureScript_CST_Types.ExprApp) {
          return exprParens(a);
      };
      return a;
  };
  exports["precType0"] = precType0;
  exports["precType1"] = precType1;
  exports["precType2"] = precType2;
  exports["precType3"] = precType3;
  exports["precExpr0"] = precExpr0;
  exports["precExpr1"] = precExpr1;
  exports["precExpr2"] = precExpr2;
  exports["precExprApp"] = precExprApp;
  exports["precExprAppLast"] = precExprAppLast;
  exports["precInitLast"] = precInitLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Operators"] = $PS["Tidy.Operators"] || {};
  var exports = $PS["Tidy.Operators"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var PureScript_CST_Lexer = $PS["PureScript.CST.Lexer"];
  var PureScript_CST_TokenStream = $PS["PureScript.CST.TokenStream"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Tidy_Precedence = $PS["Tidy.Precedence"];
  var parseOperatorPrec = (function () {
      var tokenStreamToArray = (function () {
          var go = function (acc) {
              return function ($76) {
                  return (function (v) {
                      if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                          return new Data_Either.Right(acc);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenError) {
                          return new Data_Either.Left(v.value1);
                      };
                      if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                          return go(Data_Array.snoc(acc)(v.value0.value))(v.value2);
                      };
                      throw new Error("Failed pattern match at Tidy.Operators (line 33, column 35 - line 39, column 43): " + [ v.constructor.name ]);
                  })(PureScript_CST_TokenStream.step($76));
              };
          };
          return go([  ]);
      })();
      return function ($77) {
          return (function (v) {
              if (v instanceof Data_Either.Right && (v.value0.length === 2 && (v["value0"][0] instanceof PureScript_CST_Types.TokSymbolName && (v["value0"][1] instanceof PureScript_CST_Types.TokInt && v["value0"][1].value1 instanceof PureScript_CST_Types.SmallInt)))) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(new Tidy_Precedence.QualifiedOperator(v["value0"][0].value0, Tidy_Precedence.OperatorValue.value, v["value0"][0].value1), v["value0"][1].value1.value0));
              };
              if (v instanceof Data_Either.Right && (v.value0.length === 3 && (v["value0"][0] instanceof PureScript_CST_Types.TokSymbolName && (v["value0"][1] instanceof PureScript_CST_Types.TokLowerName && (v["value0"][1].value0 instanceof Data_Maybe.Nothing && (v["value0"][1].value1 === "type" && (v["value0"][2] instanceof PureScript_CST_Types.TokInt && v["value0"][2].value1 instanceof PureScript_CST_Types.SmallInt))))))) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(new Tidy_Precedence.QualifiedOperator(v["value0"][0].value0, Tidy_Precedence.OperatorType.value, v["value0"][0].value1), v["value0"][2].value1.value0));
              };
              return Data_Maybe.Nothing.value;
          })(tokenStreamToArray(PureScript_CST_Lexer.lex($77)));
      };
  })();
  var parseOperatorTable = (function () {
      var $78 = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(Tidy_Precedence.insertOperator))(Data_Map_Internal.empty);
      var $79 = Data_Array.mapMaybe(parseOperatorPrec);
      return function ($80) {
          return $78($79($80));
      };
  })();
  exports["parseOperatorTable"] = parseOperatorTable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Operators.Defaults"] = $PS["Tidy.Operators.Defaults"] || {};
  var exports = $PS["Tidy.Operators.Defaults"];
  var defaultOperators = [ "Control.Alt.($>) 4", "Control.Alt.(<#>) 1", "Control.Alt.(<$) 4", "Control.Alt.(<$>) 4", "Control.Alt.(<@>) 4", "Control.Alt.(<|>) 3", "Control.Alternative.($>) 4", "Control.Alternative.(*>) 4", "Control.Alternative.(<#>) 1", "Control.Alternative.(<$) 4", "Control.Alternative.(<$>) 4", "Control.Alternative.(<*) 4", "Control.Alternative.(<*>) 4", "Control.Alternative.(<@>) 4", "Control.Alternative.(<|>) 3", "Control.Applicative.($>) 4", "Control.Applicative.(*>) 4", "Control.Applicative.(<#>) 1", "Control.Applicative.(<$) 4", "Control.Applicative.(<$>) 4", "Control.Applicative.(<*) 4", "Control.Applicative.(<*>) 4", "Control.Applicative.(<@>) 4", "Control.Apply.($>) 4", "Control.Apply.(*>) 4", "Control.Apply.(<#>) 1", "Control.Apply.(<$) 4", "Control.Apply.(<$>) 4", "Control.Apply.(<*) 4", "Control.Apply.(<*>) 4", "Control.Apply.(<@>) 4", "Control.Biapply.(*>>) 4", "Control.Biapply.(<<$>>) 4", "Control.Biapply.(<<*) 4", "Control.Biapply.(<<*>>) 4", "Control.Bind.($>) 4", "Control.Bind.(*>) 4", "Control.Bind.(<#>) 1", "Control.Bind.(<$) 4", "Control.Bind.(<$>) 4", "Control.Bind.(<*) 4", "Control.Bind.(<*>) 4", "Control.Bind.(<=<) 1", "Control.Bind.(<@>) 4", "Control.Bind.(=<<) 1", "Control.Bind.(>=>) 1", "Control.Bind.(>>=) 1", "Control.Category.(<<<) 9", "Control.Category.(>>>) 9", "Control.Comonad.($>) 4", "Control.Comonad.(<#>) 1", "Control.Comonad.(<$) 4", "Control.Comonad.(<$>) 4", "Control.Comonad.(<<=) 1", "Control.Comonad.(<@>) 4", "Control.Comonad.(=<=) 1", "Control.Comonad.(=>=) 1", "Control.Comonad.(=>>) 1", "Control.Comonad.Cofree.(:<) 5", "Control.Coroutine.($$) 2", "Control.Coroutine.($~) 2", "Control.Coroutine.(/\\) 3", "Control.Coroutine.(\\/) 3", "Control.Coroutine.(~$) 2", "Control.Coroutine.(~~) 2", "Control.Extend.($>) 4", "Control.Extend.(<#>) 1", "Control.Extend.(<$) 4", "Control.Extend.(<$>) 4", "Control.Extend.(<<=) 1", "Control.Extend.(<@>) 4", "Control.Extend.(=<=) 1", "Control.Extend.(=>=) 1", "Control.Extend.(=>>) 1", "Control.Monad.($>) 4", "Control.Monad.(*>) 4", "Control.Monad.(<#>) 1", "Control.Monad.(<$) 4", "Control.Monad.(<$>) 4", "Control.Monad.(<*) 4", "Control.Monad.(<*>) 4", "Control.Monad.(<=<) 1", "Control.Monad.(<@>) 4", "Control.Monad.(=<<) 1", "Control.Monad.(>=>) 1", "Control.Monad.(>>=) 1", "Control.MonadPlus.($>) 4", "Control.MonadPlus.(*>) 4", "Control.MonadPlus.(<#>) 1", "Control.MonadPlus.(<$) 4", "Control.MonadPlus.(<$>) 4", "Control.MonadPlus.(<*) 4", "Control.MonadPlus.(<*>) 4", "Control.MonadPlus.(<=<) 1", "Control.MonadPlus.(<@>) 4", "Control.MonadPlus.(<|>) 3", "Control.MonadPlus.(=<<) 1", "Control.MonadPlus.(>=>) 1", "Control.MonadPlus.(>>=) 1", "Control.MonadZero.($>) 4", "Control.MonadZero.(*>) 4", "Control.MonadZero.(<#>) 1", "Control.MonadZero.(<$) 4", "Control.MonadZero.(<$>) 4", "Control.MonadZero.(<*) 4", "Control.MonadZero.(<*>) 4", "Control.MonadZero.(<=<) 1", "Control.MonadZero.(<@>) 4", "Control.MonadZero.(<|>) 3", "Control.MonadZero.(=<<) 1", "Control.MonadZero.(>=>) 1", "Control.MonadZero.(>>=) 1", "Control.Plus.($>) 4", "Control.Plus.(<#>) 1", "Control.Plus.(<$) 4", "Control.Plus.(<$>) 4", "Control.Plus.(<@>) 4", "Control.Plus.(<|>) 3", "Control.Semigroupoid.(<<<) 9", "Control.Semigroupoid.(>>>) 9", "Data.Argonaut.(.!=) 6", "Data.Argonaut.(.:) 7", "Data.Argonaut.(.:!) 7", "Data.Argonaut.(.:?) 7", "Data.Argonaut.(:=) 7", "Data.Argonaut.(:=?) 7", "Data.Argonaut.(~>) 6", "Data.Argonaut.(~>?) 6", "Data.Argonaut.Decode.(.!=) 6", "Data.Argonaut.Decode.(.:) 7", "Data.Argonaut.Decode.(.:!) 7", "Data.Argonaut.Decode.(.:?) 7", "Data.Argonaut.Decode.Combinators.(.!=) 6", "Data.Argonaut.Decode.Combinators.(.:) 7", "Data.Argonaut.Decode.Combinators.(.:!) 7", "Data.Argonaut.Decode.Combinators.(.:?) 7", "Data.Argonaut.Encode.(:=) 7", "Data.Argonaut.Encode.(:=?) 7", "Data.Argonaut.Encode.(~>) 6", "Data.Argonaut.Encode.(~>?) 6", "Data.Argonaut.Encode.Combinators.(:=) 7", "Data.Argonaut.Encode.Combinators.(:=?) 7", "Data.Argonaut.Encode.Combinators.(~>) 6", "Data.Argonaut.Encode.Combinators.(~>?) 6", "Data.Array.(!!) 8", "Data.Array.(..) 8", "Data.Array.(:) 6", "Data.Array.(\\\\) 5", "Data.Array.NonEmpty.(!!) 8", "Data.Array.NonEmpty.(..) 8", "Data.Array.NonEmpty.(:) 6", "Data.Array.NonEmpty.(\\\\) 5", "Data.BooleanAlgebra.(&&) 3", "Data.BooleanAlgebra.(||) 2", "Data.Bounded.(<) 4", "Data.Bounded.(<=) 4", "Data.Bounded.(>) 4", "Data.Bounded.(>=) 4", "Data.CommutativeRing.(*) 7", "Data.CommutativeRing.(+) 6", "Data.CommutativeRing.(-) 6", "Data.DivisionRing.(*) 7", "Data.DivisionRing.(+) 6", "Data.DivisionRing.(-) 6", "Data.Either.Nested.(\\/) type 6", "Data.Either.Nested.(\\/) 6", "Data.Eq.(/=) 4", "Data.Eq.(==) 4", "Data.EuclideanRing.(*) 7", "Data.EuclideanRing.(+) 6", "Data.EuclideanRing.(-) 6", "Data.EuclideanRing.(/) 7", "Data.Field.(*) 7", "Data.Field.(+) 6", "Data.Field.(-) 6", "Data.Field.(/) 7", "Data.Function.(#) 1", "Data.Function.($) 0", "Data.Function.(<<<) 9", "Data.Function.(>>>) 9", "Data.Functor.($>) 4", "Data.Functor.(<#>) 1", "Data.Functor.(<$) 4", "Data.Functor.(<$>) 4", "Data.Functor.(<@>) 4", "Data.Functor.Contravariant.(>#<) 4", "Data.Functor.Contravariant.(>$<) 4", "Data.Functor.Coproduct.Nested.(<\\/>) type 6", "Data.Functor.Coproduct.Nested.(<\\/>) 6", "Data.Functor.Product.Nested.(</\\>) type 6", "Data.Functor.Product.Nested.(</\\>) 6", "Data.HeytingAlgebra.(&&) 3", "Data.HeytingAlgebra.(||) 2", "Data.HugeNum.(^) 8", "Data.Int.Bits.(.&.) 10", "Data.Int.Bits.(.^.) 10", "Data.Int.Bits.(.|.) 10", "Data.Lens.(%=) 4", "Data.Lens.(%~) 4", "Data.Lens.(&&&) 3", "Data.Lens.(&&=) 4", "Data.Lens.(&&~) 4", "Data.Lens.(***) 3", "Data.Lens.(*=) 4", "Data.Lens.(*~) 4", "Data.Lens.(+++) 2", "Data.Lens.(+=) 4", "Data.Lens.(+~) 4", "Data.Lens.(-=) 4", "Data.Lens.(-~) 4", "Data.Lens.(.=) 4", "Data.Lens.(.~) 4", "Data.Lens.(//=) 4", "Data.Lens.(//~) 4", "Data.Lens.(<>=) 4", "Data.Lens.(<>~) 4", "Data.Lens.(?=) 4", "Data.Lens.(?~) 4", "Data.Lens.(^.) 8", "Data.Lens.(^..) 8", "Data.Lens.(^?) 8", "Data.Lens.(||=) 4", "Data.Lens.(|||) 2", "Data.Lens.(||~) 4", "Data.Lens.Common.(&&&) 3", "Data.Lens.Common.(***) 3", "Data.Lens.Common.(+++) 2", "Data.Lens.Common.(|||) 2", "Data.Lens.Fold.(^..) 8", "Data.Lens.Fold.(^?) 8", "Data.Lens.Fold.Partial.(^?!) 8", "Data.Lens.Fold.Partial.(^@?!) 8", "Data.Lens.Getter.(^.) 8", "Data.Lens.Lens.Tuple.(&&&) 3", "Data.Lens.Lens.Tuple.(***) 3", "Data.Lens.Prism.Either.(+++) 2", "Data.Lens.Prism.Either.(|||) 2", "Data.Lens.Setter.(%=) 4", "Data.Lens.Setter.(%~) 4", "Data.Lens.Setter.(&&=) 4", "Data.Lens.Setter.(&&~) 4", "Data.Lens.Setter.(*=) 4", "Data.Lens.Setter.(*~) 4", "Data.Lens.Setter.(+=) 4", "Data.Lens.Setter.(+~) 4", "Data.Lens.Setter.(-=) 4", "Data.Lens.Setter.(-~) 4", "Data.Lens.Setter.(.=) 4", "Data.Lens.Setter.(.~) 4", "Data.Lens.Setter.(//=) 4", "Data.Lens.Setter.(//~) 4", "Data.Lens.Setter.(<>=) 4", "Data.Lens.Setter.(<>~) 4", "Data.Lens.Setter.(?=) 4", "Data.Lens.Setter.(?~) 4", "Data.Lens.Setter.(||=) 4", "Data.Lens.Setter.(||~) 4", "Data.List.(!!) 8", "Data.List.(..) 8", "Data.List.(:) 6", "Data.List.(\\\\) 5", "Data.List.Lazy.(!!) 8", "Data.List.Lazy.(..) 8", "Data.List.Lazy.(:) 6", "Data.List.Lazy.(\\\\) 5", "Data.List.Lazy.NonEmpty.(:) 6", "Data.List.Lazy.Types.(:) 6", "Data.List.NonEmpty.(!!) 8", "Data.List.NonEmpty.(:) 6", "Data.List.Types.(:) 6", "Data.Monoid.(<>) 5", "Data.NaturalTransformation.(~>) type 4", "Data.NonEmpty.(:|) 5", "Data.Number.Approximate.(~=) 4", "Data.Number.Approximate.(\u2245) 4", "Data.Number.Approximate.(\u2247) 4", "Data.Options.(:=) 6", "Data.Ord.(<) 4", "Data.Ord.(<=) 4", "Data.Ord.(>) 4", "Data.Ord.(>=) 4", "Data.Profunctor.Choice.(+++) 2", "Data.Profunctor.Choice.(|||) 2", "Data.Profunctor.Strong.(&&&) 3", "Data.Profunctor.Strong.(***) 3", "Data.Ring.(*) 7", "Data.Ring.(+) 6", "Data.Ring.(-) 6", "Data.Semigroup.(<>) 5", "Data.Semiring.(*) 7", "Data.Semiring.(+) 6", "Data.Tuple.Nested.(/\\) type 6", "Data.Tuple.Nested.(/\\) 6", "Foreign.Index.(!) 9", "Math.(%) 7", "Pathy.(<..>) 6", "Pathy.(<.>) 6", "Pathy.(</>) 6", "Pathy.Path.(<..>) 6", "Pathy.Path.(<.>) 6", "Pathy.Path.(</>) 6", "Prelude.(~>) type 4", "Prelude.(#) 1", "Prelude.($) 0", "Prelude.($>) 4", "Prelude.(&&) 3", "Prelude.(*) 7", "Prelude.(*>) 4", "Prelude.(+) 6", "Prelude.(-) 6", "Prelude.(/) 7", "Prelude.(/=) 4", "Prelude.(<) 4", "Prelude.(<#>) 1", "Prelude.(<$) 4", "Prelude.(<$>) 4", "Prelude.(<*) 4", "Prelude.(<*>) 4", "Prelude.(<<<) 9", "Prelude.(<=) 4", "Prelude.(<=<) 1", "Prelude.(<>) 5", "Prelude.(<@>) 4", "Prelude.(=<<) 1", "Prelude.(==) 4", "Prelude.(>) 4", "Prelude.(>=) 4", "Prelude.(>=>) 1", "Prelude.(>>=) 1", "Prelude.(>>>) 9", "Prelude.(||) 2", "Test.QuickCheck.(/==) 2", "Test.QuickCheck.(/=?) 2", "Test.QuickCheck.(<=?) 2", "Test.QuickCheck.(<?) 2", "Test.QuickCheck.(<?>) 2", "Test.QuickCheck.(===) 2", "Test.QuickCheck.(==?) 2", "Test.QuickCheck.(>=?) 2", "Test.QuickCheck.(>?) 2", "Text.Parsing.Indent.(<*/>) 11", "Text.Parsing.Indent.(<+/>) 9", "Text.Parsing.Indent.(<-/>) 10", "Text.Parsing.Indent.(<?/>) 12", "Text.Parsing.Parser.Combinators.(<?>) 3", "Text.Parsing.Parser.Combinators.(<??>) 3", "Text.Parsing.StringParser.Combinators.(<?>) 3", "Type.Function.($) type 0", "Type.Prelude.(+) type 0", "Type.Row.(+) type 0" ];
  exports["defaultOperators"] = defaultOperators;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen"] = $PS["Tidy.Codegen"] || {};
  var exports = $PS["Tidy.Codegen"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Dodo = $PS["Dodo"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Tidy = $PS["Tidy"];
  var Tidy_Codegen_Class = $PS["Tidy.Codegen.Class"];
  var Tidy_Codegen_Common = $PS["Tidy.Codegen.Common"];
  var Tidy_Codegen_Precedence = $PS["Tidy.Codegen.Precedence"];
  var Tidy_Codegen_String = $PS["Tidy.Codegen.String"];
  var Tidy_Codegen_Types = $PS["Tidy.Codegen.Types"];
  var Tidy_Doc = $PS["Tidy.Doc"];
  var Tidy_Operators = $PS["Tidy.Operators"];
  var Tidy_Operators_Defaults = $PS["Tidy.Operators.Defaults"];
  var Tidy_Token = $PS["Tidy.Token"];
  var typeWildcard = new PureScript_CST_Types.TypeWildcard(Tidy_Codegen_Common.tokUnderscore);
  var typeString = function (str) {
      return new PureScript_CST_Types.TypeString(Tidy_Codegen_Common.toSourceToken(new PureScript_CST_Types.TokString(Data_Newtype.unwrap()(Tidy_Codegen_String.escapeSourceString(str)), str)), str);
  };
  var typeOp = function (ty) {
      var $132 = Data_Maybe.maybe(ty)((function () {
          var $135 = PureScript_CST_Types.TypeOp.create(Tidy_Codegen_Precedence.precType2(ty));
          var $136 = Safe_Coerce.coerce();
          return function ($137) {
              return $135($136($137));
          };
      })());
      var $133 = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Tidy_Codegen_Types.functorBinaryOp)(Tidy_Codegen_Precedence.precType2));
      return function ($134) {
          return $132(Data_Array_NonEmpty.fromArray($133($134)));
      };
  };
  var typeCtor = function (dictToQualifiedName) {
      var $142 = Tidy_Codegen_Class.toQualifiedName(dictToQualifiedName);
      return function ($143) {
          return PureScript_CST_Types.TypeConstructor.create($142($143));
      };
  };                                                                                             
  var typeArrow = Data_Function.flip(Data_Array.foldr(function (a) {
      return function (b) {
          return new PureScript_CST_Types.TypeArrow(Tidy_Codegen_Precedence.precType1(a), Tidy_Codegen_Common.tokRightArrow, Tidy_Codegen_Precedence.precType0(b));
      };
  }));
  var typeApp = function (ty) {
      var $144 = Data_Maybe.maybe(ty)(PureScript_CST_Types.TypeApp.create(Tidy_Codegen_Precedence.precType3(ty)));
      var $145 = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen_Precedence.precType3);
      return function ($146) {
          return $144(Data_Array_NonEmpty.fromArray($145($146)));
      };
  };
  var toLabeled = function (dictToName) {
      return function (tok) {
          return function (v) {
              return {
                  label: Tidy_Codegen_Class.toName(dictToName)(v.value0),
                  separator: tok,
                  value: v.value1
              };
          };
      };
  };
  var typeRecord = function (dictToName) {
      return function (lbls) {
          return function (ty) {
              return new PureScript_CST_Types.TypeRecord(Tidy_Codegen_Common.toWrapped(Tidy_Codegen_Common.tokLeftBrace)(Tidy_Codegen_Common.tokRightBrace)({
                  labels: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $147 = Tidy_Codegen_Common.toSeparated(Tidy_Codegen_Common.tokComma);
                      var $148 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toLabeled(dictToName)(Tidy_Codegen_Common.tokDoubleColon));
                      return function ($149) {
                          return $147($148($149));
                      };
                  })())(Data_Array_NonEmpty.fromArray(lbls)),
                  tail: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(Tidy_Codegen_Common.tokPipe))(ty)
              }));
          };
      };
  };   
  var module_ = function (dictToName) {
      return function (name) {
          return function (exports) {
              return function (imports) {
                  return function (decls) {
                      return {
                          header: {
                              keyword: Tidy_Codegen_Common.tokModule,
                              name: Tidy_Codegen_Class.toName(dictToName)(name),
                              exports: Data_Functor.map(Data_Maybe.functorMaybe)(Tidy_Codegen_Common.toParenList)(Data_Array_NonEmpty.fromArray(exports)),
                              where: Tidy_Codegen_Common.tokWhere,
                              imports: imports
                          },
                          body: {
                              decls: decls,
                              trailingComments: [  ],
                              end: Data_Semiring.zero(Data_Semiring.semiringRecord()(Data_Semiring.semiringRecordCons({
                                  reflectSymbol: function () {
                                      return "column";
                                  }
                              })()(Data_Semiring.semiringRecordCons({
                                  reflectSymbol: function () {
                                      return "line";
                                  }
                              })()(Data_Semiring.semiringRecordNil)(Data_Semiring.semiringInt))(Data_Semiring.semiringInt)))
                          }
                      };
                  };
              };
          };
      };
  };   
  var lineBreaks = (function () {
      var $160 = Control_Applicative.pure(Control_Applicative.applicativeArray);
      var $161 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function ($162) {
          return $160($161($162));
      };
  })();
  var printModuleWithOptions = function (options) {
      return function (mod) {
          var formatOptions = {
              importWrap: options.importWrap,
              operators: Data_Lazy.force(options.operators),
              typeArrowPlacement: options.typeArrowPlacement,
              unicode: options.unicode,
              formatError: (Tidy.defaultFormatOptions(Tidy.formatErrorVoid)).formatError
          };
          var dodoOptions = {
              indentUnit: options.indentUnit,
              indentWidth: options.indentWidth,
              pageWidth: options.pageWidth,
              ribbonRatio: options.ribbonRatio
          };
          var addTrailingBreak = function (comments) {
              var v = Data_Array.last(comments);
              if (v instanceof Data_Maybe.Just && (v.value0 instanceof PureScript_CST_Types.Line && v.value0.value1 > 0)) {
                  return comments;
              };
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(comments)(lineBreaks(1));
          };
          return Dodo.print(Dodo.plainText)(dodoOptions)(Tidy_Doc.toDoc(Tidy.formatModule(formatOptions)(Tidy_Codegen_Class.overTrailingComments(Tidy_Codegen_Class.overTrailingCommentsModul1)(addTrailingBreak)(mod))));
      };
  };
  var letValue = function (dictToName) {
      return function (dictToGuarded) {
          return function (name) {
              return function (binders) {
                  return function (grd) {
                      return new PureScript_CST_Types.LetBindingName({
                          name: Tidy_Codegen_Class.toName(dictToName)(name),
                          binders: binders,
                          guarded: Tidy_Codegen_Class.toGuarded(dictToGuarded)(Tidy_Codegen_Common.tokEquals)(grd)
                      });
                  };
              };
          };
      };
  };
  var letSignature = function (dictToName) {
      return function (name) {
          return function (value) {
              return new PureScript_CST_Types.LetBindingSignature({
                  label: Tidy_Codegen_Class.toName(dictToName)(name),
                  separator: Tidy_Codegen_Common.tokDoubleColon,
                  value: value
              });
          };
      };
  };
  var leading = function (dictOverLeadingComments) {
      return function (c) {
          return Tidy_Codegen_Class.overLeadingComments(dictOverLeadingComments)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(c));
      };
  };
  var instValue = function (dictToName) {
      return function (dictToGuarded) {
          return function (name) {
              return function (binders) {
                  return function (grd) {
                      return new PureScript_CST_Types.InstanceBindingName({
                          name: Tidy_Codegen_Class.toName(dictToName)(name),
                          binders: binders,
                          guarded: Tidy_Codegen_Class.toGuarded(dictToGuarded)(Tidy_Codegen_Common.tokEquals)(grd)
                      });
                  };
              };
          };
      };
  };
  var instHead = function (dictToQualifiedName) {
      return function (name) {
          return function (constraints) {
              return function (className) {
                  return function (types) {
                      return {
                          keyword: Tidy_Codegen_Common.tokInstance,
                          name: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Tidy_Codegen_Common.tokDoubleColon))(name),
                          constraints: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                              var $168 = Data_Function.flip(Data_Tuple.Tuple.create)(Tidy_Codegen_Common.tokRightFatArrow);
                              return function ($169) {
                                  return $168(Tidy_Codegen_Common.toOneOrDelimited($169));
                              };
                          })())(Data_Array_NonEmpty.fromArray(constraints)),
                          className: Tidy_Codegen_Class.toQualifiedName(dictToQualifiedName)(className),
                          types: Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen_Precedence.precType3)(types)
                      };
                  };
              };
          };
      };
  };
  var declInstanceInstance = {
      declInstance: function (dictToQualifiedName) {
          return function (name) {
              return function (constraints) {
                  return function (className) {
                      return function (types) {
                          return function (bindings) {
                              return {
                                  head: instHead(dictToQualifiedName)(name)(constraints)(className)(types),
                                  body: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(Tidy_Codegen_Common.tokWhere))(Data_Array_NonEmpty.fromArray(bindings))
                              };
                          };
                      };
                  };
              };
          };
      }
  };
  var importValue = function (dictToName) {
      var $170 = Tidy_Codegen_Class.toName(dictToName);
      return function ($171) {
          return PureScript_CST_Types.ImportValue.create($170($171));
      };
  };
  var importTypeOp = function (dictToName) {
      var $172 = PureScript_CST_Types.ImportTypeOp.create(Tidy_Codegen_Common.tokType);
      var $173 = Safe_Coerce.coerce();
      var $174 = Tidy_Codegen_Class.toName(dictToName);
      return function ($175) {
          return $172($173($174($175)));
      };
  };
  var importTypeAll = function (dictToName) {
      var $179 = Data_Function.flip(PureScript_CST_Types.ImportType.create)(new Data_Maybe.Just(new PureScript_CST_Types.DataAll(Tidy_Codegen_Common.tokAll)));
      var $180 = Tidy_Codegen_Class.toName(dictToName);
      return function ($181) {
          return $179($180($181));
      };
  };
  var importType = function (dictToName) {
      var $182 = Data_Function.flip(PureScript_CST_Types.ImportType.create)(Data_Maybe.Nothing.value);
      var $183 = Tidy_Codegen_Class.toName(dictToName);
      return function ($184) {
          return $182($183($184));
      };
  };
  var importOp = function (dictToName) {
      var $185 = Safe_Coerce.coerce();
      var $186 = Tidy_Codegen_Class.toName(dictToName);
      return function ($187) {
          return PureScript_CST_Types.ImportOp.create($185($186($187)));
      };
  };
  var importClass = function (dictToName) {
      var $188 = PureScript_CST_Types.ImportClass.create(Tidy_Codegen_Common.tokClass);
      var $189 = Tidy_Codegen_Class.toName(dictToName);
      return function ($190) {
          return $188($189($190));
      };
  };
  var exprWhere = function (expr) {
      return function (binds) {
          return {
              expr: expr,
              bindings: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(Tidy_Codegen_Common.tokWhere))(Data_Array_NonEmpty.fromArray(binds))
          };
      };
  };
  var exprTyped = function (a) {
      return function (b) {
          return new PureScript_CST_Types.ExprTyped(Tidy_Codegen_Precedence.precExpr0(a), Tidy_Codegen_Common.tokDoubleColon, b);
      };
  };
  var exprString = function (str) {
      return new PureScript_CST_Types.ExprString(Tidy_Codegen_Common.toSourceToken(new PureScript_CST_Types.TokString(Data_Newtype.unwrap()(Tidy_Codegen_String.escapeSourceString(str)), str)), str);
  };
  var exprOp = function (expr) {
      var $206 = Data_Maybe.maybe(expr)((function () {
          var $209 = PureScript_CST_Types.ExprOp.create(Tidy_Codegen_Precedence.precExpr2(expr));
          var $210 = Safe_Coerce.coerce();
          return function ($211) {
              return $209($210($211));
          };
      })());
      var $207 = Tidy_Codegen_Precedence.precInitLast(Data_Functor.map(Tidy_Codegen_Types.functorBinaryOp)(Tidy_Codegen_Precedence.precExpr2))(Data_Functor.map(Tidy_Codegen_Types.functorBinaryOp)(Tidy_Codegen_Precedence.precExpr1));
      return function ($208) {
          return $206($207($208));
      };
  };
  var exprIdent = function (dictToQualifiedName) {
      var $219 = Tidy_Codegen_Class.toQualifiedName(dictToQualifiedName);
      return function ($220) {
          return PureScript_CST_Types.ExprIdent.create($219($220));
      };
  };
  var exprCtor = function (dictToQualifiedName) {
      var $223 = Tidy_Codegen_Class.toQualifiedName(dictToQualifiedName);
      return function ($224) {
          return PureScript_CST_Types.ExprConstructor.create($223($224));
      };
  };
  var exprBool = function (bool) {
      return new PureScript_CST_Types.ExprBoolean((function () {
          if (bool) {
              return Tidy_Codegen_Common.tokTrue;
          };
          return Tidy_Codegen_Common.tokFalse;
      })(), bool);
  };
  var exprArray = (function () {
      var $225 = Tidy_Codegen_Common.toDelimited(Tidy_Codegen_Common.tokLeftSquare)(Tidy_Codegen_Common.tokRightSquare)(Tidy_Codegen_Common.tokComma);
      return function ($226) {
          return PureScript_CST_Types.ExprArray.create($225($226));
      };
  })();
  var exprApp = function (head) {
      var $227 = Data_Maybe.maybe(head)(PureScript_CST_Types.ExprApp.create(Tidy_Codegen_Precedence.precExprApp(head)));
      var $228 = Tidy_Codegen_Precedence.precInitLast(Tidy_Codegen_Precedence.precExprApp)(Tidy_Codegen_Precedence.precExprAppLast);
      return function ($229) {
          return $227($228($229));
      };
  };
  var exportValue = function (dictToName) {
      var $230 = Tidy_Codegen_Class.toName(dictToName);
      return function ($231) {
          return PureScript_CST_Types.ExportValue.create($230($231));
      };
  };
  var exportTypeOp = function (dictToName) {
      var $232 = PureScript_CST_Types.ExportTypeOp.create(Tidy_Codegen_Common.tokType);
      var $233 = Safe_Coerce.coerce();
      var $234 = Tidy_Codegen_Class.toName(dictToName);
      return function ($235) {
          return $232($233($234($235)));
      };
  };
  var exportTypeAll = function (dictToName) {
      var $239 = Data_Function.flip(PureScript_CST_Types.ExportType.create)(new Data_Maybe.Just(new PureScript_CST_Types.DataAll(Tidy_Codegen_Common.tokAll)));
      var $240 = Tidy_Codegen_Class.toName(dictToName);
      return function ($241) {
          return $239($240($241));
      };
  };
  var exportType = function (dictToName) {
      var $242 = Data_Function.flip(PureScript_CST_Types.ExportType.create)(Data_Maybe.Nothing.value);
      var $243 = Tidy_Codegen_Class.toName(dictToName);
      return function ($244) {
          return $242($243($244));
      };
  };
  var exportOp = function (dictToName) {
      var $245 = Safe_Coerce.coerce();
      var $246 = Tidy_Codegen_Class.toName(dictToName);
      return function ($247) {
          return PureScript_CST_Types.ExportOp.create($245($246($247)));
      };
  };
  var exportModule = function (dictToName) {
      var $248 = PureScript_CST_Types.ExportModule.create(Tidy_Codegen_Common.tokModule);
      var $249 = Tidy_Codegen_Class.toName(dictToName);
      return function ($250) {
          return $248($249($250));
      };
  };
  var exportClass = function (dictToName) {
      var $251 = PureScript_CST_Types.ExportClass.create(Tidy_Codegen_Common.tokClass);
      var $252 = Tidy_Codegen_Class.toName(dictToName);
      return function ($253) {
          return $251($252($253));
      };
  };                                                                                                    
  var defaultPrintOptions = {
      importWrap: Tidy.ImportWrapSource.value,
      indentUnit: "  ",
      indentWidth: 2,
      operators: Data_Lazy.defer(function (v) {
          return Tidy_Operators.parseOperatorTable(Tidy_Operators_Defaults.defaultOperators);
      }),
      pageWidth: 160,
      ribbonRatio: 0.618,
      typeArrowPlacement: Tidy.TypeArrowFirst.value,
      unicode: Tidy_Token.UnicodeSource.value
  };
  var printModule = printModuleWithOptions(defaultPrintOptions);
  var declValue = function (dictToName) {
      return function (dictToGuarded) {
          return function (name) {
              return function (binders) {
                  return function (grd) {
                      return new PureScript_CST_Types.DeclValue({
                          name: Tidy_Codegen_Class.toName(dictToName)(name),
                          binders: binders,
                          guarded: Tidy_Codegen_Class.toGuarded(dictToGuarded)(Tidy_Codegen_Common.tokEquals)(grd)
                      });
                  };
              };
          };
      };
  };
  var declType = function (dictToName) {
      return function (name) {
          return function (vars) {
              return PureScript_CST_Types.DeclType.create({
                  keyword: Tidy_Codegen_Common.tokType,
                  name: Tidy_Codegen_Class.toName(dictToName)(name),
                  vars: vars
              })(Tidy_Codegen_Common.tokEquals);
          };
      };
  };
  var declSignature = function (dictToName) {
      return Data_Tuple.curry((function () {
          var $265 = toLabeled(dictToName)(Tidy_Codegen_Common.tokDoubleColon);
          return function ($266) {
              return PureScript_CST_Types.DeclSignature.create($265($266));
          };
      })());
  };
  var declNewtype = function (dictToName) {
      return function (dictToName1) {
          return function (name) {
              return function (vars) {
                  return function (ctor) {
                      return PureScript_CST_Types.DeclNewtype.create({
                          keyword: Tidy_Codegen_Common.tokNewtype,
                          name: Tidy_Codegen_Class.toName(dictToName)(name),
                          vars: vars
                      })(Tidy_Codegen_Common.tokEquals)(Tidy_Codegen_Class.toName(dictToName1)(ctor));
                  };
              };
          };
      };
  };
  var declInstance = function (dict) {
      return dict.declInstance;
  };
  var declInstanceDeclaration = {
      declInstance: function (dictToQualifiedName) {
          return function (name) {
              return function (constraints) {
                  return function (className) {
                      return function (types) {
                          return function (bindings) {
                              return new PureScript_CST_Types.DeclInstanceChain({
                                  head: declInstance(declInstanceInstance)(dictToQualifiedName)(name)(constraints)(className)(types)(bindings),
                                  tail: [  ]
                              });
                          };
                      };
                  };
              };
          };
      }
  };
  var declImportAs = function (dictToName) {
      return function (dictToName1) {
          return function (name) {
              return function (imports) {
                  return function (as) {
                      return {
                          keyword: Tidy_Codegen_Common.tokImport,
                          module: Tidy_Codegen_Class.toName(dictToName)(name),
                          names: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                              var $277 = Data_Tuple.Tuple.create(Data_Maybe.Nothing.value);
                              return function ($278) {
                                  return $277(Tidy_Codegen_Common.toParenList($278));
                              };
                          })())(Data_Array_NonEmpty.fromArray(imports)),
                          qualified: new Data_Maybe.Just(new Data_Tuple.Tuple(Tidy_Codegen_Common.tokAs, Tidy_Codegen_Class.toName(dictToName1)(as)))
                      };
                  };
              };
          };
      };
  };
  var declImport = function (dictToName) {
      return function (name) {
          return function (imports) {
              return {
                  keyword: Tidy_Codegen_Common.tokImport,
                  module: Tidy_Codegen_Class.toName(dictToName)(name),
                  names: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $279 = Data_Tuple.Tuple.create(Data_Maybe.Nothing.value);
                      return function ($280) {
                          return $279(Tidy_Codegen_Common.toParenList($280));
                      };
                  })())(Data_Array_NonEmpty.fromArray(imports)),
                  qualified: Data_Maybe.Nothing.value
              };
          };
      };
  };
  var declDerive = function (dictToQualifiedName) {
      return function (name) {
          return function (constraints) {
              return function (className) {
                  return function (types) {
                      return new PureScript_CST_Types.DeclDerive(Tidy_Codegen_Common.tokDerive, Data_Maybe.Nothing.value, instHead(dictToQualifiedName)(name)(constraints)(className)(types));
                  };
              };
          };
      };
  };   
  var binderWildcard = new PureScript_CST_Types.BinderWildcard(Tidy_Codegen_Common.tokUnderscore);
  var binderVar = function (dictToName) {
      var $306 = Tidy_Codegen_Class.toName(dictToName);
      return function ($307) {
          return PureScript_CST_Types.BinderVar.create($306($307));
      };
  };
  var binaryOp = function (dictToQualifiedName) {
      return function (a) {
          return function (b) {
              return new Data_Tuple.Tuple(Tidy_Codegen_Class.toQualifiedName(dictToQualifiedName)(a), b);
          };
      };
  };
  exports["printModule"] = printModule;
  exports["binaryOp"] = binaryOp;
  exports["binderVar"] = binderVar;
  exports["binderWildcard"] = binderWildcard;
  exports["declDerive"] = declDerive;
  exports["declImport"] = declImport;
  exports["declImportAs"] = declImportAs;
  exports["declInstance"] = declInstance;
  exports["declNewtype"] = declNewtype;
  exports["declSignature"] = declSignature;
  exports["declType"] = declType;
  exports["declValue"] = declValue;
  exports["exportClass"] = exportClass;
  exports["exportModule"] = exportModule;
  exports["exportOp"] = exportOp;
  exports["exportType"] = exportType;
  exports["exportTypeAll"] = exportTypeAll;
  exports["exportTypeOp"] = exportTypeOp;
  exports["exportValue"] = exportValue;
  exports["exprApp"] = exprApp;
  exports["exprArray"] = exprArray;
  exports["exprBool"] = exprBool;
  exports["exprCtor"] = exprCtor;
  exports["exprIdent"] = exprIdent;
  exports["exprOp"] = exprOp;
  exports["exprString"] = exprString;
  exports["exprTyped"] = exprTyped;
  exports["exprWhere"] = exprWhere;
  exports["importClass"] = importClass;
  exports["importOp"] = importOp;
  exports["importType"] = importType;
  exports["importTypeAll"] = importTypeAll;
  exports["importTypeOp"] = importTypeOp;
  exports["importValue"] = importValue;
  exports["instValue"] = instValue;
  exports["leading"] = leading;
  exports["letSignature"] = letSignature;
  exports["letValue"] = letValue;
  exports["lineBreaks"] = lineBreaks;
  exports["module_"] = module_;
  exports["typeApp"] = typeApp;
  exports["typeArrow"] = typeArrow;
  exports["typeCtor"] = typeCtor;
  exports["typeOp"] = typeOp;
  exports["typeRecord"] = typeRecord;
  exports["typeString"] = typeString;
  exports["typeWildcard"] = typeWildcard;
  exports["declInstanceDeclaration"] = declInstanceDeclaration;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function () {
      return function () {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  var buildFromScratch = Data_Function.flip(build)({});
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return build(f(a))(b);
          };
      };
  };
  exports["buildFromScratch"] = buildFromScratch;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Tidy.Codegen.Monad"] = $PS["Tidy.Codegen.Monad"] || {};
  var exports = $PS["Tidy.Codegen.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var PureScript_CST_Types = $PS["PureScript.CST.Types"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var Tidy_Codegen = $PS["Tidy.Codegen"];
  var Tidy_Codegen_Class = $PS["Tidy.Codegen.Class"];
  var Tidy_Codegen_Common = $PS["Tidy.Codegen.Common"];
  var Tidy_Codegen_Types = $PS["Tidy.Codegen.Types"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var CodegenImportType = (function () {
      function CodegenImportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CodegenImportType.create = function (value0) {
          return function (value1) {
              return new CodegenImportType(value0, value1);
          };
      };
      return CodegenImportType;
  })();
  var CodegenImportTypeOp = (function () {
      function CodegenImportTypeOp(value0) {
          this.value0 = value0;
      };
      CodegenImportTypeOp.create = function (value0) {
          return new CodegenImportTypeOp(value0);
      };
      return CodegenImportTypeOp;
  })();
  var CodegenImportClass = (function () {
      function CodegenImportClass(value0) {
          this.value0 = value0;
      };
      CodegenImportClass.create = function (value0) {
          return new CodegenImportClass(value0);
      };
      return CodegenImportClass;
  })();
  var CodegenImportValue = (function () {
      function CodegenImportValue(value0) {
          this.value0 = value0;
      };
      CodegenImportValue.create = function (value0) {
          return new CodegenImportValue(value0);
      };
      return CodegenImportValue;
  })();
  var CodegenImportOp = (function () {
      function CodegenImportOp(value0) {
          this.value0 = value0;
      };
      CodegenImportOp.create = function (value0) {
          return new CodegenImportOp(value0);
      };
      return CodegenImportOp;
  })();
  var ImportName = (function () {
      function ImportName(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ImportName.create = function (value0) {
          return function (value1) {
              return new ImportName(value0, value1);
          };
      };
      return ImportName;
  })();
  var CodegenExportType = (function () {
      function CodegenExportType(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CodegenExportType.create = function (value0) {
          return function (value1) {
              return new CodegenExportType(value0, value1);
          };
      };
      return CodegenExportType;
  })();
  var CodegenExportTypeOp = (function () {
      function CodegenExportTypeOp(value0) {
          this.value0 = value0;
      };
      CodegenExportTypeOp.create = function (value0) {
          return new CodegenExportTypeOp(value0);
      };
      return CodegenExportTypeOp;
  })();
  var CodegenExportClass = (function () {
      function CodegenExportClass(value0) {
          this.value0 = value0;
      };
      CodegenExportClass.create = function (value0) {
          return new CodegenExportClass(value0);
      };
      return CodegenExportClass;
  })();
  var CodegenExportValue = (function () {
      function CodegenExportValue(value0) {
          this.value0 = value0;
      };
      CodegenExportValue.create = function (value0) {
          return new CodegenExportValue(value0);
      };
      return CodegenExportValue;
  })();
  var CodegenExportOp = (function () {
      function CodegenExportOp(value0) {
          this.value0 = value0;
      };
      CodegenExportOp.create = function (value0) {
          return new CodegenExportOp(value0);
      };
      return CodegenExportOp;
  })();
  var CodegenExportModule = (function () {
      function CodegenExportModule(value0) {
          this.value0 = value0;
      };
      CodegenExportModule.create = function (value0) {
          return new CodegenExportModule(value0);
      };
      return CodegenExportModule;
  })();
  var toImportFromRecordNilReco = {
      toImportFromRecord: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  return function (v2) {
                      return Control_Applicative.pure(dictApplicative)(Control_Category.identity(Record_Builder.categoryBuilder));
                  };
              };
          };
      }
  };
  var toImportFromImportNameQua = {
      toImportFrom: function (dictApplicative) {
          return Data_Function.apply;
      }
  };
  var functorCodegenT = function (dictFunctor) {
      return Control_Monad_State_Trans.functorStateT(dictFunctor);
  };
  var eqCodegenImport = {
      eq: function (x) {
          return function (y) {
              if (x instanceof CodegenImportType && y instanceof CodegenImportType) {
                  return x.value0 === y.value0 && Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value1)(y.value1);
              };
              if (x instanceof CodegenImportTypeOp && y instanceof CodegenImportTypeOp) {
                  return Data_Eq.eq(Tidy_Codegen_Types.eqSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportClass && y instanceof CodegenImportClass) {
                  return Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportValue && y instanceof CodegenImportValue) {
                  return Data_Eq.eq(PureScript_CST_Types.eqIdent)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportOp && y instanceof CodegenImportOp) {
                  return Data_Eq.eq(Tidy_Codegen_Types.eqSymbolName)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var ordCodegenImport = {
      compare: function (x) {
          return function (y) {
              if (x instanceof CodegenImportType && y instanceof CodegenImportType) {
                  var v = Data_Ord.compare(Data_Ord.ordBoolean)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value1)(y.value1);
              };
              if (x instanceof CodegenImportType) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenImportType) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenImportTypeOp && y instanceof CodegenImportTypeOp) {
                  return Data_Ord.compare(Tidy_Codegen_Types.ordSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportTypeOp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenImportTypeOp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenImportClass && y instanceof CodegenImportClass) {
                  return Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportClass) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenImportClass) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenImportValue && y instanceof CodegenImportValue) {
                  return Data_Ord.compare(PureScript_CST_Types.ordIdent)(x.value0)(y.value0);
              };
              if (x instanceof CodegenImportValue) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenImportValue) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenImportOp && y instanceof CodegenImportOp) {
                  return Data_Ord.compare(Tidy_Codegen_Types.ordSymbolName)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 89, column 1 - line 89, column 34): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqCodegenImport;
      }
  };
  var eqCodegenExport = {
      eq: function (x) {
          return function (y) {
              if (x instanceof CodegenExportType && y instanceof CodegenExportType) {
                  return x.value0 === y.value0 && Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value1)(y.value1);
              };
              if (x instanceof CodegenExportTypeOp && y instanceof CodegenExportTypeOp) {
                  return Data_Eq.eq(Tidy_Codegen_Types.eqSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportClass && y instanceof CodegenExportClass) {
                  return Data_Eq.eq(PureScript_CST_Types.eqProper)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportValue && y instanceof CodegenExportValue) {
                  return Data_Eq.eq(PureScript_CST_Types.eqIdent)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportOp && y instanceof CodegenExportOp) {
                  return Data_Eq.eq(Tidy_Codegen_Types.eqSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportModule && y instanceof CodegenExportModule) {
                  return Data_Eq.eq(PureScript_CST_Types.eqModuleName)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var ordCodegenExport = {
      compare: function (x) {
          return function (y) {
              if (x instanceof CodegenExportType && y instanceof CodegenExportType) {
                  var v = Data_Ord.compare(Data_Ord.ordBoolean)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value1)(y.value1);
              };
              if (x instanceof CodegenExportType) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenExportType) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenExportTypeOp && y instanceof CodegenExportTypeOp) {
                  return Data_Ord.compare(Tidy_Codegen_Types.ordSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportTypeOp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenExportTypeOp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenExportClass && y instanceof CodegenExportClass) {
                  return Data_Ord.compare(PureScript_CST_Types.ordProper)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportClass) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenExportClass) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenExportValue && y instanceof CodegenExportValue) {
                  return Data_Ord.compare(PureScript_CST_Types.ordIdent)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportValue) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenExportValue) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenExportOp && y instanceof CodegenExportOp) {
                  return Data_Ord.compare(Tidy_Codegen_Types.ordSymbolName)(x.value0)(y.value0);
              };
              if (x instanceof CodegenExportOp) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CodegenExportOp) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CodegenExportModule && y instanceof CodegenExportModule) {
                  return Data_Ord.compare(PureScript_CST_Types.ordModuleName)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 79, column 1 - line 79, column 34): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqCodegenExport;
      }
  };
  var bindCodegenT = function (dictMonad) {
      return Control_Monad_State_Trans.bindStateT(dictMonad);
  };
  var applicativeCodegenT = function (dictMonad) {
      return Control_Monad_State_Trans.applicativeStateT(dictMonad);
  };
  var write = function (dictMonad) {
      return function (decl) {
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(dictMonad))(function (st) {
              var $235 = {};
              for (var $236 in st) {
                  if ({}.hasOwnProperty.call(st, $236)) {
                      $235[$236] = st[$236];
                  };
              };
              $235.declarations = new Data_List_Types.Cons(decl, st.declarations);
              return $235;
          });
      };
  };
  var withQualifiedName = function (dictToToken) {
      return function (k) {
          return function (from) {
              var v = Tidy_Codegen_Class.toToken(dictToToken)(from);
              return k(v.value1.value1)({
                  module: v.value1.value0,
                  name: v.value1.value1,
                  token: Tidy_Codegen_Common.toSourceToken(v.value0)
              });
          };
      };
  };
  var toImportFromRecord = function (dict) {
      return dict.toImportFromRecord;
  };
  var toImportFromRecordRecord = function () {
      return function (dictToImportFromRecord) {
          return {
              toImportFrom: function (dictApplicative) {
                  return function (k) {
                      var $363 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Record_Builder.buildFromScratch);
                      var $364 = toImportFromRecord(dictToImportFromRecord)(dictApplicative)(k)(Type_Proxy["Proxy"].value);
                      return function ($365) {
                          return $363($364($365));
                      };
                  };
              }
          };
      };
  };
  var toImportFrom = function (dict) {
      return dict.toImportFrom;
  };
  var toImportFromRecordConsRec = function (dictToImportFrom) {
      return function (dictToImportFromRecord) {
          return function (dictIsSymbol) {
              return function () {
                  return function () {
                      return function () {
                          return {
                              toImportFromRecord: function (dictApplicative) {
                                  return function (k) {
                                      return function (v) {
                                          return function (r) {
                                              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (imp) {
                                                  return function (builder) {
                                                      return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(dictIsSymbol)(Type_Proxy["Proxy"].value)(imp))(builder);
                                                  };
                                              })(toImportFrom(dictToImportFrom)(dictApplicative)(k)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(r))))(toImportFromRecord(dictToImportFromRecord)(dictApplicative)(k)(Type_Proxy["Proxy"].value)(r));
                                          };
                                      };
                                  };
                              }
                          };
                      };
                  };
              };
          };
      };
  };
  var runCodegenT = function (v) {
      return Control_Monad_State_Trans.runStateT(v)({
          exports: Data_Set.empty,
          importsOpen: Data_Set.empty,
          importsFrom: Data_Map_Internal.empty,
          importsQualified: Data_Map_Internal.empty,
          declarations: Data_List_Types.Nil.value
      });
  };
  var importValue = function (dictToToken) {
      return withQualifiedName(dictToToken)(function ($366) {
          return ImportName.create(CodegenImportValue.create($366));
      });
  };
  var importTypeOp = function (dictToToken) {
      return withQualifiedName(dictToToken)(function (a) {
          return function (b) {
              return new ImportName(new CodegenImportTypeOp(a), Tidy_Codegen_Class.toQualifiedName(Tidy_Codegen_Class.toQualifiedNameQualifiedN2)(b));
          };
      });
  };
  var importTypeAll = function (dictToToken) {
      return withQualifiedName(dictToToken)((function () {
          var $367 = CodegenImportType.create(true);
          return function ($368) {
              return ImportName.create($367($368));
          };
      })());
  };
  var importType = function (dictToToken) {
      return withQualifiedName(dictToToken)((function () {
          var $369 = CodegenImportType.create(false);
          return function ($370) {
              return ImportName.create($369($370));
          };
      })());
  };
  var importOpen = function (dictMonad) {
      return function (dictToModuleName) {
          return function (mod) {
              return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(dictMonad))(function (st) {
                  var $246 = {};
                  for (var $247 in st) {
                      if ({}.hasOwnProperty.call(st, $247)) {
                          $246[$247] = st[$247];
                      };
                  };
                  $246.importsOpen = Data_Set.insert(PureScript_CST_Types.ordModuleName)(Tidy_Codegen_Class.toModuleName(dictToModuleName)(mod))(st.importsOpen);
                  return $246;
              });
          };
      };
  };
  var importOp = function (dictToToken) {
      return withQualifiedName(dictToToken)(function (a) {
          return function (b) {
              return new ImportName(new CodegenImportOp(a), Tidy_Codegen_Class.toQualifiedName(Tidy_Codegen_Class.toQualifiedNameQualifiedN2)(b));
          };
      });
  };
  var importFrom = function (dictMonad) {
      return function (dictToModuleName) {
          return function (dictToImportFrom) {
              return function (mod) {
                  return toImportFrom(dictToImportFrom)(applicativeCodegenT(dictMonad))(function (v) {
                      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(dictMonad))(function (st) {
                          return new Data_Tuple.Tuple(v.value1, (function () {
                              if (v.value1.module instanceof Data_Maybe.Nothing) {
                                  var $260 = {};
                                  for (var $261 in st) {
                                      if ({}.hasOwnProperty.call(st, $261)) {
                                          $260[$261] = st[$261];
                                      };
                                  };
                                  $260.importsFrom = Data_Map_Internal.alter(PureScript_CST_Types.ordModuleName)(function (v2) {
                                      if (v.value0 instanceof CodegenImportType && (v.value0.value0 && v2 instanceof Data_Maybe.Just)) {
                                          return new Data_Maybe.Just(Data_Set.insert(ordCodegenImport)(v.value0)(Data_Set["delete"](ordCodegenImport)(new CodegenImportType(false, v.value0.value1))(v2.value0)));
                                      };
                                      if (v.value0 instanceof CodegenImportType && (!v.value0.value0 && (v2 instanceof Data_Maybe.Just && Data_Set.member(ordCodegenImport)(new CodegenImportType(true, v.value0.value1))(v2.value0)))) {
                                          return new Data_Maybe.Just(v2.value0);
                                      };
                                      if (v2 instanceof Data_Maybe.Just) {
                                          return new Data_Maybe.Just(Data_Set.insert(ordCodegenImport)(v.value0)(v2.value0));
                                      };
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          return new Data_Maybe.Just(Data_Set.singleton(v.value0));
                                      };
                                      throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 231, column 13 - line 239, column 41): " + [ v.value0.constructor.name, v2.constructor.name ]);
                                  })(Tidy_Codegen_Class.toModuleName(dictToModuleName)(mod))(st.importsFrom);
                                  return $260;
                              };
                              if (v.value1.module instanceof Data_Maybe.Just) {
                                  var $265 = {};
                                  for (var $266 in st) {
                                      if ({}.hasOwnProperty.call(st, $266)) {
                                          $265[$266] = st[$266];
                                      };
                                  };
                                  $265.importsQualified = Data_Map_Internal.alter(PureScript_CST_Types.ordModuleName)(function (v2) {
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          return new Data_Maybe.Just(Data_Set.singleton(v.value1.module.value0));
                                      };
                                      if (v2 instanceof Data_Maybe.Just) {
                                          return new Data_Maybe.Just(Data_Set.insert(PureScript_CST_Types.ordModuleName)(v.value1.module.value0)(v2.value0));
                                      };
                                      throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 245, column 13 - line 247, column 54): " + [ v2.constructor.name ]);
                                  })(Tidy_Codegen_Class.toModuleName(dictToModuleName)(mod))(st.importsQualified);
                                  return $265;
                              };
                              throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 228, column 16 - line 250, column 10): " + [ v.value1.module.constructor.name ]);
                          })());
                      });
                  });
              };
          };
      };
  };
  var importCtor = function (dictToToken) {
      return function (dictToToken1) {
          var $371 = withQualifiedName(dictToToken1);
          var $372 = CodegenImportType.create(true);
          var $373 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($374) {
              return $371(Data_Function["const"](ImportName.create($372(Data_Tuple.snd($373($374))))));
          };
      };
  };
  var importClass = function (dictToToken) {
      return withQualifiedName(dictToToken)(function ($375) {
          return ImportName.create(CodegenImportClass.create($375));
      });
  };
  var $$export = function (dictMonad) {
      return function (exp) {
          return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(dictMonad))(function (st) {
              var $277 = {};
              for (var $278 in st) {
                  if ({}.hasOwnProperty.call(st, $278)) {
                      $277[$278] = st[$278];
                  };
              };
              $277.exports = (function () {
                  if (exp instanceof CodegenExportType && (!exp.value0 && Data_Set.member(ordCodegenExport)(new CodegenExportType(true, exp.value1))(st.exports))) {
                      return st.exports;
                  };
                  if (exp instanceof CodegenExportType && exp.value0) {
                      return Data_Set.insert(ordCodegenExport)(exp)(Data_Set["delete"](ordCodegenExport)(new CodegenExportType(false, exp.value1))(st.exports));
                  };
                  return Data_Set.insert(ordCodegenExport)(exp)(st.exports);
              })();
              return $277;
          });
      };
  };
  var exportClass = function (dictMonad) {
      return function (dictToToken) {
          var $376 = $$export(dictMonad);
          var $377 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($378) {
              return $376(CodegenExportClass.create(Data_Tuple.snd($377($378))));
          };
      };
  };
  var exportModule = function (dictMonad) {
      return function (dictToToken) {
          var $379 = $$export(dictMonad);
          var $380 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($381) {
              return $379(CodegenExportModule.create(Data_Tuple.snd($380($381))));
          };
      };
  };
  var exportOp = function (dictMonad) {
      return function (dictToToken) {
          var $382 = $$export(dictMonad);
          var $383 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($384) {
              return $382(CodegenExportOp.create(Data_Tuple.snd($383($384))));
          };
      };
  };
  var exportType = function (dictMonad) {
      return function (dictToToken) {
          var $385 = $$export(dictMonad);
          var $386 = CodegenExportType.create(false);
          var $387 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($388) {
              return $385($386(Data_Tuple.snd($387($388))));
          };
      };
  };
  var exportTypeAll = function (dictMonad) {
      return function (dictToToken) {
          var $389 = $$export(dictMonad);
          var $390 = CodegenExportType.create(true);
          var $391 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($392) {
              return $389($390(Data_Tuple.snd($391($392))));
          };
      };
  };
  var exportTypeOp = function (dictMonad) {
      return function (dictToToken) {
          var $393 = $$export(dictMonad);
          var $394 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($395) {
              return $393(CodegenExportTypeOp.create(Data_Tuple.snd($394($395))));
          };
      };
  };
  var exportValue = function (dictMonad) {
      return function (dictToToken) {
          var $396 = $$export(dictMonad);
          var $397 = Tidy_Codegen_Class.toToken(dictToToken);
          return function ($398) {
              return $396(CodegenExportValue.create(Data_Tuple.snd($397($398))));
          };
      };
  };
  var codegenImportToCST = function (v) {
      if (v instanceof CodegenImportType) {
          if (v.value0) {
              return Tidy_Codegen.importTypeAll(Tidy_Codegen_Class.toNameProperProper)(v.value1);
          };
          return Tidy_Codegen.importType(Tidy_Codegen_Class.toNameProperProper)(v.value1);
      };
      if (v instanceof CodegenImportTypeOp) {
          return Tidy_Codegen.importTypeOp(Tidy_Codegen_Class.toNameSymbolNameSymbolNam)(v.value0);
      };
      if (v instanceof CodegenImportClass) {
          return Tidy_Codegen.importClass(Tidy_Codegen_Class.toNameProperProper)(v.value0);
      };
      if (v instanceof CodegenImportValue) {
          return Tidy_Codegen.importValue(Tidy_Codegen_Class.toNameIdentIdent)(v.value0);
      };
      if (v instanceof CodegenImportOp) {
          return Tidy_Codegen.importOp(Tidy_Codegen_Class.toNameSymbolNameSymbolNam)(v.value0);
      };
      throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 368, column 22 - line 375, column 48): " + [ v.constructor.name ]);
  };
  var codegenExportToCST = function (v) {
      if (v instanceof CodegenExportType) {
          if (v.value0) {
              return Tidy_Codegen.exportTypeAll(Tidy_Codegen_Class.toNameProperProper)(v.value1);
          };
          return Tidy_Codegen.exportType(Tidy_Codegen_Class.toNameProperProper)(v.value1);
      };
      if (v instanceof CodegenExportTypeOp) {
          return Tidy_Codegen.exportTypeOp(Tidy_Codegen_Class.toNameSymbolNameSymbolNam)(v.value0);
      };
      if (v instanceof CodegenExportClass) {
          return Tidy_Codegen.exportClass(Tidy_Codegen_Class.toNameProperProper)(v.value0);
      };
      if (v instanceof CodegenExportValue) {
          return Tidy_Codegen.exportValue(Tidy_Codegen_Class.toNameIdentIdent)(v.value0);
      };
      if (v instanceof CodegenExportOp) {
          return Tidy_Codegen.exportOp(Tidy_Codegen_Class.toNameSymbolNameSymbolNam)(v.value0);
      };
      if (v instanceof CodegenExportModule) {
          return Tidy_Codegen.exportModule(Tidy_Codegen_Class.toNameModuleNameModuleNam)(v.value0);
      };
      throw new Error("Failed pattern match at Tidy.Codegen.Monad (line 357, column 22 - line 365, column 56): " + [ v.constructor.name ]);
  };
  var moduleFromCodegenState = function (dictToName) {
      return function (name) {
          return function (st) {
              var withLeadingBreaks = (function () {
                  var $399 = Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray);
                  var $400 = Data_Array.modifyAt(0)(Tidy_Codegen.leading(Tidy_Codegen_Class.overLeadingCommentsImport)(Tidy_Codegen.lineBreaks(2)));
                  return function ($401) {
                      return $399($400($401));
                  };
              })();
              var importsQualified = Control_Bind.bind(Control_Bind.bindArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(st.importsQualified))(function (v) {
                  return Control_Bind.bind(Control_Bind.bindArray)(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1))(function (qual) {
                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(v.value0, Tidy_Codegen.declImportAs(Tidy_Codegen_Class.toNameModuleNameModuleNam)(Tidy_Codegen_Class.toNameModuleNameModuleNam)(v.value0)([  ])(qual)));
                  });
              });
              var importsOpen = withLeadingBreaks(Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Tidy_Codegen.declImport(Tidy_Codegen_Class.toNameModuleNameModuleNam))([  ]))(Data_Array.fromFoldable(Data_Set.foldableSet)(st.importsOpen)));
              var importsFrom = Control_Bind.bind(Control_Bind.bindArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(st.importsFrom))(function (v) {
                  return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(v.value0, Tidy_Codegen.declImport(Tidy_Codegen_Class.toNameModuleNameModuleNam)(v.value0)(Data_Functor.map(Data_Functor.functorArray)(codegenImportToCST)(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1)))));
              });
              var importsNamed = withLeadingBreaks(Data_Functor.map(Data_Functor.functorArray)((function () {
                  var $402 = Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
                  return function ($403) {
                      return $402(Data_Tuple.snd($403));
                  };
              })())(Data_Array.sortBy(Data_Ord.comparing(PureScript_CST_Types.ordModuleName)(Data_Tuple.fst))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Either.Left.create))(importsFrom))(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Either.Right.create))(importsQualified)))));
              var exports = Data_Functor.map(Data_Functor.functorArray)(codegenExportToCST)(Data_Array.fromFoldable(Data_Set.foldableSet)(st.exports));
              var decls = Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_List.reverse(st.declarations));
              return Tidy_Codegen.module_(dictToName)(name)(exports)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(importsOpen)(importsNamed))(decls);
          };
      };
  };
  var runCodegenTModule = function (dictFunctor) {
      return function (dictToName) {
          return function (name) {
              var $404 = Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Tuple.functorTuple)(moduleFromCodegenState(dictToName)(name)));
              return function ($405) {
                  return $404(runCodegenT($405));
              };
          };
      };
  };
  var codegenModule = function (dictToName) {
      return function (name) {
          var $406 = Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Safe_Coerce.coerce());
          var $407 = runCodegenTModule(Control_Monad_Free.freeFunctor)(dictToName)(name);
          return function ($408) {
              return Data_Tuple.snd($406($407($408)));
          };
      };
  };
  exports["write"] = write;
  exports["importFrom"] = importFrom;
  exports["importOpen"] = importOpen;
  exports["importValue"] = importValue;
  exports["importType"] = importType;
  exports["importTypeOp"] = importTypeOp;
  exports["importClass"] = importClass;
  exports["importCtor"] = importCtor;
  exports["codegenModule"] = codegenModule;
  exports["functorCodegenT"] = functorCodegenT;
  exports["applicativeCodegenT"] = applicativeCodegenT;
  exports["bindCodegenT"] = bindCodegenT;
  exports["toImportFromImportNameQua"] = toImportFromImportNameQua;
  exports["toImportFromRecordRecord"] = toImportFromRecordRecord;
  exports["toImportFromRecordConsRec"] = toImportFromRecordConsRec;
  exports["toImportFromRecordNilReco"] = toImportFromRecordNilReco;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Generator"] = $PS["Data.Generator"] || {};
  var exports = $PS["Data.Generator"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_AbiParser = $PS["Data.AbiParser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Network_Ethereum_Core_HexString = $PS["Network.Ethereum.Core.HexString"];
  var Network_Ethereum_Core_Keccak256 = $PS["Network.Ethereum.Core.Keccak256"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Tidy_Codegen = $PS["Tidy.Codegen"];
  var Tidy_Codegen_Class = $PS["Tidy.Codegen.Class"];
  var Tidy_Codegen_Monad = $PS["Tidy.Codegen.Monad"];                
  var FunData = (function () {
      function FunData(value0) {
          this.value0 = value0;
      };
      FunData.create = function (value0) {
          return new FunData(value0);
      };
      return FunData;
  })();
  var EventData = (function () {
      function EventData(value0) {
          this.value0 = value0;
      };
      EventData.create = function (value0) {
          return new EventData(value0);
      };
      return EventData;
  })();
  var toSignature = function (v) {
      var args = Data_Functor.map(Data_Functor.functorArray)(function (i) {
          return Data_AbiParser.format(Data_AbiParser.formatInput)(i);
      })(v.value0.inputs);
      return v.value0.name + ("(" + (Data_String_Common.joinWith(",")(args) + ")"));
  };
  var toPSType = function (dictMonad) {
      return function (s) {
          var makeDigits = function (n) {
              var digits = Data_Functor.map(Data_Functor.functorArray)(Data_String_CodeUnits.singleton)(Data_String_CodeUnits.toCharArray(Data_Show.show(Data_Show.showInt)(n)));
              var v = Data_Array.unsnoc(digits);
              if (v instanceof Data_Maybe.Nothing) {
                  return Partial_Unsafe.unsafeCrashWith("impossible case reached in makeDigits");
              };
              if (v instanceof Data_Maybe.Just) {
                  var mkD = function (d) {
                      return "D" + d;
                  };
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(mkD(v.value0.last))))(function (lastD) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("DOne")))(function (done) {
                          var dType = Tidy_Codegen.typeApp(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(done))([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(lastD) ]);
                          var v1 = Data_Array.uncons(v.value0.init);
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(dType);
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v1.value0.tail)(function (d) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(mkD(d))))(function (d$prime) {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(d$prime));
                                  });
                              }))(function (tailDs) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity.Size")(Tidy_Codegen_Monad.importTypeOp(Tidy_Codegen_Class.toTokenStringQualifiedSym())("(:&)")))(function (digitAnd) {
                                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(mkD(v1.value0.head))))(function (head$prime) {
                                          var allRestDigits = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(digitAnd))(Data_Array.snoc(tailDs)(dType));
                                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeOp(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(head$prime))(allRestDigits));
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Data.Generator (line 80, column 9 - line 89, column 65): " + [ v1.constructor.name ]);
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.Generator (line 73, column 5 - line 89, column 65): " + [ v.constructor.name ]);
          };
          var expandVector = function (v) {
              return function (a) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(makeDigits(v.value0))(function (l) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Vector"))))(function (vector) {
                          var v1 = Data_List.uncons(v.value1);
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(a))(function (x) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(vector)([ l, x ]));
                              });
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(expandVector(new Data_NonEmpty.NonEmpty(v1.value0.head, v1.value0.tail))(a))(function (x) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(vector)([ l, x ]));
                              });
                          };
                          throw new Error("Failed pattern match at Data.Generator (line 94, column 5 - line 100, column 43): " + [ v1.constructor.name ]);
                      });
                  });
              };
          };
          if (s instanceof Data_AbiParser.SolidityBool) {
              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))("Boolean"));
          };
          if (s instanceof Data_AbiParser.SolidityAddress) {
              return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Address")));
          };
          if (s instanceof Data_AbiParser.SolidityUint) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("UIntN"))))(function (uintN) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(makeDigits(s.value0))(function (digits) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(uintN)([ digits ]));
                  });
              });
          };
          if (s instanceof Data_AbiParser.SolidityInt) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("IntN")))(function (intN) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(makeDigits(s.value0))(function (digits) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(intN))([ digits ]));
                  });
              });
          };
          if (s instanceof Data_AbiParser.SolidityString) {
              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))("String"));
          };
          if (s instanceof Data_AbiParser.SolidityBytesN) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("BytesN")))(function (bytesN) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(makeDigits(s.value0))(function (digits) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(bytesN))([ digits ]));
                  });
              });
          };
          if (s instanceof Data_AbiParser.SolidityBytesD) {
              return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("ByteString")));
          };
          if (s instanceof Data_AbiParser.SolidityVector) {
              return expandVector(s.value0)(s.value1);
          };
          if (s instanceof Data_AbiParser.SolidityArray) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(s.value0))(function (t) {
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))("Array"))([ t ]));
              });
          };
          throw new Error("Failed pattern match at Data.Generator (line 40, column 28 - line 64, column 52): " + [ s.constructor.name ]);
      };
  };
  var tagInput = function (dictMonad) {
      return function (v) {
          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tagged"))))(function (tagged) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Type.Proxy")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Proxy"))))(function (proxy) {
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(tagged)([ Tidy_Codegen.typeApp(proxy)([ Tidy_Codegen.typeString(v.value0) ]), v.value1 ]));
              });
          });
      };
  };
  var mkHelperFunction = function (dictMonad) {
      return function (v) {
          return function (v1) {
              var mkSend = function (helperName) {
                  return function (args) {
                      var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                          return "_x" + Data_Show.show(Data_Show.showInt)(i);
                      })(Data_Array.range(1)(Data_Array.length(v.value0.factorTypes) + Data_Array.length(args) | 0));
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                          if (v.value0.solidityFunction.value0.isConstructor) {
                              return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("deployContract")));
                          };
                          return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("sendTx")));
                      })())(function (sendTx) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("tagged"))))(function (tagged) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                  var tupleType = "Tuple" + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.factorTypes));
                                  return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())(tupleType)(tupleType)));
                              })())(function (tupleC) {
                                  var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprApp(sendTx)(Data_Array.snoc(Data_Array.take(Data_Array.length(args))(idents))(Tidy_Codegen.exprTyped(Tidy_Codegen.exprOp(tagged)([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprApp(tupleC)(Data_Array.drop(Data_Array.length(args))(idents))) ]))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.typeName)))));
                                  });
                              });
                          });
                      }))(function (expr) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                              if (v.value0.solidityFunction.value0.isUnCurried) {
                                  return tagInput(dictMonad)(v1.firstFactor);
                              };
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Tuple.snd(v1.firstFactor));
                          })())(function (firstFactor$prime) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v1.restFactors)(function (factor) {
                                  if (v.value0.solidityFunction.value0.isUnCurried) {
                                      return tagInput(dictMonad)(factor);
                                  };
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Tuple.snd(factor));
                              }))(function (restFactors$prime) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ Tidy_Codegen.letSignature(Tidy_Codegen_Class.toNameStringIdent())(helperName)(Tidy_Codegen.typeArrow(Data_Semigroup.append(Data_Semigroup.semigroupArray)(args)(Data_Array.cons(firstFactor$prime)(restFactors$prime)))(v.value0.returnType)), Tidy_Codegen.letValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)(helperName)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(vars))(expr) ]);
                              });
                          });
                      });
                  };
              };
              var mkCall = function (helperName) {
                  return function (txOpts) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("ChainCursor"))))(function (chainCursor) {
                          var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                              return "_x" + Data_Show.show(Data_Show.showInt)(i);
                          })(Data_Array.range(1)(Data_Array.length(v.value0.factorTypes) + 2 | 0));
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("call"))))(function (call) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("tagged"))))(function (tagged) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                      var tupleType = "Tuple" + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.factorTypes));
                                      return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())(tupleType)(tupleType)));
                                  })())(function (tupleC) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                          var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                                          var callExpr = Tidy_Codegen.exprApp(call)([ idents[0], idents[1], Tidy_Codegen.exprTyped(Tidy_Codegen.exprOp(tagged)([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprApp(tupleC)(Data_Array.drop(2)(idents))) ]))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.typeName)) ]);
                                          var $81 = Data_Array.length(v.value0.solidityFunction.value0.outputs) === 1;
                                          if ($81) {
                                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("unTuple1"))))(function (untuple) {
                                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprOp(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))("map"))([ untuple ]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("<$>")(callExpr) ]));
                                              });
                                          };
                                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(callExpr);
                                      });
                                  });
                              });
                          }))(function (expr) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                  if (v.value0.solidityFunction.value0.isUnCurried) {
                                      return tagInput(dictMonad)(v1.firstFactor);
                                  };
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Tuple.snd(v1.firstFactor));
                              })())(function (firstFactor$prime) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v1.restFactors)(function (factor) {
                                      if (v.value0.solidityFunction.value0.isUnCurried) {
                                          return tagInput(dictMonad)(factor);
                                      };
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Tuple.snd(factor));
                                  }))(function (restFactors$prime) {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ Tidy_Codegen.letSignature(Tidy_Codegen_Class.toNameStringIdent())(helperName)(Tidy_Codegen.typeArrow(Data_Array.cons(txOpts)(Data_Array.cons(chainCursor)(Data_Array.cons(firstFactor$prime)(restFactors$prime))))(v.value0.returnType)), Tidy_Codegen.letValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)(helperName)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(vars))(expr) ]);
                                  });
                              });
                          });
                      });
                  };
              };
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("TransactionOptions"))))(function (_txOpts) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))((function () {
                      if (v.value0.solidityFunction.value0.payable) {
                          return Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types.TokenUnit")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("MinorUnit"));
                      };
                      return Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("NoPay"));
                  })()))(function (payAmt) {
                      var txOpts = Tidy_Codegen.typeApp(_txOpts)([ payAmt ]);
                      var helperName = v.value0.name + "'";
                      if (v.value0.solidityFunction.value0.constant) {
                          return mkCall(helperName)(txOpts);
                      };
                      if (v.value0.solidityFunction.value0.isConstructor) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("HexString"))))(function (hexString) {
                              return mkSend(helperName)([ txOpts, hexString ]);
                          });
                      };
                      return mkSend(helperName)([ txOpts ]);
                  });
              });
          };
      };
  };
  var mkFunction = function (dictMonad) {
      return function (v) {
          var mkNoArgsSend = function (args) {
              var sig = Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(args)(v.value0.returnType));
              var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                  return "x" + Data_Show.show(Data_Show.showInt)(i);
              })(Data_Array.range(1)(Data_Array.length(args)));
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                  if (v.value0.solidityFunction.value0.isConstructor) {
                      return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("deployContract")));
                  };
                  return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("sendTx")));
              })())(function (sendTx) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("tagged"))))(function (tagged) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tuple0")("Tuple0"))))(function (tupleC) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprApp(sendTx)(Data_Array.snoc(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars))(Tidy_Codegen.exprTyped(Tidy_Codegen.exprApp(tagged)([ tupleC ]))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.typeName)))));
                      });
                  });
              }))(function (expr) {
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ sig, Tidy_Codegen.declValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)(v.value0.name)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(vars))(expr) ]);
              });
          };
          var mkNoArgsCall = function (txOpts) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("ChainCursor"))))(function (chainCursor) {
                  var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                      return "x" + Data_Show.show(Data_Show.showInt)(i);
                  })([ 1, 2 ]);
                  var sig = Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(Data_Array.cons(txOpts)([ chainCursor ]))(v.value0.returnType));
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("call"))))(function (call) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("tagged"))))(function (tagged) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tuple0")("Tuple0"))))(function (tupleC) {
                              var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                              var callExpr = Tidy_Codegen.exprApp(call)([ idents[0], idents[1], Tidy_Codegen.exprTyped(Tidy_Codegen.exprApp(tagged)([ tupleC ]))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.typeName)) ]);
                              var $106 = Data_Array.length(v.value0.solidityFunction.value0.outputs) === 1;
                              if ($106) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("unTuple1"))))(function (untuple) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprOp(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))("map"))([ untuple ]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("<$>")(callExpr) ]));
                                      });
                                  });
                              };
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(callExpr);
                          });
                      });
                  }))(function (expr) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ sig, Tidy_Codegen.declValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)(v.value0.name)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(vars))(expr) ]);
                  });
              });
          };
          var mkArgsSend = function (args) {
              return function (factors) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                      if (v.value0.solidityFunction.value0.isUnCurried) {
                          var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                              return "x" + Data_Show.show(Data_Show.showInt)(i);
                          })(Data_Array.range(1)(Data_Array.length(args) + 1 | 0));
                          var sig = (function () {
                              var ts = Data_Array.snoc(args)(Tidy_Codegen.typeRecord(Tidy_Codegen_Class.toNameStringLabel)(v.value0.factorTypes)(Data_Maybe.Nothing.value));
                              return Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(ts)(v.value0.returnType));
                          })();
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Contract.Internal")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("uncurryFields"))))(function (uncurryFields) {
                              var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                              var helperName = v.value0.name + "'";
                              return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprOp(Tidy_Codegen.exprApp(uncurryFields)([ Data_Maybe.fromJust()(Data_Array.last(idents)) ]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(helperName))(Data_Array.take(Data_Array.length(args))(idents))) ]));
                              });
                          }))(function (expr) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))({
                                  sig: sig,
                                  expr: expr,
                                  vars: vars
                              });
                          });
                      };
                      var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                          return "x" + Data_Show.show(Data_Show.showInt)(i);
                      })(Data_Array.range(1)(Data_Array.length(v.value0.factorTypes) + Data_Array.length(args) | 0));
                      var sig = (function () {
                          var ts = Data_Semigroup.append(Data_Semigroup.semigroupArray)(args)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.value0.factorTypes));
                          return Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(ts)(v.value0.returnType));
                      })();
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                          var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                          var helperName = v.value0.name + "'";
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(helperName))(idents));
                      })())(function (expr) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))({
                              sig: sig,
                              expr: expr,
                              vars: vars
                          });
                      });
                  })())(function (v1) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(mkHelperFunction(dictMonad)(v)(factors))(function (helper) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ v1.sig, Tidy_Codegen.declValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedWhere)(v.value0.name)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(v1.vars))(Tidy_Codegen.exprWhere(v1.expr)(helper)) ]);
                      });
                  });
              };
          };
          var mkArgsCall = function (txOpts) {
              return function (factors) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("ChainCursor"))))(function (chainCursor) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                          if (v.value0.solidityFunction.value0.isUnCurried) {
                              var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                                  return "x" + Data_Show.show(Data_Show.showInt)(i);
                              })([ 1, 2, 3 ]);
                              var sig = (function () {
                                  var ts = Data_Array.cons(txOpts)(Data_Array.cons(chainCursor)([ Tidy_Codegen.typeRecord(Tidy_Codegen_Class.toNameStringLabel)(v.value0.factorTypes)(Data_Maybe.Nothing.value) ]));
                                  return Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(ts)(v.value0.returnType));
                              })();
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Contract.Internal")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("uncurryFields"))))(function (uncurryFields) {
                                  var helperName = v.value0.name + "'";
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprOp(Tidy_Codegen.exprApp(uncurryFields)([ Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(vars[2]) ]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(helperName))([ Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(vars[0]), Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(vars[1]) ])) ]));
                                  });
                              }))(function (expr) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))({
                                      sig: sig,
                                      expr: expr,
                                      vars: vars
                                  });
                              });
                          };
                          var vars = Data_Functor.map(Data_Functor.functorArray)(function (i) {
                              return "x" + Data_Show.show(Data_Show.showInt)(i);
                          })(Data_Array.range(1)(Data_Array.length(v.value0.factorTypes) + 2 | 0));
                          var sig = (function () {
                              var ts = Data_Array.cons(txOpts)(Data_Array.cons(chainCursor)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.value0.factorTypes)));
                              return Tidy_Codegen.declSignature(Tidy_Codegen_Class.toNameStringIdent())(v.value0.name)(Tidy_Codegen.typeArrow(ts)(v.value0.returnType));
                          })();
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                              var idents = Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent)))(vars);
                              var helperName = v.value0.name + "'";
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))(helperName))(idents));
                          })())(function (expr) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))({
                                  sig: sig,
                                  expr: expr,
                                  vars: vars
                              });
                          });
                      })())(function (v1) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(mkHelperFunction(dictMonad)(v)(factors))(function (helper) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ v1.sig, Tidy_Codegen.declValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedWhere)(v.value0.name)(Data_Functor.map(Data_Functor.functorArray)(Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent()))(v1.vars))(Tidy_Codegen.exprWhere(v1.expr)(helper)) ]);
                          });
                      });
                  });
              };
          };
          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("TransactionOptions"))))(function (_txOpts) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))((function () {
                  if (v.value0.solidityFunction.value0.payable) {
                      return Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types.TokenUnit")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("MinorUnit"));
                  };
                  return Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("NoPay"));
              })()))(function (payAmt) {
                  var txOpts = Tidy_Codegen.typeApp(_txOpts)([ payAmt ]);
                  var v1 = Data_Array.uncons(v.value0.factorTypes);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      if (v.value0.solidityFunction.value0.constant) {
                          return mkNoArgsCall(txOpts);
                      };
                      if (v.value0.solidityFunction.value0.isConstructor) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("HexString"))))(function (hexString) {
                              return mkNoArgsSend([ txOpts, hexString ]);
                          });
                      };
                      return mkNoArgsSend([ txOpts ]);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      if (v.value0.solidityFunction.value0.constant) {
                          return mkArgsCall(txOpts)({
                              firstFactor: v1.value0.head,
                              restFactors: v1.value0.tail
                          });
                      };
                      if (v.value0.solidityFunction.value0.isConstructor) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("HexString"))))(function (hexString) {
                              return mkArgsSend([ txOpts, hexString ])({
                                  firstFactor: v1.value0.head,
                                  restFactors: v1.value0.tail
                              });
                          });
                      };
                      return mkArgsSend([ txOpts ])({
                          firstFactor: v1.value0.head,
                          restFactors: v1.value0.tail
                      });
                  };
                  throw new Error("Failed pattern match at Data.Generator (line 208, column 3 - line 220, column 74): " + [ v1.constructor.name ]);
              });
          });
      };
  };
  var lowerCase = function (s) {
      var rest = Data_String_CodePoints.drop(1)(s);
      var h = Data_String_Common.toLower(Data_String_CodePoints.take(1)(s));
      return h + rest;
  };
  var isValidType = function (s) {
      var startChar = Data_String_CodePoints.take(1)(s);
      return Data_String_Common.toUpper(startChar) !== Data_String_Common.toLower(startChar);
  };
  var genCode = function (dict) {
      return dict.genCode;
  };
  var funTypeSyn = function (dictMonad) {
      return function (v) {
          var nArgs = Data_Array.length(v.value0.factorTypes);
          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tuple" + Data_Show.show(Data_Show.showInt)(nArgs)))))(function (tupleType) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v.value0.factorTypes)(function (factor) {
                  if (v.value0.solidityFunction.value0.isUnCurried) {
                      return tagInput(dictMonad)(factor);
                  };
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Tuple.snd(factor));
              }))(function (ts) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tagged"))))(function (tagged) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Type.Proxy")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Proxy"))))(function (proxy) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                              if (v.value0.solidityFunction.value0.isConstructor) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))("Void"));
                                  });
                              };
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeString(v.value0.signature));
                          })())(function (t) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declType(Tidy_Codegen_Class.toNameStringProper())(v.value0.typeName)([  ])(Tidy_Codegen.typeApp(tagged)([ Tidy_Codegen.typeApp(proxy)([ t ]), Tidy_Codegen.typeApp(tupleType)(ts) ])));
                          });
                      });
                  });
              });
          });
      };
  };
  var eventId = function (v) {
      var eventArgs = Data_Functor.map(Data_Functor.functorArray)(function (a) {
          return Data_AbiParser.format(Data_AbiParser.formatIndexedSolidityValue)(a);
      })(v.value0.inputs);
      return Network_Ethereum_Core_HexString.fromByteString(Network_Ethereum_Core_Keccak256.keccak256(Network_Ethereum_Core_Keccak256.keccak256String)(v.value0.name + ("(" + (Data_String_Common.joinWith(",")(eventArgs) + ")"))));
  };
  var eventDecls = function (dictMonad) {
      return function (v) {
          var typeDecl = Tidy_Codegen.declNewtype(Tidy_Codegen_Class.toNameStringProper())(Tidy_Codegen_Class.toNameStringProper())(v.value0.constructor)([  ])(v.value0.constructor)(Tidy_Codegen.typeRecord(Tidy_Codegen_Class.toNameStringLabel)(v.value0.recordType)(Data_Maybe.Nothing.value));
          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Newtype")(Tidy_Codegen_Monad.importClass(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Newtype")))(function (_newtype) {
              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declDerive(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(Data_Maybe.Nothing.value)([  ])(_newtype)([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor), Tidy_Codegen.typeWildcard ]));
          }))(function (newtypeDecl) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Generic.Rep")(Tidy_Codegen_Monad.importClass(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Generic")))(function (_generic) {
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declDerive(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(Data_Maybe.Nothing.value)([  ])(_generic)([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor), Tidy_Codegen.typeWildcard ]));
              }))(function (genericDecl) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Show.Generic")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("genericShow")))(function (_genericShow) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declInstance(Tidy_Codegen.declInstanceDeclaration)(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(Data_Maybe.Nothing.value)([  ])("Show")([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor) ])([ Tidy_Codegen.instValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)("show")([  ])(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(_genericShow)) ]));
                      });
                  }))(function (showDecl) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Eq.Generic")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("genericEq")))(function (_genericEq) {
                              return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declInstance(Tidy_Codegen.declInstanceDeclaration)(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(Data_Maybe.Nothing.value)([  ])("Eq")([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor) ])([ Tidy_Codegen.instValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)("eq")([  ])(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(_genericEq)) ]));
                          });
                      }))(function (eqDecl) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                              var f = function (v1) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Functor.Tagged")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Tagged"))))(function (tagged) {
                                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Type.Proxy")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Proxy"))))(function (proxy) {
                                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(tagged)([ Tidy_Codegen.typeApp(proxy)([ Tidy_Codegen.typeString(v1.value0) ]), v1.value1 ]));
                                      });
                                  });
                              };
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v.value0.indexedTypes)(f))(function (indexedTypesTagged) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v.value0.nonIndexedTypes)(f))(function (nonIndexedTypesTagged) {
                                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                          var tupleType = "Tuple" + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.indexedTypes));
                                          return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(tupleType)));
                                      })())(function (indexedTuple) {
                                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                              var tupleType = "Tuple" + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.nonIndexedTypes));
                                              return Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(tupleType)));
                                          })())(function (nonIndexedTuple) {
                                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importClass(Tidy_Codegen_Class.toTokenStringQualifiedPro())("IndexedEvent")))(function (indexedEventClass) {
                                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declInstance(Tidy_Codegen.declInstanceDeclaration)(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(Data_Maybe.Nothing.value)([  ])(indexedEventClass)([ Tidy_Codegen.typeApp(indexedTuple)(indexedTypesTagged), Tidy_Codegen.typeApp(nonIndexedTuple)(nonIndexedTypesTagged), Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor) ])([ Tidy_Codegen.instValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)("isAnonymous")([ Tidy_Codegen.binderWildcard ])(Tidy_Codegen.exprBool(v.value0.solidityEvent.value0.anonymous)) ]));
                                              });
                                          });
                                      });
                                  });
                              });
                          })())(function (indexedEventDecl) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Control_Bind.discard(Control_Bind.discardUnit)(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importOpen(dictMonad)(Tidy_Codegen_Class.toModuleNameString())("Prelude"))(function () {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromRecordRecord()(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordNilReco)({
                                      reflectSymbol: function () {
                                          return "_nothing";
                                      }
                                  })()()())({
                                      reflectSymbol: function () {
                                          return "_just";
                                      }
                                  })()()())({
                                      reflectSymbol: function () {
                                          return "_fromJust";
                                      }
                                  })()()()))("Data.Maybe")({
                                      "_fromJust": Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("fromJust"),
                                      "_just": Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Maybe")("Just"),
                                      "_nothing": Tidy_Codegen_Monad.importCtor(Tidy_Codegen_Class.toTokenStringProper())(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Maybe")("Nothing")
                                  }))(function (v1) {
                                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Partial.Unsafe")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("unsafePartial")))(function (_unsafePartial) {
                                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Lens")(Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("set")))(function (set) {
                                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromRecordRecord()(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordNilReco)({
                                                  reflectSymbol: function () {
                                                      return "_mkHexString";
                                                  }
                                              })()()())({
                                                  reflectSymbol: function () {
                                                      return "_defaultFilter";
                                                  }
                                              })()()()))("Network.Ethereum.Web3.Types")({
                                                  "_defaultFilter": Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("defaultFilter"),
                                                  "_mkHexString": Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("mkHexString")
                                              }))(function (v2) {
                                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromRecordRecord()(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordConsRec(Tidy_Codegen_Monad.toImportFromImportNameQua)(Tidy_Codegen_Monad.toImportFromRecordNilReco)({
                                                      reflectSymbol: function () {
                                                          return "eventFilterClass";
                                                      }
                                                  })()()())({
                                                      reflectSymbol: function () {
                                                          return "_topics";
                                                      }
                                                  })()()())({
                                                      reflectSymbol: function () {
                                                          return "_address";
                                                      }
                                                  })()()()))("Network.Ethereum.Web3")({
                                                      "_address": Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("_address"),
                                                      "_topics": Tidy_Codegen_Monad.importValue(Tidy_Codegen_Class.toTokenStringQualifiedIde())("_topics"),
                                                      eventFilterClass: Tidy_Codegen_Monad.importClass(Tidy_Codegen_Class.toTokenStringQualifiedPro())("EventFilter")
                                                  }))(function (v3) {
                                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.declInstance(Tidy_Codegen.declInstanceDeclaration)(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(Data_Maybe.Nothing.value)([  ])(v3.eventFilterClass)([ Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))(v.value0.constructor) ])([ Tidy_Codegen.instValue(Tidy_Codegen_Class.toNameStringIdent())(Tidy_Codegen_Class.toGuardedExpr)("eventFilter")([ Tidy_Codegen.binderWildcard, Tidy_Codegen.binderVar(Tidy_Codegen_Class.toNameStringIdent())("addr") ])(Tidy_Codegen.exprOp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v2["_defaultFilter"]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("#")(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(set))([ Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v3["_address"]), Tidy_Codegen.exprApp(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_just"]))([ Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedIdent))("addr") ]) ])), Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("#")(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(set))([ Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v3["_topics"]), Tidy_Codegen.exprApp(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_just"]))([ Tidy_Codegen.exprArray([ Tidy_Codegen.exprOp(Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_just"]))([ Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(_unsafePartial)), Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_fromJust"])), Tidy_Codegen.binaryOp(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedOperato))("$")(Tidy_Codegen.exprApp(Tidy_Codegen.exprIdent(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v2["_mkHexString"]))([ Tidy_Codegen.exprString(Network_Ethereum_Core_HexString.unHex(eventId(v.value0.solidityEvent))) ])) ]), Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_nothing"]), Tidy_Codegen.exprCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN)(v1["_nothing"]) ]) ]) ])) ])) ]));
                                                  });
                                              });
                                          });
                                      });
                                  });
                              }))(function (eventFilterDecl) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([ typeDecl, newtypeDecl, genericDecl, showDecl, eqDecl, eventFilterDecl, indexedEventDecl ]);
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var capitalize = function (s) {
      var rest = Data_String_CodePoints.drop(1)(s);
      var h = Data_String_Common.toUpper(Data_String_CodePoints.take(1)(s));
      return h + rest;
  };
  var makeFunData = function (dictMonad) {
      return function (v) {
          return function (v1) {
              var mkReturnType = Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Web3"))))(function (web3) {
                  var $172 = !v1.value0.constant;
                  if ($172) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("HexString"))))(function (hexString) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(web3)([ hexString ]));
                      });
                  };
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Types")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("CallError"))))(function (callError) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Data.Either")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())("Either"))))(function (_either) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v1.value0.outputs)(toPSType(dictMonad)))(function (outputs) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))((function () {
                                  var v2 = Data_Array.uncons(outputs);
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameString()(Tidy_Codegen_Class.fromTokenQualifiedProper))("Unit"));
                                  };
                                  if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(v2.value0.head);
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      var tupleType = "Tuple" + Data_Show.show(Data_Show.showInt)(Data_Array.length(outputs));
                                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Functor.map(Tidy_Codegen_Monad.functorCodegenT(((dictMonad.Bind1()).Apply0()).Functor0()))(Tidy_Codegen.typeCtor(Tidy_Codegen_Class.toQualifiedNameQualifiedN))(Tidy_Codegen_Monad.importFrom(dictMonad)(Tidy_Codegen_Class.toModuleNameString())(Tidy_Codegen_Monad.toImportFromImportNameQua)("Network.Ethereum.Web3.Solidity")(Tidy_Codegen_Monad.importType(Tidy_Codegen_Class.toTokenStringQualifiedPro())(tupleType))))(function (tuple) {
                                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(tuple)(outputs));
                                      });
                                  };
                                  throw new Error("Failed pattern match at Data.Generator (line 159, column 14 - line 165, column 43): " + [ v2.constructor.name ]);
                              })())(function (out) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Tidy_Codegen.typeApp(web3)([ Tidy_Codegen.typeApp(_either)([ callError, out ]) ]));
                              });
                          });
                      });
                  });
              });
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v1.value0.inputs)(function (v2) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(v2.type))(function (ty) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new Data_Tuple.Tuple(v2.name, ty));
                  });
              }))(function (factorTypes) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(mkReturnType)(function (returnType) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new FunData({
                          typeName: (function () {
                              var $179 = isValidType(v1.value0.name);
                              if ($179) {
                                  return capitalize(v1.value0.name + "Fn");
                              };
                              return "FnT" + (v1.value0.name + "Fn");
                          })(),
                          factorTypes: factorTypes,
                          signature: toSignature(v1),
                          returnType: returnType,
                          name: v.exprPrefix + lowerCase(v1.value0.name),
                          solidityFunction: v1
                      }));
                  });
              });
          };
      };
  };
  var mkEventData = function (dictMonad) {
      return function (v) {
          var nis = Data_Array.filter(function (v1) {
              return !v1.value0.indexed;
          })(v.value0.inputs);
          var is = Data_Array.filter(function (v1) {
              return v1.value0.indexed;
          })(v.value0.inputs);
          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(is)(function (v1) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(v1.value0.type))(function (t) {
                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new Data_Tuple.Tuple(v1.value0.name, t));
              });
          }))(function (indexedTypes) {
              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(nis)(function (v1) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(v1.value0.type))(function (t) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new Data_Tuple.Tuple(v1.value0.name, t));
                  });
              }))(function (nonIndexedTypes) {
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v.value0.inputs)(function (v1) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(toPSType(dictMonad)(v1.value0.type))(function (t) {
                          return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new Data_Tuple.Tuple(v1.value0.name, t));
                      });
                  }))(function (recordType) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(new EventData({
                          constructor: (function () {
                              var $193 = isValidType(capitalize(v.value0.name));
                              if ($193) {
                                  return capitalize(v.value0.name);
                              };
                              return "EvT" + v.value0.name;
                          })(),
                          indexedTypes: indexedTypes,
                          nonIndexedTypes: nonIndexedTypes,
                          recordType: recordType,
                          solidityEvent: v
                      }));
                  });
              });
          });
      };
  };
  var codeAbiIdentity = function (dictMonad) {
      return {
          genCode: function (v) {
              return function (opts) {
                  var codegenFunction = function (f) {
                      return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(makeFunData(dictMonad)(opts)(f))(function (funData) {
                          return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(funTypeSyn(dictMonad)(funData))(function (syn) {
                              return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(mkFunction(dictMonad)(funData))(function (fun) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Array.cons(syn)(fun));
                              });
                          });
                      });
                  };
                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(Data_Traversable["for"](Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Traversable.traversableArray)(v)((function () {
                      var $203 = Data_Newtype.un()(Data_Identity.Identity);
                      return function ($204) {
                          return (function (v1) {
                              if (v1 instanceof Data_AbiParser.AbiFunction) {
                                  return codegenFunction(v1.value0);
                              };
                              if (v1 instanceof Data_AbiParser.AbiEvent) {
                                  return Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(dictMonad))(mkEventData(dictMonad)(v1.value0))(eventDecls(dictMonad));
                              };
                              if (v1 instanceof Data_AbiParser.AbiConstructor) {
                                  var f = new Data_AbiParser.SolidityFunction({
                                      name: "constructor",
                                      inputs: v1.value0.value0.inputs,
                                      outputs: [  ],
                                      constant: false,
                                      payable: false,
                                      isConstructor: true,
                                      isUnCurried: v1.value0.value0.isUnCurried
                                  });
                                  return codegenFunction(f);
                              };
                              if (v1 instanceof Data_AbiParser.AbiFallback) {
                                  return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))([  ]);
                              };
                              throw new Error("Failed pattern match at Data.Generator (line 629, column 40 - line 645, column 31): " + [ v1.constructor.name ]);
                          })($203($204));
                      };
                  })()))(function (codes) {
                      return Control_Applicative.pure(Tidy_Codegen_Monad.applicativeCodegenT(dictMonad))(Data_Array.concat(codes));
                  });
              };
          }
      };
  };
  exports["genCode"] = genCode;
  exports["codeAbiIdentity"] = codeAbiIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Either = $PS["Data.Either"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = {
      dimap: function (f) {
          return function (v) {
              return function (v1) {
                  return function ($24) {
                      return v1(f($24));
                  };
              };
          };
      }
  };
  var strongForget = {
      first: function (v) {
          return function ($25) {
              return v(Data_Tuple.fst($25));
          };
      },
      second: function (v) {
          return function ($26) {
              return v(Data_Tuple.snd($26));
          };
      },
      Profunctor0: function () {
          return profunctorForget;
      }
  };
  var choiceForget = function (dictMonoid) {
      return {
          left: function (v) {
              return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
          },
          right: function (v) {
              return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
          },
          Profunctor0: function () {
              return profunctorForget;
          }
      };
  };
  exports["Forget"] = Forget;
  exports["choiceForget"] = choiceForget;
  exports["strongForget"] = strongForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var First = function (x) {
      return x;
  };
  var semigroupFirst = {
      append: function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Just) {
                  return v;
              };
              return v1;
          };
      }
  };
  var monoidFirst = {
      mempty: Data_Maybe.Nothing.value,
      Semigroup0: function () {
          return semigroupFirst;
      }
  };
  exports["First"] = First;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Fold"] = $PS["Data.Lens.Fold"] || {};
  var exports = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var foldMapOf = Data_Newtype.under()()(Data_Lens_Internal_Forget.Forget);
  var preview = function (p) {
      var $99 = Data_Newtype.unwrap();
      var $100 = foldMapOf(p)(function ($102) {
          return Data_Maybe_First.First(Data_Maybe.Just.create($102));
      });
      return function ($101) {
          return $99($100($101));
      };
  };
  var previewOn = function (s) {
      return function (p) {
          return preview(p)(s);
      };
  };
  exports["previewOn"] = previewOn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var strongFn = {
      first: function (a2b) {
          return function (v) {
              return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
          };
      },
      second: Data_Functor.map(Data_Tuple.functorTuple),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["second"] = second;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.AffineTraversal"] = $PS["Data.Lens.AffineTraversal"] || {};
  var exports = $PS["Data.Lens.AffineTraversal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var affineTraversal$prime = function (to) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(to)(function (v) {
                      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(v.value0)(v.value1);
                  })(Data_Profunctor_Strong.second(dictStrong)(Data_Profunctor_Choice.right(dictChoice)(pab)));
              };
          };
      };
  };
  var affineTraversal = function (set) {
      return function (pre) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return affineTraversal$prime(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(set)(pre))(dictStrong)(dictChoice);
              };
          };
      };
  };
  exports["affineTraversal"] = affineTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_AffineTraversal = $PS["Data.Lens.AffineTraversal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var ix = function (dict) {
      return dict.ix;
  };
  var indexForeignObject = {
      ix: function (k) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (s) {
                      return function (b) {
                          return Foreign_Object.update(function (v) {
                              return new Data_Maybe.Just(b);
                          })(k)(s);
                      };
                  };
                  var pre = function (s) {
                      return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Foreign_Object.lookup(k)(s));
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      }
  };
  exports["ix"] = ix;
  exports["indexForeignObject"] = indexForeignObject;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var monadAffAff = {
      liftAff: Control_Category.identity(Control_Category.categoryFn),
      MonadEffect0: function () {
          return Effect_Aff.monadEffectAff;
      }
  };
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffState = function (dictMonadAff) {
      return {
          liftAff: (function () {
              var $29 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
              var $30 = liftAff(dictMonadAff);
              return function ($31) {
                  return $29($30($31));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
          }
      };
  };
  var monadAffWriter = function (dictMonadAff) {
      return function (dictMonoid) {
          return {
              liftAff: (function () {
                  var $32 = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))((dictMonadAff.MonadEffect0()).Monad0());
                  var $33 = liftAff(dictMonadAff);
                  return function ($34) {
                      return $32($33($34));
                  };
              })(),
              MonadEffect0: function () {
                  return Control_Monad_Writer_Trans.monadEffectWriter(dictMonoid)(dictMonadAff.MonadEffect0());
              }
          };
      };
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffState"] = monadAffState;
  exports["monadAffWriter"] = monadAffWriter;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function(exports) {
  "use strict";                                  

  exports.statsMethod = function (m, s) {
    return s[m]();
  };
})(PS["Node.FS.Stats"] = PS["Node.FS.Stats"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Stats"] = $PS["Node.FS.Stats"] || {};
  var exports = $PS["Node.FS.Stats"];
  var $foreign = $PS["Node.FS.Stats"];               
  var Stats = (function () {
      function Stats(value0) {
          this.value0 = value0;
      };
      Stats.create = function (value0) {
          return new Stats(value0);
      };
      return Stats;
  })();
  var isFile = function (v) {
      return $foreign.statsMethod("isFile", v.value0);
  };
  var isDirectory = function (v) {
      return $foreign.statsMethod("isDirectory", v.value0);
  };
  exports["Stats"] = Stats;
  exports["isFile"] = isFile;
  exports["isDirectory"] = isDirectory;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];
  var Node_FS_Stats = $PS["Node.FS.Stats"];                
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var readdir = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readdir(file, handleCallback(cb));
          });
      };
  };
  var stat = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.stat(file, handleCallback((function () {
                  var $28 = Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create);
                  return function ($29) {
                      return cb($28($29));
                  };
              })()));
          });
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  exports["stat"] = stat;
  exports["readdir"] = readdir;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };
  var toAff1 = function (f) {
      return function (a) {
          return toAff(f(a));
      };
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var stat = toAff1(Node_FS_Async.stat);        
  var readdir = toAff1(Node_FS_Async.readdir);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  exports["stat"] = stat;
  exports["readdir"] = readdir;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
})(PS);
(function(exports) {
  "use strict";

  exports.mkdirp =
    function (dir) {
      return function () {
        require("mkdirp").sync(dir);
      };
    };
})(PS["Node.FS.Sync.Mkdirp"] = PS["Node.FS.Sync.Mkdirp"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Sync.Mkdirp"] = $PS["Node.FS.Sync.Mkdirp"] || {};
  var exports = $PS["Node.FS.Sync.Mkdirp"];
  var $foreign = $PS["Node.FS.Sync.Mkdirp"];
  exports["mkdirp"] = $foreign.mkdirp;
})(PS);
(function(exports) {
  "use strict";
  var path =require("path");       

  exports.basenameWithoutExt = function (p) {
    return function (ext) {
      return path.basename(p, ext);
    };
  };

  exports.extname = path.extname;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Path"] = $PS["Node.Path"] || {};
  var exports = $PS["Node.Path"];
  var $foreign = $PS["Node.Path"];
  exports["basenameWithoutExt"] = $foreign.basenameWithoutExt;
  exports["extname"] = $foreign.extname;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CodeGen"] = $PS["Data.CodeGen"] || {};
  var exports = $PS["Data.CodeGen"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Error_Util = $PS["Control.Error.Util"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Class = $PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = $PS["Control.Monad.Writer.Trans"];
  var Data_AbiParser = $PS["Data.AbiParser"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Prisms = $PS["Data.Argonaut.Prisms"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generator = $PS["Data.Generator"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_FS_Stats = $PS["Node.FS.Stats"];
  var Node_FS_Sync_Mkdirp = $PS["Node.FS.Sync.Mkdirp"];
  var Node_Path = $PS["Node.Path"];
  var Tidy_Codegen = $PS["Tidy.Codegen"];
  var Tidy_Codegen_Class = $PS["Tidy.Codegen.Class"];
  var Tidy_Codegen_Monad = $PS["Tidy.Codegen.Monad"];
  var validateRootedDir = function (dictMonadAff) {
      return function (prefix) {
          return function (dir) {
              return Effect_Aff_Class.liftAff(dictMonadAff)((function () {
                  var fullPath = prefix + ("/" + dir);
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Node_FS_Aff.stat(fullPath)))(function (estat) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                          if (estat instanceof Data_Either.Left) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (estat instanceof Data_Either.Right) {
                              var isValid = Node_FS_Stats.isDirectory(estat.value0) && Data_Maybe.isNothing(Data_String_CodeUnits.stripPrefix(".")(dir));
                              if (isValid) {
                                  return new Data_Maybe.Just(fullPath);
                              };
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.CodeGen (line 170, column 8 - line 177, column 21): " + [ estat.constructor.name ]);
                      })());
                  });
              })());
          };
      };
  };
  var validateFile = function (dictMonadAff) {
      return function (dir) {
          return function (f) {
              return Effect_Aff_Class.liftAff(dictMonadAff)((function () {
                  var fullPath = dir + ("/" + f);
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Node_FS_Aff.stat(fullPath)))(function (estat) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                          if (estat instanceof Data_Either.Left) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (estat instanceof Data_Either.Right) {
                              var isValid = Node_FS_Stats.isFile(estat.value0) && Node_Path.extname(f) === ".json";
                              if (isValid) {
                                  return new Data_Maybe.Just(fullPath);
                              };
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.CodeGen (line 201, column 8 - line 208, column 21): " + [ estat.constructor.name ]);
                      })());
                  });
              })());
          };
      };
  };
  var parseAbi = function (v) {
      return function (abiJson) {
          if (!v.truffle) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.printJsonDecodeError)(Data_Argonaut_Decode_Class.decodeJson(Data_AbiParser.decodeJsonAbi)(abiJson));
          };
          if (v.truffle) {
              var mabi = Data_Lens_Fold.previewOn(abiJson)((function () {
                  var $59 = Data_Argonaut_Prisms["_Object"](Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
                  var $60 = Data_Lens_Index.ix(Data_Lens_Index.indexForeignObject)("abi")(Data_Lens_Internal_Forget.strongForget)(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst));
                  return function ($61) {
                      return $59($60($61));
                  };
              })());
              return Control_Bind.bind(Data_Either.bindEither)(Control_Error_Util.note("truffle artifact missing abi field")(mabi))(function (json) {
                  return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.printJsonDecodeError)(Data_Argonaut_Decode_Class.decodeJson(Data_AbiParser.decodeJsonAbi)(json));
              });
          };
          throw new Error("Failed pattern match at Data.CodeGen (line 136, column 32 - line 142, column 110): " + [ v.truffle.constructor.name ]);
      };
  };
  var maybeAnnotateArity = function (abi) {
      var groupingFunc = function (v) {
          if (v instanceof Data_AbiParser.AbiFunction) {
              return new Data_Tuple.Tuple([  ], [ v.value0 ]);
          };
          return new Data_Tuple.Tuple([ v ], [  ]);
      };
      var go = function (v) {
          return new Data_AbiParser.SolidityFunction({
              name: v.value0.name + Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.inputs)),
              inputs: v.value0.inputs,
              outputs: v.value0.outputs,
              constant: v.value0.constant,
              payable: v.value0.payable,
              isConstructor: v.value0.isConstructor,
              isUnCurried: v.value0.isUnCurried
          });
      };
      var v = Data_Array.foldMap(Data_Tuple.monoidTuple(Data_Monoid.monoidArray)(Data_Monoid.monoidArray))(groupingFunc)(abi);
      var nameToFunctions = Data_Map_Internal.fromFoldableWith(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.value1)(function (v1) {
          return new Data_Tuple.Tuple(v1.value0.name, [ v1 ]);
      }));
      var functionsWithArity = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(nameToFunctions)))(function (fs) {
          var $42 = Data_Array.length(fs) > 1;
          if ($42) {
              return Data_Functor.map(Data_Functor.functorArray)(go)(fs);
          };
          return fs;
      });
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(Data_Functor.map(Data_Functor.functorArray)(Data_AbiParser.AbiFunction.create)(functionsWithArity));
  };
  var getJsonFilesInDirectory = function (dictMonadAff) {
      return function (dictMonadState) {
          return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Control_Monad_State_Class.get(dictMonadState))(function (currentDirectory) {
              return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Node_FS_Aff.readdir(currentDirectory)))(function (allFiles) {
                  return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Traversable["for"](((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Traversable.traversableArray)(allFiles)(validateFile(dictMonadAff)(currentDirectory)))(function (msolcs) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Array.catMaybes(msolcs));
                  });
              });
          });
      };
  };
  var getAllDirectories = function (dictMonadAff) {
      return function (dictMonadState) {
          return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Control_Monad_State_Class.get(dictMonadState))(function (currentDirectory) {
              return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Node_FS_Aff.readdir(currentDirectory)))(function (allFiles) {
                  return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Traversable["for"](((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Traversable.traversableArray)(allFiles)(validateRootedDir(dictMonadAff)(currentDirectory)))(function (mdirs) {
                      return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Array.catMaybes(mdirs));
                  });
              });
          });
      };
  };
  var getAllJsonFiles = function (dictMonadAff) {
      return function (root) {
          var getAllJsonFiles$prime = Control_Bind.bind(Control_Monad_State_Trans.bindStateT((dictMonadAff.MonadEffect0()).Monad0()))(getJsonFilesInDirectory(Effect_Aff_Class.monadAffState(dictMonadAff))(Control_Monad_State_Trans.monadStateStateT((dictMonadAff.MonadEffect0()).Monad0())))(function (hereFiles) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT((dictMonadAff.MonadEffect0()).Monad0()))(getAllDirectories(Effect_Aff_Class.monadAffState(dictMonadAff))(Control_Monad_State_Trans.monadStateStateT((dictMonadAff.MonadEffect0()).Monad0())))(function (hereDirectories) {
                  var $45 = Data_Array["null"](hereDirectories);
                  if ($45) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT((dictMonadAff.MonadEffect0()).Monad0()))(hereFiles);
                  };
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT((dictMonadAff.MonadEffect0()).Monad0()))(Data_Traversable["for"](Control_Monad_State_Trans.applicativeStateT((dictMonadAff.MonadEffect0()).Monad0()))(Data_Traversable.traversableArray)(hereDirectories)(function (d) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT((dictMonadAff.MonadEffect0()).Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT((dictMonadAff.MonadEffect0()).Monad0()))(d))(function () {
                          return getAllJsonFiles$prime;
                      });
                  }))(function (thereFiles) {
                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT((dictMonadAff.MonadEffect0()).Monad0()))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(hereFiles)(Data_Array.concat(thereFiles)));
                  });
              });
          });
          return Control_Monad_State_Trans.evalStateT(((((dictMonadAff.MonadEffect0()).Monad0()).Bind1()).Apply0()).Functor0())(getAllJsonFiles$prime)(root);
      };
  };
  var generateCodeFromAbi = function (opts) {
      return function (v) {
          return function (destFile) {
              var moduleName = opts.modulePrefix + ("." + Node_Path.basenameWithoutExt(destFile)(".purs"));
              var abi$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Identity.Identity)(maybeAnnotateArity(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.un()(Data_Identity.Identity))(v)));
              var _module = Tidy_Codegen_Monad.codegenModule(Tidy_Codegen_Class.toNameStringModuleName())(moduleName)(Control_Bind.bind(Tidy_Codegen_Monad.bindCodegenT(Control_Monad_Free.freeMonad))(Data_Generator.genCode(Data_Generator.codeAbiIdentity(Control_Monad_Free.freeMonad))(abi$prime)({
                  exprPrefix: opts.exprPrefix
              }))(function (declarations) {
                  return Data_Foldable.traverse_(Tidy_Codegen_Monad.applicativeCodegenT(Control_Monad_Free.freeMonad))(Data_Foldable.foldableArray)(Tidy_Codegen_Monad.write(Control_Monad_Free.freeMonad))(declarations);
              }));
              return Tidy_Codegen.printModule(_module);
          };
      };
  };
  var writeCodeFromAbi = function (dictMonadAff) {
      return function (dictMonadTell) {
          return function (opts) {
              return function (abiPath) {
                  return function (destFile) {
                      return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Functor.map(((((dictMonadAff.MonadEffect0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Parser.jsonParser)(Effect_Aff_Class.liftAff(dictMonadAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(abiPath))))(function (ejson) {
                          return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Either.either((function () {
                              var $62 = Effect_Aff_Class.liftAff(dictMonadAff);
                              var $63 = Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
                              return function ($64) {
                                  return $62($63(Effect_Exception.error($64)));
                              };
                          })())(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0()))(ejson))(function (json) {
                              return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Either.either((function () {
                                  var $65 = Effect_Aff_Class.liftAff(dictMonadAff);
                                  var $66 = Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
                                  return function ($67) {
                                      return $65($66(Effect_Exception.error($67)));
                                  };
                              })())(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0()))(parseAbi(opts)(json)))(function (v) {
                                  return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Data_Traversable["for"](((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Traversable.traversableArray)(v)(function (v1) {
                                      if (v1 instanceof Data_Either.Left) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Control_Monad_Writer_Class.tell(dictMonadTell)([ {
                                              abiPath: abiPath,
                                              error: v1.value0.error,
                                              idx: v1.value0.idx
                                          } ]))(function () {
                                              return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Maybe.Nothing.value);
                                          });
                                      };
                                      if (v1 instanceof Data_Either.Right) {
                                          return Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(new Data_Maybe.Just(v1.value0));
                                      };
                                      throw new Error("Failed pattern match at Data.CodeGen (line 111, column 33 - line 115, column 44): " + [ v1.constructor.name ]);
                                  }))(function (abiUnAnn) {
                                      var code = generateCodeFromAbi(opts)(Data_Array.catMaybes(abiUnAnn))(destFile);
                                      return Effect_Aff_Class.liftAff(dictMonadAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(destFile)(code));
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var generatePS = function (os) {
      var warningCheck = Ansi_Output.withGraphics(Ansi_Output.foreground(Ansi_Codes.Yellow.value))("\u26a0");
      var successCheck = Ansi_Output.withGraphics(Ansi_Output.foreground(Ansi_Codes.Green.value))("\u2714");
      var genPSFileName = function (opts) {
          return function (fp) {
              return opts.pursDir + ("/" + (Node_Path.basenameWithoutExt(fp)(".json") + ".purs"));
          };
      };
      var errorCheck = Ansi_Output.withGraphics(Ansi_Output.foreground(Ansi_Codes.Red.value))("\u26a0");
      var opts = {
          pursDir: os.pursDir + ("/" + Data_String_Common.replaceAll(".")("/")(os.modulePrefix)),
          exprPrefix: os.exprPrefix,
          jsonDir: os.jsonDir,
          modulePrefix: os.modulePrefix,
          truffle: os.truffle
      };
      return Control_Bind.bind(Effect_Aff.bindAff)(getAllJsonFiles(Effect_Aff_Class.monadAffAff)(opts.jsonDir))(function (fs) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_FS_Sync_Mkdirp.mkdirp(opts.pursDir)))(function () {
              if (fs.length === 0) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("No abi json files found in directory: " + opts.jsonDir));
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Control_Bind.join(Control_Bind.bindArray))(Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(fs)(function (f) {
                  var f$prime = genPSFileName(opts)(f);
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Writer_Trans.runWriterT(writeCodeFromAbi(Effect_Aff_Class.monadAffWriter(Effect_Aff_Class.monadAffAff)(Data_Monoid.monoidArray))(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Effect_Aff.monadAff))(opts)(f)(f$prime)))(function (v) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log((function () {
                          var $55 = Data_Array["null"](v.value1);
                          if ($55) {
                              return successCheck + (" contract module for " + (f + (" successfully written to " + f$prime)));
                          };
                          return warningCheck + (" (" + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value1)) + (") contract module for " + (f + (" written to " + f$prime)))));
                      })())))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value1);
                      });
                  });
              })))(function (errs) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.unless(Effect_Aff.applicativeAff)(Data_Array["null"](errs))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log(errorCheck + (" got " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(errs)) + " error(s) during generation")))))(function () {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(errs)(function (v) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log(errorCheck + (" while parsing abi type of object at index: " + (Data_Show.show(Data_Show.showInt)(v.idx) + (" from: " + (v.abiPath + (" got error:\x0a    " + v.error)))))));
                      });
                  })))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(errs);
                  });
              });
          });
      });
  };
  exports["generatePS"] = generatePS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function.Memoize"] = $PS["Data.Function.Memoize"] || {};
  var exports = $PS["Data.Function.Memoize"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var tabulateNat = {
      tabulate: (function () {
          var tabulateImpl = function (f) {
              var walk = function (v) {
                  return function (v1) {
                      if (v instanceof Data_List_Types.Nil) {
                          return v1.value0;
                      };
                      if (v instanceof Data_List_Types.Cons && !v.value0) {
                          return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                      };
                      if (v instanceof Data_List_Types.Cons && v.value0) {
                          return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                      };
                      throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              var build = function (n) {
                  return new NatTrie(Data_Lazy.defer(function (v) {
                      return f(n);
                  }), Data_Lazy.defer(function (v) {
                      return build(n * 2 | 0);
                  }), Data_Lazy.defer(function (v) {
                      return build((n * 2 | 0) + 1 | 0);
                  }));
              };
              var trie = build(0);
              var bits = (function () {
                  var bits$prime = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v === 0) {
                                  $tco_done = true;
                                  return acc;
                              };
                              $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                              $copy_v = v >>> 1;
                              return;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return bits$prime(Data_List_Types.Nil.value);
              })();
              var go = function (n) {
                  return walk(bits(n))(trie);
              };
              return go;
          };
          return tabulateImpl;
      })()
  };
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return {
              tabulate: function (f) {
                  var f$prime = tabulate(dictTabulate)(function (a) {
                      return tabulate(dictTabulate1)(function (b) {
                          return f(new Data_Tuple.Tuple(a, b));
                      });
                  });
                  return function (v) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (g) {
                          return g(v.value1);
                      });
                  };
              }
          };
      };
  };
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($105) {
              return Data_Lazy.force(f1($105));
          };
      };
  };
  var memoize2 = function (dictTabulate) {
      return function (dictTabulate1) {
          return function (f) {
              var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
              return Data_Tuple.curry(f1);
          };
      };
  };
  exports["memoize2"] = memoize2;
  exports["tabulateNat"] = tabulateNat;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["ExitCodes"] = $PS["ExitCodes"] || {};
  var exports = $PS["ExitCodes"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var MisuseOfShellBuiltins = (function () {
      function MisuseOfShellBuiltins() {

      };
      MisuseOfShellBuiltins.value = new MisuseOfShellBuiltins();
      return MisuseOfShellBuiltins;
  })();
  var CLIUsageError = (function () {
      function CLIUsageError() {

      };
      CLIUsageError.value = new CLIUsageError();
      return CLIUsageError;
  })();
  var DataFormatError = (function () {
      function DataFormatError() {

      };
      DataFormatError.value = new DataFormatError();
      return DataFormatError;
  })();
  var CannotOpenInput = (function () {
      function CannotOpenInput() {

      };
      CannotOpenInput.value = new CannotOpenInput();
      return CannotOpenInput;
  })();
  var AddresseeUnknown = (function () {
      function AddresseeUnknown() {

      };
      AddresseeUnknown.value = new AddresseeUnknown();
      return AddresseeUnknown;
  })();
  var HostNameUnknown = (function () {
      function HostNameUnknown() {

      };
      HostNameUnknown.value = new HostNameUnknown();
      return HostNameUnknown;
  })();
  var ServiceUnavailable = (function () {
      function ServiceUnavailable() {

      };
      ServiceUnavailable.value = new ServiceUnavailable();
      return ServiceUnavailable;
  })();
  var InternalSoftwareError = (function () {
      function InternalSoftwareError() {

      };
      InternalSoftwareError.value = new InternalSoftwareError();
      return InternalSoftwareError;
  })();
  var SystemError = (function () {
      function SystemError() {

      };
      SystemError.value = new SystemError();
      return SystemError;
  })();
  var CriticalOSFileMissing = (function () {
      function CriticalOSFileMissing() {

      };
      CriticalOSFileMissing.value = new CriticalOSFileMissing();
      return CriticalOSFileMissing;
  })();
  var CannotCreateOutputFile = (function () {
      function CannotCreateOutputFile() {

      };
      CannotCreateOutputFile.value = new CannotCreateOutputFile();
      return CannotCreateOutputFile;
  })();
  var IOError = (function () {
      function IOError() {

      };
      IOError.value = new IOError();
      return IOError;
  })();
  var TemporaryFailure = (function () {
      function TemporaryFailure() {

      };
      TemporaryFailure.value = new TemporaryFailure();
      return TemporaryFailure;
  })();
  var RemoteError = (function () {
      function RemoteError() {

      };
      RemoteError.value = new RemoteError();
      return RemoteError;
  })();
  var PermissionDenied = (function () {
      function PermissionDenied() {

      };
      PermissionDenied.value = new PermissionDenied();
      return PermissionDenied;
  })();
  var ConfigurationError = (function () {
      function ConfigurationError() {

      };
      ConfigurationError.value = new ConfigurationError();
      return ConfigurationError;
  })();
  var CannotExecute = (function () {
      function CannotExecute() {

      };
      CannotExecute.value = new CannotExecute();
      return CannotExecute;
  })();
  var CommandNotFound = (function () {
      function CommandNotFound() {

      };
      CommandNotFound.value = new CommandNotFound();
      return CommandNotFound;
  })();
  var InvalidExitArgument = (function () {
      function InvalidExitArgument() {

      };
      InvalidExitArgument.value = new InvalidExitArgument();
      return InvalidExitArgument;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var eqExitCode = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Success && y instanceof Success) {
                  return true;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return true;
              };
              if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
                  return true;
              };
              if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
                  return true;
              };
              if (x instanceof DataFormatError && y instanceof DataFormatError) {
                  return true;
              };
              if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
                  return true;
              };
              if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
                  return true;
              };
              if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
                  return true;
              };
              if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
                  return true;
              };
              if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
                  return true;
              };
              if (x instanceof SystemError && y instanceof SystemError) {
                  return true;
              };
              if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
                  return true;
              };
              if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
                  return true;
              };
              if (x instanceof IOError && y instanceof IOError) {
                  return true;
              };
              if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
                  return true;
              };
              if (x instanceof RemoteError && y instanceof RemoteError) {
                  return true;
              };
              if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
                  return true;
              };
              if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
                  return true;
              };
              if (x instanceof CannotExecute && y instanceof CannotExecute) {
                  return true;
              };
              if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
                  return true;
              };
              if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
                  return true;
              };
              if (x instanceof SIGHUP && y instanceof SIGHUP) {
                  return true;
              };
              if (x instanceof SIGINT && y instanceof SIGINT) {
                  return true;
              };
              if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
                  return true;
              };
              if (x instanceof SIGILL && y instanceof SIGILL) {
                  return true;
              };
              if (x instanceof SIGABRT && y instanceof SIGABRT) {
                  return true;
              };
              if (x instanceof SIGFPE && y instanceof SIGFPE) {
                  return true;
              };
              if (x instanceof SIGKILL && y instanceof SIGKILL) {
                  return true;
              };
              if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
                  return true;
              };
              if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
                  return true;
              };
              if (x instanceof SIGALRM && y instanceof SIGALRM) {
                  return true;
              };
              if (x instanceof SIGTERM && y instanceof SIGTERM) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordExitCode = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Success && y instanceof Success) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Success) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Success) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof $$Error) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof $$Error) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof MisuseOfShellBuiltins) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof MisuseOfShellBuiltins) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CLIUsageError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CLIUsageError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof DataFormatError && y instanceof DataFormatError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof DataFormatError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof DataFormatError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CannotOpenInput) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CannotOpenInput) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof AddresseeUnknown) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof AddresseeUnknown) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof HostNameUnknown) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof HostNameUnknown) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ServiceUnavailable) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ServiceUnavailable) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof InternalSoftwareError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof InternalSoftwareError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SystemError && y instanceof SystemError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SystemError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SystemError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CriticalOSFileMissing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CriticalOSFileMissing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CannotCreateOutputFile) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CannotCreateOutputFile) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof IOError && y instanceof IOError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof IOError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof IOError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof TemporaryFailure) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof TemporaryFailure) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof RemoteError && y instanceof RemoteError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof RemoteError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof RemoteError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PermissionDenied) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PermissionDenied) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ConfigurationError) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ConfigurationError) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CannotExecute && y instanceof CannotExecute) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CannotExecute) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CannotExecute) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof CommandNotFound) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof CommandNotFound) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof InvalidExitArgument) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof InvalidExitArgument) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGHUP && y instanceof SIGHUP) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGHUP) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGHUP) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGINT && y instanceof SIGINT) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGINT) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGINT) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGQUIT) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGQUIT) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGILL && y instanceof SIGILL) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGILL) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGILL) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGABRT && y instanceof SIGABRT) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGABRT) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGABRT) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGFPE && y instanceof SIGFPE) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGFPE) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGFPE) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGKILL && y instanceof SIGKILL) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGKILL) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGKILL) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGSEGV) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGSEGV) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGPIPE) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGPIPE) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGALRM && y instanceof SIGALRM) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof SIGALRM) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof SIGALRM) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof SIGTERM && y instanceof SIGTERM) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at ExitCodes (line 47, column 1 - line 47, column 44): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqExitCode;
      }
  };
  var enumExitCode = {
      succ: function (v) {
          if (v instanceof Success) {
              return new Data_Maybe.Just($$Error.value);
          };
          if (v instanceof $$Error) {
              return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
          };
          if (v instanceof MisuseOfShellBuiltins) {
              return new Data_Maybe.Just(CLIUsageError.value);
          };
          if (v instanceof CLIUsageError) {
              return new Data_Maybe.Just(DataFormatError.value);
          };
          if (v instanceof DataFormatError) {
              return new Data_Maybe.Just(CannotOpenInput.value);
          };
          if (v instanceof CannotOpenInput) {
              return new Data_Maybe.Just(AddresseeUnknown.value);
          };
          if (v instanceof AddresseeUnknown) {
              return new Data_Maybe.Just(HostNameUnknown.value);
          };
          if (v instanceof HostNameUnknown) {
              return new Data_Maybe.Just(ServiceUnavailable.value);
          };
          if (v instanceof ServiceUnavailable) {
              return new Data_Maybe.Just(InternalSoftwareError.value);
          };
          if (v instanceof InternalSoftwareError) {
              return new Data_Maybe.Just(SystemError.value);
          };
          if (v instanceof SystemError) {
              return new Data_Maybe.Just(CriticalOSFileMissing.value);
          };
          if (v instanceof CriticalOSFileMissing) {
              return new Data_Maybe.Just(CannotCreateOutputFile.value);
          };
          if (v instanceof CannotCreateOutputFile) {
              return new Data_Maybe.Just(IOError.value);
          };
          if (v instanceof IOError) {
              return new Data_Maybe.Just(TemporaryFailure.value);
          };
          if (v instanceof TemporaryFailure) {
              return new Data_Maybe.Just(RemoteError.value);
          };
          if (v instanceof RemoteError) {
              return new Data_Maybe.Just(PermissionDenied.value);
          };
          if (v instanceof PermissionDenied) {
              return new Data_Maybe.Just(ConfigurationError.value);
          };
          if (v instanceof ConfigurationError) {
              return new Data_Maybe.Just(CannotExecute.value);
          };
          if (v instanceof CannotExecute) {
              return new Data_Maybe.Just(CommandNotFound.value);
          };
          if (v instanceof CommandNotFound) {
              return new Data_Maybe.Just(InvalidExitArgument.value);
          };
          if (v instanceof InvalidExitArgument) {
              return new Data_Maybe.Just(SIGHUP.value);
          };
          if (v instanceof SIGHUP) {
              return new Data_Maybe.Just(SIGINT.value);
          };
          if (v instanceof SIGINT) {
              return new Data_Maybe.Just(SIGQUIT.value);
          };
          if (v instanceof SIGQUIT) {
              return new Data_Maybe.Just(SIGILL.value);
          };
          if (v instanceof SIGILL) {
              return new Data_Maybe.Just(SIGABRT.value);
          };
          if (v instanceof SIGABRT) {
              return new Data_Maybe.Just(SIGFPE.value);
          };
          if (v instanceof SIGFPE) {
              return new Data_Maybe.Just(SIGKILL.value);
          };
          if (v instanceof SIGKILL) {
              return new Data_Maybe.Just(SIGSEGV.value);
          };
          if (v instanceof SIGSEGV) {
              return new Data_Maybe.Just(SIGPIPE.value);
          };
          if (v instanceof SIGPIPE) {
              return new Data_Maybe.Just(SIGALRM.value);
          };
          if (v instanceof SIGALRM) {
              return new Data_Maybe.Just(SIGTERM.value);
          };
          if (v instanceof SIGTERM) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
      },
      pred: function (v) {
          if (v instanceof Success) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof $$Error) {
              return new Data_Maybe.Just(Success.value);
          };
          if (v instanceof MisuseOfShellBuiltins) {
              return new Data_Maybe.Just($$Error.value);
          };
          if (v instanceof CLIUsageError) {
              return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
          };
          if (v instanceof DataFormatError) {
              return new Data_Maybe.Just(CLIUsageError.value);
          };
          if (v instanceof CannotOpenInput) {
              return new Data_Maybe.Just(DataFormatError.value);
          };
          if (v instanceof AddresseeUnknown) {
              return new Data_Maybe.Just(CannotOpenInput.value);
          };
          if (v instanceof HostNameUnknown) {
              return new Data_Maybe.Just(AddresseeUnknown.value);
          };
          if (v instanceof ServiceUnavailable) {
              return new Data_Maybe.Just(HostNameUnknown.value);
          };
          if (v instanceof InternalSoftwareError) {
              return new Data_Maybe.Just(ServiceUnavailable.value);
          };
          if (v instanceof SystemError) {
              return new Data_Maybe.Just(InternalSoftwareError.value);
          };
          if (v instanceof CriticalOSFileMissing) {
              return new Data_Maybe.Just(SystemError.value);
          };
          if (v instanceof CannotCreateOutputFile) {
              return new Data_Maybe.Just(CriticalOSFileMissing.value);
          };
          if (v instanceof IOError) {
              return new Data_Maybe.Just(CannotCreateOutputFile.value);
          };
          if (v instanceof TemporaryFailure) {
              return new Data_Maybe.Just(IOError.value);
          };
          if (v instanceof RemoteError) {
              return new Data_Maybe.Just(TemporaryFailure.value);
          };
          if (v instanceof PermissionDenied) {
              return new Data_Maybe.Just(RemoteError.value);
          };
          if (v instanceof ConfigurationError) {
              return new Data_Maybe.Just(PermissionDenied.value);
          };
          if (v instanceof CannotExecute) {
              return new Data_Maybe.Just(ConfigurationError.value);
          };
          if (v instanceof CommandNotFound) {
              return new Data_Maybe.Just(CannotExecute.value);
          };
          if (v instanceof InvalidExitArgument) {
              return new Data_Maybe.Just(CommandNotFound.value);
          };
          if (v instanceof SIGHUP) {
              return new Data_Maybe.Just(InvalidExitArgument.value);
          };
          if (v instanceof SIGINT) {
              return new Data_Maybe.Just(SIGHUP.value);
          };
          if (v instanceof SIGQUIT) {
              return new Data_Maybe.Just(SIGINT.value);
          };
          if (v instanceof SIGILL) {
              return new Data_Maybe.Just(SIGQUIT.value);
          };
          if (v instanceof SIGABRT) {
              return new Data_Maybe.Just(SIGILL.value);
          };
          if (v instanceof SIGFPE) {
              return new Data_Maybe.Just(SIGABRT.value);
          };
          if (v instanceof SIGKILL) {
              return new Data_Maybe.Just(SIGFPE.value);
          };
          if (v instanceof SIGSEGV) {
              return new Data_Maybe.Just(SIGKILL.value);
          };
          if (v instanceof SIGPIPE) {
              return new Data_Maybe.Just(SIGSEGV.value);
          };
          if (v instanceof SIGALRM) {
              return new Data_Maybe.Just(SIGPIPE.value);
          };
          if (v instanceof SIGTERM) {
              return new Data_Maybe.Just(SIGALRM.value);
          };
          throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
      },
      Ord0: function () {
          return ordExitCode;
      }
  };
  var boundedExitCode = {
      bottom: Success.value,
      top: SIGTERM.value,
      Ord0: function () {
          return ordExitCode;
      }
  };
  var boundedEnumExitCode = {
      cardinality: 32,
      toEnum: function (v) {
          if (v === 0) {
              return new Data_Maybe.Just(Success.value);
          };
          if (v === 1) {
              return new Data_Maybe.Just($$Error.value);
          };
          if (v === 2) {
              return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
          };
          if (v === 64) {
              return new Data_Maybe.Just(CLIUsageError.value);
          };
          if (v === 65) {
              return new Data_Maybe.Just(DataFormatError.value);
          };
          if (v === 66) {
              return new Data_Maybe.Just(CannotOpenInput.value);
          };
          if (v === 67) {
              return new Data_Maybe.Just(AddresseeUnknown.value);
          };
          if (v === 68) {
              return new Data_Maybe.Just(HostNameUnknown.value);
          };
          if (v === 69) {
              return new Data_Maybe.Just(ServiceUnavailable.value);
          };
          if (v === 70) {
              return new Data_Maybe.Just(InternalSoftwareError.value);
          };
          if (v === 71) {
              return new Data_Maybe.Just(SystemError.value);
          };
          if (v === 72) {
              return new Data_Maybe.Just(CriticalOSFileMissing.value);
          };
          if (v === 73) {
              return new Data_Maybe.Just(CannotCreateOutputFile.value);
          };
          if (v === 74) {
              return new Data_Maybe.Just(IOError.value);
          };
          if (v === 75) {
              return new Data_Maybe.Just(TemporaryFailure.value);
          };
          if (v === 76) {
              return new Data_Maybe.Just(RemoteError.value);
          };
          if (v === 77) {
              return new Data_Maybe.Just(PermissionDenied.value);
          };
          if (v === 78) {
              return new Data_Maybe.Just(ConfigurationError.value);
          };
          if (v === 126) {
              return new Data_Maybe.Just(CannotExecute.value);
          };
          if (v === 127) {
              return new Data_Maybe.Just(CommandNotFound.value);
          };
          if (v === 128) {
              return new Data_Maybe.Just(InvalidExitArgument.value);
          };
          if (v === 129) {
              return new Data_Maybe.Just(SIGHUP.value);
          };
          if (v === 130) {
              return new Data_Maybe.Just(SIGINT.value);
          };
          if (v === 131) {
              return new Data_Maybe.Just(SIGQUIT.value);
          };
          if (v === 132) {
              return new Data_Maybe.Just(SIGILL.value);
          };
          if (v === 134) {
              return new Data_Maybe.Just(SIGABRT.value);
          };
          if (v === 136) {
              return new Data_Maybe.Just(SIGFPE.value);
          };
          if (v === 137) {
              return new Data_Maybe.Just(SIGKILL.value);
          };
          if (v === 139) {
              return new Data_Maybe.Just(SIGSEGV.value);
          };
          if (v === 141) {
              return new Data_Maybe.Just(SIGPIPE.value);
          };
          if (v === 142) {
              return new Data_Maybe.Just(SIGALRM.value);
          };
          if (v === 143) {
              return new Data_Maybe.Just(SIGTERM.value);
          };
          return Data_Maybe.Nothing.value;
      },
      fromEnum: function (v) {
          if (v instanceof Success) {
              return 0;
          };
          if (v instanceof $$Error) {
              return 1;
          };
          if (v instanceof MisuseOfShellBuiltins) {
              return 2;
          };
          if (v instanceof CLIUsageError) {
              return 64;
          };
          if (v instanceof DataFormatError) {
              return 65;
          };
          if (v instanceof CannotOpenInput) {
              return 66;
          };
          if (v instanceof AddresseeUnknown) {
              return 67;
          };
          if (v instanceof HostNameUnknown) {
              return 68;
          };
          if (v instanceof ServiceUnavailable) {
              return 69;
          };
          if (v instanceof InternalSoftwareError) {
              return 70;
          };
          if (v instanceof SystemError) {
              return 71;
          };
          if (v instanceof CriticalOSFileMissing) {
              return 72;
          };
          if (v instanceof CannotCreateOutputFile) {
              return 73;
          };
          if (v instanceof IOError) {
              return 74;
          };
          if (v instanceof TemporaryFailure) {
              return 75;
          };
          if (v instanceof RemoteError) {
              return 76;
          };
          if (v instanceof PermissionDenied) {
              return 77;
          };
          if (v instanceof ConfigurationError) {
              return 78;
          };
          if (v instanceof CannotExecute) {
              return 126;
          };
          if (v instanceof CommandNotFound) {
              return 127;
          };
          if (v instanceof InvalidExitArgument) {
              return 128;
          };
          if (v instanceof SIGHUP) {
              return 128 + 1 | 0;
          };
          if (v instanceof SIGINT) {
              return 128 + 2 | 0;
          };
          if (v instanceof SIGQUIT) {
              return 128 + 3 | 0;
          };
          if (v instanceof SIGILL) {
              return 128 + 4 | 0;
          };
          if (v instanceof SIGABRT) {
              return 128 + 6 | 0;
          };
          if (v instanceof SIGFPE) {
              return 128 + 8 | 0;
          };
          if (v instanceof SIGKILL) {
              return 128 + 9 | 0;
          };
          if (v instanceof SIGSEGV) {
              return 128 + 11 | 0;
          };
          if (v instanceof SIGPIPE) {
              return 128 + 13 | 0;
          };
          if (v instanceof SIGALRM) {
              return 128 + 14 | 0;
          };
          if (v instanceof SIGTERM) {
              return 128 + 15 | 0;
          };
          throw new Error("Failed pattern match at ExitCodes (line 153, column 1 - line 219, column 30): " + [ v.constructor.name ]);
      },
      Bounded0: function () {
          return boundedExitCode;
      },
      Enum1: function () {
          return enumExitCode;
      }
  };
  exports["Success"] = Success;
  exports["Error"] = $$Error;
  exports["boundedEnumExitCode"] = boundedEnumExitCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Types"] = $PS["Options.Applicative.Types"] || {};
  var exports = $PS["Options.Applicative.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                  
  var ParserFailure = function (x) {
      return x;
  };
  var Internal = (function () {
      function Internal() {

      };
      Internal.value = new Internal();
      return Internal;
  })();
  var Hidden = (function () {
      function Hidden() {

      };
      Hidden.value = new Hidden();
      return Hidden;
  })();
  var Visible = (function () {
      function Visible() {

      };
      Visible.value = new Visible();
      return Visible;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var MultNode = (function () {
      function MultNode(value0) {
          this.value0 = value0;
      };
      MultNode.create = function (value0) {
          return new MultNode(value0);
      };
      return MultNode;
  })();
  var AltNode = (function () {
      function AltNode(value0) {
          this.value0 = value0;
      };
      AltNode.create = function (value0) {
          return new AltNode(value0);
      };
      return AltNode;
  })();
  var OptProperties = function (x) {
      return x;
  };
  var OptShort = (function () {
      function OptShort(value0) {
          this.value0 = value0;
      };
      OptShort.create = function (value0) {
          return new OptShort(value0);
      };
      return OptShort;
  })();
  var OptLong = (function () {
      function OptLong(value0) {
          this.value0 = value0;
      };
      OptLong.create = function (value0) {
          return new OptLong(value0);
      };
      return OptLong;
  })();
  var OptHelpInfo = function (x) {
      return x;
  };
  var CmdStart = (function () {
      function CmdStart() {

      };
      CmdStart.value = new CmdStart();
      return CmdStart;
  })();
  var CmdCont = (function () {
      function CmdCont() {

      };
      CmdCont.value = new CmdCont();
      return CmdCont;
  })();
  var CompletionResult = function (x) {
      return x;
  };
  var Success = (function () {
      function Success(value0) {
          this.value0 = value0;
      };
      Success.create = function (value0) {
          return new Success(value0);
      };
      return Success;
  })();
  var Failure = (function () {
      function Failure(value0) {
          this.value0 = value0;
      };
      Failure.create = function (value0) {
          return new Failure(value0);
      };
      return Failure;
  })();
  var CompletionInvoked = (function () {
      function CompletionInvoked(value0) {
          this.value0 = value0;
      };
      CompletionInvoked.create = function (value0) {
          return new CompletionInvoked(value0);
      };
      return CompletionInvoked;
  })();
  var Completer = function (x) {
      return x;
  };
  var Backtrack = (function () {
      function Backtrack() {

      };
      Backtrack.value = new Backtrack();
      return Backtrack;
  })();
  var NoBacktrack = (function () {
      function NoBacktrack() {

      };
      NoBacktrack.value = new NoBacktrack();
      return NoBacktrack;
  })();
  var SubparserInline = (function () {
      function SubparserInline() {

      };
      SubparserInline.value = new SubparserInline();
      return SubparserInline;
  })();
  var ParserPrefs = function (x) {
      return x;
  };
  var Intersperse = (function () {
      function Intersperse() {

      };
      Intersperse.value = new Intersperse();
      return Intersperse;
  })();
  var NoIntersperse = (function () {
      function NoIntersperse() {

      };
      NoIntersperse.value = new NoIntersperse();
      return NoIntersperse;
  })();
  var AllPositionals = (function () {
      function AllPositionals() {

      };
      AllPositionals.value = new AllPositionals();
      return AllPositionals;
  })();
  var ForwardOptions = (function () {
      function ForwardOptions() {

      };
      ForwardOptions.value = new ForwardOptions();
      return ForwardOptions;
  })();
  var ParserInfo = function (x) {
      return x;
  };
  var NilP = (function () {
      function NilP(value0) {
          this.value0 = value0;
      };
      NilP.create = function (value0) {
          return new NilP(value0);
      };
      return NilP;
  })();
  var OptP = (function () {
      function OptP(value0) {
          this.value0 = value0;
      };
      OptP.create = function (value0) {
          return new OptP(value0);
      };
      return OptP;
  })();
  var MultP = (function () {
      function MultP(value0) {
          this.value0 = value0;
      };
      MultP.create = function (value0) {
          return new MultP(value0);
      };
      return MultP;
  })();
  var AltP = (function () {
      function AltP(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AltP.create = function (value0) {
          return function (value1) {
              return new AltP(value0, value1);
          };
      };
      return AltP;
  })();
  var BindP = (function () {
      function BindP(value0) {
          this.value0 = value0;
      };
      BindP.create = function (value0) {
          return new BindP(value0);
      };
      return BindP;
  })();
  var Option = function (x) {
      return x;
  };
  var OptReader = (function () {
      function OptReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OptReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OptReader(value0, value1, value2);
              };
          };
      };
      return OptReader;
  })();
  var FlagReader = (function () {
      function FlagReader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlagReader.create = function (value0) {
          return function (value1) {
              return new FlagReader(value0, value1);
          };
      };
      return FlagReader;
  })();
  var ArgReader = (function () {
      function ArgReader(value0) {
          this.value0 = value0;
      };
      ArgReader.create = function (value0) {
          return new ArgReader(value0);
      };
      return ArgReader;
  })();
  var CmdReader = (function () {
      function CmdReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CmdReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CmdReader(value0, value1, value2);
              };
          };
      };
      return CmdReader;
  })();
  var CReader = function (x) {
      return x;
  };
  var ReadM = function (x) {
      return x;
  };
  var ErrorMsg = (function () {
      function ErrorMsg(value0) {
          this.value0 = value0;
      };
      ErrorMsg.create = function (value0) {
          return new ErrorMsg(value0);
      };
      return ErrorMsg;
  })();
  var InfoMsg = (function () {
      function InfoMsg(value0) {
          this.value0 = value0;
      };
      InfoMsg.create = function (value0) {
          return new InfoMsg(value0);
      };
      return InfoMsg;
  })();
  var ShowHelpText = (function () {
      function ShowHelpText() {

      };
      ShowHelpText.value = new ShowHelpText();
      return ShowHelpText;
  })();
  var MissingError = (function () {
      function MissingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MissingError.create = function (value0) {
          return function (value1) {
              return new MissingError(value0, value1);
          };
      };
      return MissingError;
  })();
  var ExpectsArgError = (function () {
      function ExpectsArgError(value0) {
          this.value0 = value0;
      };
      ExpectsArgError.create = function (value0) {
          return new ExpectsArgError(value0);
      };
      return ExpectsArgError;
  })();
  var UnexpectedError = (function () {
      function UnexpectedError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnexpectedError.create = function (value0) {
          return function (value1) {
              return new UnexpectedError(value0, value1);
          };
      };
      return UnexpectedError;
  })();
  var SomeParser = (function () {
      function SomeParser(value0) {
          this.value0 = value0;
      };
      SomeParser.create = function (value0) {
          return new SomeParser(value0);
      };
      return SomeParser;
  })();
  var MultPE = (function () {
      function MultPE(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MultPE.create = function (value0) {
          return function (value1) {
              return new MultPE(value0, value1);
          };
      };
      return MultPE;
  })();
  var Context = (function () {
      function Context(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Context.create = function (value0) {
          return function (value1) {
              return new Context(value0, value1);
          };
      };
      return Context;
  })();
  var ParserM = function (x) {
      return x;
  };
  var readerAsk = Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  var readerAbort = (function () {
      var $247 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity));
      var $248 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($249) {
          return ReadM($247($248($249)));
      };
  })();
  var readerError = function ($250) {
      return readerAbort(ErrorMsg.create($250));
  };
  var readMFunctor = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(f)(v);
          };
      }
  };
  var readMApply = {
      apply: function (v) {
          return function (v1) {
              return Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity)))(v)(v1);
          };
      },
      Functor0: function () {
          return readMFunctor;
      }
  };
  var readMBind = {
      bind: function (v) {
          return function (f) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity)))(v)((function () {
                  var $251 = Data_Newtype.un()(ReadM);
                  return function ($252) {
                      return $251(f($252));
                  };
              })());
          };
      },
      Apply0: function () {
          return readMApply;
      }
  };
  var readMApplicative = {
      pure: (function () {
          var $253 = Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
          return function ($254) {
              return ReadM($253($254));
          };
      })(),
      Apply0: function () {
          return readMApply;
      }
  };
  var parserMMonadRec = Control_Monad_Free.freeMonadRec;
  var parserMBind = Control_Monad_Free.freeBind;  
  var parserMApplicative = Control_Monad_Free.freeApplicative;
  var parseErrorSemigroup = {
      append: function (v) {
          return function (m) {
              return m;
          };
      }
  };
  var optVisibilityEq = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Internal && y instanceof Internal) {
                  return true;
              };
              if (x instanceof Hidden && y instanceof Hidden) {
                  return true;
              };
              if (x instanceof Visible && y instanceof Visible) {
                  return true;
              };
              return false;
          };
      }
  };
  var optVisibilityOrd = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Internal && y instanceof Internal) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Internal) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Internal) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Hidden && y instanceof Hidden) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Hidden) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Hidden) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Visible && y instanceof Visible) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Options.Applicative.Types (line 160, column 1 - line 160, column 54): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return optVisibilityEq;
      }
  };
  var optShowDefault = (function () {
      var $255 = Data_Newtype.un()(OptProperties);
      var $256 = Data_Newtype.un()(Option);
      return function ($257) {
          return (function (v) {
              return v.propShowDefault;
          })($255((function (v) {
              return v.optProps;
          })($256($257))));
      };
  })();
  var optVisibility = (function () {
      var $258 = Data_Newtype.un()(OptProperties);
      var $259 = Data_Newtype.un()(Option);
      return function ($260) {
          return (function (v) {
              return v.propVisibility;
          })($258((function (v) {
              return v.optProps;
          })($259($260))));
      };
  })();
  var optNameEq = {
      eq: function (x) {
          return function (y) {
              if (x instanceof OptShort && y instanceof OptShort) {
                  return x.value0 === y.value0;
              };
              if (x instanceof OptLong && y instanceof OptLong) {
                  return x.value0 === y.value0;
              };
              return false;
          };
      }
  };
  var optNameOrd = {
      compare: function (x) {
          return function (y) {
              if (x instanceof OptShort && y instanceof OptShort) {
                  return Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
              };
              if (x instanceof OptShort) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof OptShort) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof OptLong && y instanceof OptLong) {
                  return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Types (line 148, column 1 - line 148, column 42): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return optNameEq;
      }
  };
  var optMetaVar = (function () {
      var $261 = Data_Newtype.un()(OptProperties);
      var $262 = Data_Newtype.un()(Option);
      return function ($263) {
          return (function (v) {
              return v.propMetaVar;
          })($261((function (v) {
              return v.optProps;
          })($262($263))));
      };
  })();
  var optHelp = (function () {
      var $264 = Data_Newtype.un()(OptProperties);
      var $265 = Data_Newtype.un()(Option);
      return function ($266) {
          return (function (v) {
              return v.propHelp;
          })($264((function (v) {
              return v.optProps;
          })($265($266))));
      };
  })();
  var optDescMod = (function () {
      var $267 = Data_Newtype.un()(OptProperties);
      var $268 = Data_Newtype.un()(Option);
      return function ($269) {
          return (function (v) {
              return v.propDescMod;
          })($267((function (v) {
              return v.optProps;
          })($268($269))));
      };
  })();
  var oneM = function ($270) {
      return ParserM(Control_Monad_Free.liftF($270));
  };
  var fromM = function (v) {
      return new BindP(v);
  };
  var completerSemigroup = {
      append: function (v) {
          return function (v1) {
              return function (s) {
                  return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v(s)))(v1(s));
              };
          };
      }
  };
  var completerMonoid = {
      mempty: function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
      },
      Semigroup0: function () {
          return completerSemigroup;
      }
  };
  var cReaderFunctor = {
      map: function (f) {
          return Data_Newtype.over()()(CReader)(function (r) {
              return {
                  crReader: Data_Functor.map(readMFunctor)(f)(r.crReader),
                  crCompleter: r.crCompleter
              };
          });
      }
  };
  var parserInfoFunctor = {
      map: function (f) {
          return Data_Newtype.over()()(ParserInfo)(function (i) {
              return {
                  infoParser: Data_Functor.map(parserFunctor)(f)(i.infoParser),
                  infoFailureCode: i.infoFailureCode,
                  infoFooter: i.infoFooter,
                  infoFullDesc: i.infoFullDesc,
                  infoHeader: i.infoHeader,
                  infoPolicy: i.infoPolicy,
                  infoProgDesc: i.infoProgDesc
              };
          });
      }
  };
  var parserFunctor = {
      map: function (f) {
          return function (v) {
              if (v instanceof NilP) {
                  return new NilP(f(v.value0));
              };
              if (v instanceof OptP) {
                  return new OptP(Data_Functor.map(optionFunctor)(f)(v.value0));
              };
              if (v instanceof MultP) {
                  return Data_Exists.runExists(function (v1) {
                      return new MultP(Data_Exists.mkExists(new MultPE(Data_Functor.map(parserFunctor)(function (v2) {
                          return function ($271) {
                              return f(v2($271));
                          };
                      })(v1.value0), v1.value1)));
                  })(v.value0);
              };
              if (v instanceof AltP) {
                  return new AltP(Data_Functor.map(parserFunctor)(f)(v.value0), Data_Functor.map(parserFunctor)(f)(v.value1));
              };
              if (v instanceof BindP) {
                  return new BindP(Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v.value0));
              };
              throw new Error("Failed pattern match at Options.Applicative.Types (line 317, column 1 - line 322, column 36): " + [ f.constructor.name, v.constructor.name ]);
          };
      }
  };
  var optionFunctor = {
      map: function (f) {
          return Data_Newtype.over()()(Option)(function (o) {
              return {
                  optMain: Data_Functor.map(optReaderFunctor)(f)(o.optMain),
                  optProps: o.optProps
              };
          });
      }
  };
  var optReaderFunctor = {
      map: function (f) {
          return function (v) {
              if (v instanceof OptReader) {
                  return new OptReader(v.value0, Data_Functor.map(cReaderFunctor)(f)(v.value1), v.value2);
              };
              if (v instanceof FlagReader) {
                  return new FlagReader(v.value0, f(v.value1));
              };
              if (v instanceof ArgReader) {
                  return new ArgReader(Data_Functor.map(cReaderFunctor)(f)(v.value0));
              };
              if (v instanceof CmdReader) {
                  return new CmdReader(v.value0, v.value1, (function () {
                      var $272 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(parserInfoFunctor)(f));
                      return function ($273) {
                          return $272(v.value2($273));
                      };
                  })());
              };
              throw new Error("Failed pattern match at Options.Applicative.Types (line 264, column 1 - line 268, column 68): " + [ f.constructor.name, v.constructor.name ]);
          };
      }
  };
  var parserAlt = {
      alt: AltP.create,
      Functor0: function () {
          return parserFunctor;
      }
  };
  var parserApply = {
      apply: function (a) {
          return function (b) {
              return new MultP(Data_Exists.mkExists(new MultPE(a, b)));
          };
      },
      Functor0: function () {
          return parserFunctor;
      }
  };
  var parserApplicative = {
      pure: NilP.create,
      Apply0: function () {
          return parserApply;
      }
  };
  var manyM = function (p) {
      var go = function (acc) {
          return Control_Bind.bind(parserMBind)(oneM(Control_Alt.alt(parserAlt)(Data_Functor.map(parserFunctor)(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(parserApplicative)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)))))(function (aa) {
              return Control_Applicative.pure(parserMApplicative)(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                  return new Data_List_Types.Cons(v, acc);
              })(function (v) {
                  return Data_List.reverse(acc);
              })(aa));
          });
      };
      return Control_Monad_Rec_Class.tailRecM(parserMMonadRec)(go)(Data_List_Types.Nil.value);
  };
  var many = function ($274) {
      return fromM(manyM($274));
  };
  var argPolicyEq = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Intersperse && y instanceof Intersperse) {
                  return true;
              };
              if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
                  return true;
              };
              if (x instanceof AllPositionals && y instanceof AllPositionals) {
                  return true;
              };
              if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["ErrorMsg"] = ErrorMsg;
  exports["InfoMsg"] = InfoMsg;
  exports["ShowHelpText"] = ShowHelpText;
  exports["MissingError"] = MissingError;
  exports["ExpectsArgError"] = ExpectsArgError;
  exports["UnexpectedError"] = UnexpectedError;
  exports["ParserInfo"] = ParserInfo;
  exports["ParserPrefs"] = ParserPrefs;
  exports["Option"] = Option;
  exports["OptShort"] = OptShort;
  exports["OptLong"] = OptLong;
  exports["OptReader"] = OptReader;
  exports["FlagReader"] = FlagReader;
  exports["ArgReader"] = ArgReader;
  exports["CmdReader"] = CmdReader;
  exports["OptProperties"] = OptProperties;
  exports["Internal"] = Internal;
  exports["Hidden"] = Hidden;
  exports["Visible"] = Visible;
  exports["Backtrack"] = Backtrack;
  exports["NoBacktrack"] = NoBacktrack;
  exports["SubparserInline"] = SubparserInline;
  exports["ReadM"] = ReadM;
  exports["readerAsk"] = readerAsk;
  exports["readerAbort"] = readerAbort;
  exports["readerError"] = readerError;
  exports["CReader"] = CReader;
  exports["NilP"] = NilP;
  exports["OptP"] = OptP;
  exports["MultP"] = MultP;
  exports["AltP"] = AltP;
  exports["BindP"] = BindP;
  exports["Completer"] = Completer;
  exports["CompletionResult"] = CompletionResult;
  exports["ParserFailure"] = ParserFailure;
  exports["Success"] = Success;
  exports["Failure"] = Failure;
  exports["CompletionInvoked"] = CompletionInvoked;
  exports["Intersperse"] = Intersperse;
  exports["NoIntersperse"] = NoIntersperse;
  exports["AllPositionals"] = AllPositionals;
  exports["ForwardOptions"] = ForwardOptions;
  exports["OptHelpInfo"] = OptHelpInfo;
  exports["Leaf"] = Leaf;
  exports["MultNode"] = MultNode;
  exports["AltNode"] = AltNode;
  exports["SomeParser"] = SomeParser;
  exports["Context"] = Context;
  exports["CmdStart"] = CmdStart;
  exports["CmdCont"] = CmdCont;
  exports["optVisibility"] = optVisibility;
  exports["optMetaVar"] = optMetaVar;
  exports["optHelp"] = optHelp;
  exports["optShowDefault"] = optShowDefault;
  exports["optDescMod"] = optDescMod;
  exports["many"] = many;
  exports["parseErrorSemigroup"] = parseErrorSemigroup;
  exports["optNameEq"] = optNameEq;
  exports["optNameOrd"] = optNameOrd;
  exports["optVisibilityEq"] = optVisibilityEq;
  exports["optVisibilityOrd"] = optVisibilityOrd;
  exports["readMApplicative"] = readMApplicative;
  exports["readMBind"] = readMBind;
  exports["parserFunctor"] = parserFunctor;
  exports["parserApply"] = parserApply;
  exports["parserApplicative"] = parserApplicative;
  exports["parserAlt"] = parserAlt;
  exports["completerMonoid"] = completerMonoid;
  exports["argPolicyEq"] = argPolicyEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Internal"] = $PS["Options.Applicative.Internal"] || {};
  var exports = $PS["Options.Applicative.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader = $PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var TNil = (function () {
      function TNil() {

      };
      TNil.value = new TNil();
      return TNil;
  })();
  var TCons = (function () {
      function TCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TCons.create = function (value0) {
          return function (value1) {
              return new TCons(value0, value1);
          };
      };
      return TCons;
  })();
  var P = function (x) {
      return x;
  };
  var ListT = function (x) {
      return x;
  };
  var NondetT = function (x) {
      return x;
  };
  var ComplParser = (function () {
      function ComplParser(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ComplParser.create = function (value0) {
          return function (value1) {
              return new ComplParser(value0, value1);
          };
      };
      return ComplParser;
  })();
  var ComplOption = (function () {
      function ComplOption(value0) {
          this.value0 = value0;
      };
      ComplOption.create = function (value0) {
          return new ComplOption(value0);
      };
      return ComplOption;
  })();
  var ComplResult = (function () {
      function ComplResult(value0) {
          this.value0 = value0;
      };
      ComplResult.create = function (value0) {
          return new ComplResult(value0);
      };
      return ComplResult;
  })();
  var Completion = function (x) {
      return x;
  };
  var withReadM = function (f) {
      var f$prime = function (v) {
          if (v instanceof Options_Applicative_Types.ErrorMsg) {
              return new Options_Applicative_Types.ErrorMsg(f(v.value0));
          };
          return v;
      };
      var $142 = Control_Monad_Reader_Trans.mapReaderT(Control_Monad_Except.withExcept(f$prime));
      var $143 = Data_Newtype.un()(Options_Applicative_Types.ReadM);
      return function ($144) {
          return Options_Applicative_Types.ReadM($142($143($144)));
      };
  };
  var stepListT = function (v) {
      return v;
  };
  var runP = function (v) {
      return Control_Monad_Reader.runReader(Data_Function.flip(Control_Monad_State_Trans.runStateT)([  ])(Control_Monad_Except_Trans.runExceptT(v)));
  };
  var runNondetT = function (v) {
      return v;
  };
  var runListT = function (dictMonad) {
      return function (xs) {
          return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
              if (s instanceof TNil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (s instanceof TCons) {
                  return Control_Monad.liftM1(dictMonad)(Data_List_Types.Cons.create(s.value0))(runListT(dictMonad)(s.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 200, column 3 - line 202, column 53): " + [ s.constructor.name ]);
          });
      };
  };
  var runCompletion = function (v) {
      return function (prefs) {
          var v1 = Control_Monad_Reader_Trans.runReaderT(Control_Monad_Except_Trans.runExceptT(v))(prefs);
          if (v1 instanceof ComplResult) {
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof ComplParser) {
              return new Data_Maybe.Just(new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v1.value1)));
          };
          if (v1 instanceof ComplOption) {
              return new Data_Maybe.Just(new Data_Either.Right(v1.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 170, column 38 - line 173, column 42): " + [ v1.constructor.name ]);
      };
  };
  var pFunctor = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity))))(f)(v);
          };
      }
  };
  var pApply = {
      apply: function (v) {
          return function (v1) {
              return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1);
          };
      },
      Functor0: function () {
          return pFunctor;
      }
  };
  var pBind = {
      bind: function (v) {
          return function (k) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(function (a) {
                  var v1 = k(a);
                  return v1;
              });
          };
      },
      Apply0: function () {
          return pApply;
      }
  };
  var pApplicative = {
      pure: function (a) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(a);
      },
      Apply0: function () {
          return pApply;
      }
  };
  var pMonad = {
      Applicative0: function () {
          return pApplicative;
      },
      Bind1: function () {
          return pBind;
      }
  };
  var pAlt = {
      alt: function (v) {
          return function (v1) {
              return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1);
          };
      },
      Functor0: function () {
          return pFunctor;
      }
  };
  var missingArgP = function (dict) {
      return dict.missingArgP;
  };
  var getPrefs = function (dict) {
      return dict.getPrefs;
  };
  var exitP = function (dict) {
      return dict.exitP;
  };
  var exitContext = function (dict) {
      return dict.exitContext;
  };
  var errorP = function (dict) {
      return dict.errorP;
  };
  var hoistEither = function (dictMonadP) {
      return Data_Either.either(errorP(dictMonadP))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
  };
  var runReadM = function (dictMonadP) {
      return function (v) {
          return function (s) {
              return hoistEither(dictMonadP)(Control_Monad_Except.runExcept(Control_Monad_Reader_Trans.runReaderT(v)(s)));
          };
      };
  };
  var hoistMaybe = function (dictMonadP) {
      return function (err) {
          return Data_Maybe.maybe(errorP(dictMonadP)(err))(Control_Applicative.pure((dictMonadP.Monad0()).Applicative0()));
      };
  };
  var pMonadP = {
      enterContext: function (name) {
          return function (pinfo) {
              return Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.cons(new Options_Applicative_Types.Context(name, Data_Exists.mkExists(pinfo)))));
          };
      },
      exitContext: Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.drop(1))),
      getPrefs: P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))),
      missingArgP: function (e) {
          return function (v) {
              return errorP(pMonadP)(e);
          };
      },
      exitP: function (i) {
          return function (v) {
              return function (p) {
                  var $145 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Options_Applicative_Types.MissingError.create(i)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
                  return function ($146) {
                      return P($145($146));
                  };
              };
          };
      },
      errorP: (function () {
          var $147 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))));
          return function ($148) {
              return P($147($148));
          };
      })(),
      Monad0: function () {
          return pMonad;
      },
      Alt1: function () {
          return pAlt;
      }
  };
  var enterContext = function (dict) {
      return dict.enterContext;
  };
  var contextNames = function (ns) {
      var go = function (v) {
          return v.value0;
      };
      return Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(go)(ns));
  };
  var complResultMonad = {
      Applicative0: function () {
          return complResultApplicative;
      },
      Bind1: function () {
          return complResultBind;
      }
  };
  var complResultFunctor = {
      map: Control_Monad.liftM1(complResultMonad)
  };
  var complResultBind = {
      bind: function (m) {
          return function (f) {
              if (m instanceof ComplResult) {
                  return f(m.value0);
              };
              if (m instanceof ComplParser) {
                  return new ComplParser(m.value0, m.value1);
              };
              if (m instanceof ComplOption) {
                  return new ComplOption(m.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 134, column 14 - line 137, column 35): " + [ m.constructor.name ]);
          };
      },
      Apply0: function () {
          return complResultApply;
      }
  };
  var complResultApply = {
      apply: Control_Monad.ap(complResultMonad),
      Functor0: function () {
          return complResultFunctor;
      }
  };
  var complResultApplicative = {
      pure: ComplResult.create,
      Apply0: function () {
          return complResultApply;
      }
  };
  var completionFunctor = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(complResultFunctor)))(f)(v);
          };
      }
  };
  var completionAlt = {
      alt: function (v) {
          return function (v1) {
              return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1);
          };
      },
      Functor0: function () {
          return completionFunctor;
      }
  };
  var completionApply = {
      apply: function (v) {
          return function (v1) {
              return Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1);
          };
      },
      Functor0: function () {
          return completionFunctor;
      }
  };
  var completionApplicative = {
      pure: function (a) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(a);
      },
      Apply0: function () {
          return completionApply;
      }
  };
  var completionBind = {
      bind: function (v) {
          return function (k) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(function (a) {
                  var v1 = k(a);
                  return v1;
              });
          };
      },
      Apply0: function () {
          return completionApply;
      }
  };
  var completionMonad = {
      Applicative0: function () {
          return completionApplicative;
      },
      Bind1: function () {
          return completionBind;
      }
  };
  var completionMonadP = {
      enterContext: function (v) {
          return function (v1) {
              return Control_Applicative.pure(completionApplicative)(Data_Unit.unit);
          };
      },
      exitContext: Control_Applicative.pure(completionApplicative)(Data_Unit.unit),
      getPrefs: Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(complResultMonad))),
      missingArgP: function (v) {
          var $149 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad));
          var $150 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad);
          return function ($151) {
              return Completion($149($150(ComplOption.create($151))));
          };
      },
      exitP: function (v) {
          return function (a) {
              return function (p) {
                  return function (v1) {
                      return Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad)(new ComplParser(new Options_Applicative_Types.SomeParser(Data_Exists.mkExists(p)), a))));
                  };
              };
          };
      },
      errorP: (function () {
          var $152 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)));
          return function ($153) {
              return Completion($152($153));
          };
      })(),
      Monad0: function () {
          return completionMonad;
      },
      Alt1: function () {
          return completionAlt;
      }
  };
  var bimapTStep = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof TNil) {
                  return TNil.value;
              };
              if (v2 instanceof TCons) {
                  return new TCons(v(v2.value0), v1(v2.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 186, column 1 - line 186, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var listTFunctor = function (dictMonad) {
      return {
          map: function (f) {
              return function (v) {
                  return Control_Monad.liftM1(dictMonad)(bimapTStep(f)(Data_Functor.map(listTFunctor(dictMonad))(f)))(stepListT(v));
              };
          }
      };
  };
  var listTAlt = function (dictMonad) {
      return {
          alt: function (xs) {
              return function (ys) {
                  return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                      if (s instanceof TNil) {
                          return stepListT(ys);
                      };
                      if (s instanceof TCons) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(s.value0, Control_Alt.alt(listTAlt(dictMonad))(s.value1)(ys)));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Internal (line 227, column 5 - line 229, column 49): " + [ s.constructor.name ]);
                  });
              };
          },
          Functor0: function () {
              return listTFunctor(dictMonad);
          }
      };
  };
  var listTPlus = function (dictMonad) {
      return {
          empty: Control_Applicative.pure(dictMonad.Applicative0())(TNil.value),
          Alt0: function () {
              return listTAlt(dictMonad);
          }
      };
  };
  var hoistList = function (dictMonad) {
      return Data_Array.foldr(function (x) {
          return function (xt) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(x, xt));
          };
      })(Control_Plus.empty(listTPlus(dictMonad)));
  };
  var listTMonadTrans = {
      lift: function (dictMonad) {
          var $154 = Control_Monad.liftM1(dictMonad)(function (v) {
              return new TCons(v, Control_Plus.empty(listTPlus(dictMonad)));
          });
          return function ($155) {
              return ListT($154($155));
          };
      }
  };
  var cut = function (dictMonad) {
      return Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(true));
  };
  var nondetTMonadTrans = {
      lift: function (dictMonad) {
          var $156 = Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad));
          var $157 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
          return function ($158) {
              return NondetT($156($157($158)));
          };
      }
  };
  var listTMonad = function (dictMonad) {
      return {
          Applicative0: function () {
              return listTApplicative(dictMonad);
          },
          Bind1: function () {
              return listTBind(dictMonad);
          }
      };
  };
  var listTBind = function (dictMonad) {
      return {
          bind: function (xs) {
              return function (f) {
                  return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                      if (s instanceof TNil) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(TNil.value);
                      };
                      if (s instanceof TCons) {
                          return stepListT(Control_Alt.alt(listTAlt(dictMonad))(f(s.value0))(Control_Bind.bind(listTBind(dictMonad))(s.value1)(f)));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Internal (line 218, column 5 - line 220, column 53): " + [ s.constructor.name ]);
                  });
              };
          },
          Apply0: function () {
              return listTApply(dictMonad);
          }
      };
  };
  var listTApply = function (dictMonad) {
      return {
          apply: Control_Monad.ap(listTMonad(dictMonad)),
          Functor0: function () {
              return listTFunctor(dictMonad);
          }
      };
  };
  var listTApplicative = function (dictMonad) {
      return {
          pure: (function () {
              var $159 = hoistList(dictMonad);
              var $160 = Control_Applicative.pure(Control_Applicative.applicativeArray);
              return function ($161) {
                  return $159($160($161));
              };
          })(),
          Apply0: function () {
              return listTApply(dictMonad);
          }
      };
  };
  var listTAlternative = function (dictMonad) {
      return {
          Applicative0: function () {
              return listTApplicative(dictMonad);
          },
          Plus1: function () {
              return listTPlus(dictMonad);
          }
      };
  };
  var nondetTAltOp = function (dictMonad) {
      return function (m1) {
          return function (m2) {
              return NondetT(Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(runNondetT(m1))(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (s) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Alternative.guard(listTAlternative(Control_Monad_State_Trans.monadStateT(dictMonad)))(!s))(function () {
                      return runNondetT(m2);
                  });
              })));
          };
      };
  };
  var nondetTFunctor = function (dictMonad) {
      return {
          map: function (f) {
              var $162 = Data_Functor.map(listTFunctor(Control_Monad_State_Trans.monadStateT(dictMonad)))(f);
              return function ($163) {
                  return NondetT($162(runNondetT($163)));
              };
          }
      };
  };
  var nondetTAlt = function (dictMonad) {
      return {
          alt: function (v) {
              return function (v1) {
                  return Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
              };
          },
          Functor0: function () {
              return nondetTFunctor(dictMonad);
          }
      };
  };
  var nondetTPlus = function (dictMonad) {
      return {
          empty: Control_Plus.empty(listTPlus(Control_Monad_State_Trans.monadStateT(dictMonad))),
          Alt0: function () {
              return nondetTAlt(dictMonad);
          }
      };
  };
  var nondetTApply = function (dictMonad) {
      return {
          apply: function (v) {
              return function (v1) {
                  return Control_Apply.apply(listTApply(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
              };
          },
          Functor0: function () {
              return nondetTFunctor(dictMonad);
          }
      };
  };
  var nondetTApplicative = function (dictMonad) {
      return {
          pure: (function () {
              var $164 = Control_Applicative.pure(listTApplicative(Control_Monad_State_Trans.monadStateT(dictMonad)));
              return function ($165) {
                  return NondetT($164($165));
              };
          })(),
          Apply0: function () {
              return nondetTApply(dictMonad);
          }
      };
  };
  var nondetTBind = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(function ($166) {
                      return runNondetT(f($166));
                  });
              };
          },
          Apply0: function () {
              return nondetTApply(dictMonad);
          }
      };
  };
  var takeListT = function (dictMonad) {
      return function (v) {
          if (v === 0) {
              return Data_Function["const"](Control_Plus.empty(listTPlus(dictMonad)));
          };
          var $167 = Control_Monad.liftM1(dictMonad)(bimapTStep(Control_Category.identity(Control_Category.categoryFn))(takeListT(dictMonad)(v - 1 | 0)));
          return function ($168) {
              return ListT($167(stepListT($168)));
          };
      };
  };
  var disamb = function (dictMonad) {
      return function (allow_amb) {
          return function (xs) {
              return Control_Bind.bind(dictMonad.Bind1())((function (v) {
                  return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(v)(false);
              })(runListT(Control_Monad_State_Trans.monadStateT(dictMonad))(takeListT(Control_Monad_State_Trans.monadStateT(dictMonad))((function () {
                  if (allow_amb) {
                      return 1;
                  };
                  return 2;
              })())(runNondetT(xs)))))(function (xs$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                      if (xs$prime instanceof Data_List_Types.Cons && xs$prime.value1 instanceof Data_List_Types.Nil) {
                          return new Data_Maybe.Just(xs$prime.value0);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          };
      };
  };
  exports["enterContext"] = enterContext;
  exports["exitContext"] = exitContext;
  exports["getPrefs"] = getPrefs;
  exports["missingArgP"] = missingArgP;
  exports["errorP"] = errorP;
  exports["exitP"] = exitP;
  exports["hoistMaybe"] = hoistMaybe;
  exports["runReadM"] = runReadM;
  exports["withReadM"] = withReadM;
  exports["runP"] = runP;
  exports["runCompletion"] = runCompletion;
  exports["contextNames"] = contextNames;
  exports["cut"] = cut;
  exports["nondetTAltOp"] = nondetTAltOp;
  exports["disamb"] = disamb;
  exports["pMonadP"] = pMonadP;
  exports["completionMonadP"] = completionMonadP;
  exports["nondetTFunctor"] = nondetTFunctor;
  exports["nondetTApplicative"] = nondetTApplicative;
  exports["nondetTBind"] = nondetTBind;
  exports["nondetTAlt"] = nondetTAlt;
  exports["nondetTPlus"] = nondetTPlus;
  exports["nondetTMonadTrans"] = nondetTMonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Internal.Utils"] = $PS["Options.Applicative.Internal.Utils"] || {};
  var exports = $PS["Options.Applicative.Internal.Utils"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var whitespaceRegex = (function () {
      var v = Data_String_Regex.regex("\\s+")(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Partial_Unsafe.unsafeCrashWith("whitespaceRegex: `\\s+` seems to be invlaid, err: " + v.value0);
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Options.Applicative.Internal.Utils (line 39, column 19 - line 41, column 15): " + [ v.constructor.name ]);
  })();
  var words = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Regex.split(whitespaceRegex)(v);
  };
  var unWords = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(" ");
  };
  var unLines = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)("\x0a");
  };
  var startsWith = function (p) {
      return function (s) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(p)(s))(new Data_Maybe.Just(0));
      };
  };
  var lines = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Common.split("\x0a")(v);
  };
  var apApplyFlipped = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Function.applyFlipped);
  };
  exports["unLines"] = unLines;
  exports["unWords"] = unWords;
  exports["lines"] = lines;
  exports["words"] = words;
  exports["startsWith"] = startsWith;
  exports["apApplyFlipped"] = apApplyFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Common"] = $PS["Options.Applicative.Common"] || {};
  var exports = $PS["Options.Applicative.Common"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var OptWord = (function () {
      function OptWord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OptWord.create = function (value0) {
          return function (value1) {
              return new OptWord(value0, value1);
          };
      };
      return OptWord;
  })();
  var unexpectedError = function (arg) {
      return function (p) {
          return new Options_Applicative_Types.UnexpectedError(arg, new Options_Applicative_Types.SomeParser(Data_Exists.mkExists(p)));
      };
  };
  var simplify = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return new Options_Applicative_Types.Leaf(v.value0);
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          var remove_mult = function (v1) {
              if (v1 instanceof Options_Applicative_Types.MultNode) {
                  return v1.value0;
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($221) {
              return remove_mult(simplify($221));
          });
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.MultNode(v1);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var remove_alt = function (v1) {
              if (v1 instanceof Options_Applicative_Types.AltNode) {
                  return v1.value0;
              };
              if (v1 instanceof Options_Applicative_Types.MultNode && v1.value0.length === 0) {
                  return [  ];
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($222) {
              return remove_alt(simplify($222));
          });
          if (v1.length === 0) {
              return new Options_Applicative_Types.MultNode([  ]);
          };
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.AltNode(v1);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 279, column 1 - line 279, column 45): " + [ v.constructor.name ]);
  };
  var showOption = function (v) {
      if (v instanceof Options_Applicative_Types.OptLong) {
          return "--" + v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptShort) {
          return Data_String_CodeUnits.fromCharArray([ "-", v.value0 ]);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 42, column 1 - line 42, column 32): " + [ v.constructor.name ]);
  };
  var parseWord = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0 === "-" && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 === "-"))) {
              return new Data_Maybe.Just((function () {
                  var v1 = (function () {
                      var v2 = Data_List.span(function (v3) {
                          return v3 !== "=";
                      })(v.value1.value1);
                      if (v2.rest instanceof Data_List_Types.Nil) {
                          return new Data_Tuple.Tuple(v.value1.value1, Data_Maybe.Nothing.value);
                      };
                      if (v2.rest instanceof Data_List_Types.Cons) {
                          return new Data_Tuple.Tuple(v2.init, new Data_Maybe.Just(v2.rest.value1));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 106, column 23 - line 108, column 70): " + [ v2.constructor.name ]);
                  })();
                  return new OptWord(new Options_Applicative_Types.OptLong(Data_String_CodeUnits.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(v1.value0))), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $223 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                      return function ($224) {
                          return Data_String_CodeUnits.fromCharArray($223($224));
                      };
                  })())(v1.value1));
              })());
          };
          if (v instanceof Data_List_Types.Cons && v.value0 === "-") {
              if (v.value1 instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v.value1 instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just((function () {
                      var arg = Data_Functor.voidRight(Data_Maybe.functorMaybe)(v.value1.value1)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Data_List["null"](v.value1.value1)));
                      return new OptWord(new Options_Applicative_Types.OptShort(v.value1.value0), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $225 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                          return function ($226) {
                              return Data_String_CodeUnits.fromCharArray($225($226));
                          };
                      })())(arg));
                  })());
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 110, column 25 - line 114, column 79): " + [ v.value1.constructor.name ]);
          };
          return Data_Maybe.Nothing.value;
      };
      var $227 = Data_List.fromFoldable(Data_Foldable.foldableArray);
      return function ($228) {
          return go($227(Data_String_CodeUnits.toCharArray($228)));
      };
  })();
  var optionNames = function (v) {
      if (v instanceof Options_Applicative_Types.OptReader) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.FlagReader) {
          return v.value0;
      };
      return [  ];
  };
  var liftOpt = Options_Applicative_Types.OptP.create;
  var isOptionPrefix = function (v) {
      return function (v1) {
          if (v instanceof Options_Applicative_Types.OptShort && v1 instanceof Options_Applicative_Types.OptShort) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Options_Applicative_Types.OptLong && v1 instanceof Options_Applicative_Types.OptLong) {
              return Options_Applicative_Internal_Utils.startsWith(v.value0)(v1.value0);
          };
          return false;
      };
  };
  var optMatches = function (dictMonadP) {
      return function (disambiguate) {
          return function (opt) {
              return function (v) {
                  var is_short = function (v1) {
                      if (v1 instanceof Options_Applicative_Types.OptShort) {
                          return true;
                      };
                      if (v1 instanceof Options_Applicative_Types.OptLong) {
                          return false;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 89, column 5 - line 89, column 33): " + [ v1.constructor.name ]);
                  };
                  var has_name = function (a) {
                      if (disambiguate) {
                          return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isOptionPrefix(a));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Foldable.elem(Data_Foldable.foldableArray)(Options_Applicative_Types.optNameEq)(a);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 92, column 5 - line 94, column 27): " + [ a.constructor.name ]);
                  };
                  var errorFor = function (name) {
                      return function (msg) {
                          return "option " + (showOption(name) + (": " + msg));
                      };
                  };
                  if (opt instanceof Options_Applicative_Types.OptReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return new Data_Maybe.Just(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(function (args) {
                              var missing_arg = Options_Applicative_Internal.missingArgP(dictMonadP)(opt.value2(showOption(v.value0)))((Data_Newtype.un()(Options_Applicative_Types.CReader)(opt.value1)).crCompleter);
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))((function () {
                                  var v1 = Data_Maybe.maybe(args)(function (v2) {
                                      return new Data_List_Types.Cons(v2, args);
                                  })(v.value1);
                                  if (v1 instanceof Data_List_Types.Nil) {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(missing_arg);
                                  };
                                  if (v1 instanceof Data_List_Types.Cons) {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))(new Data_Tuple.Tuple(v1.value0, v1.value1));
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 67, column 27 - line 69, column 56): " + [ v1.constructor.name ]);
                              })())(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(v1.value1))(function () {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)(Options_Applicative_Internal.withReadM(errorFor(v.value0))((Data_Newtype.un()(Options_Applicative_Types.CReader)(opt.value1)).crReader))(v1.value0));
                                  });
                              });
                          }));
                      });
                  };
                  if (opt instanceof Options_Applicative_Types.FlagReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(is_short(v.value0) || Data_Maybe.isNothing(v.value1)))(function () {
                              return new Data_Maybe.Just(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(function (args) {
                                  var val$prime = Data_Functor.map(Data_Maybe.functorMaybe)(function ($229) {
                                      return (function (s) {
                                          return Data_Array.cons("-")(s);
                                      })(Data_String_CodeUnits.toCharArray($229));
                                  })(v.value1);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(Data_Maybe.maybe(args)((function () {
                                      var $230 = Data_Function.flip(Data_List_Types.Cons.create)(args);
                                      return function ($231) {
                                          return $230(Data_String_CodeUnits.fromCharArray($231));
                                      };
                                  })())(val$prime)))(function () {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))(opt.value1);
                                  });
                              }));
                          });
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var isArg = function (v) {
      if (v instanceof Options_Applicative_Types.ArgReader) {
          return true;
      };
      return false;
  };
  var evalParser = function (v) {
      if (v instanceof Options_Applicative_Types.NilP) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Options_Applicative_Types.OptP) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Options_Applicative_Types.MultP) {
          return Data_Exists.runExists(function (v1) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(evalParser(v1.value0))(evalParser(v1.value1));
          })(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltP) {
          return Control_Alt.alt(Data_Maybe.altMaybe)(evalParser(v.value0))(evalParser(v.value1));
      };
      if (v instanceof Options_Applicative_Types.BindP) {
          return Control_Monad_Free["resume'"](function (p) {
              return function (k) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(evalParser(p))(function ($232) {
                      return evalParser(Options_Applicative_Types.BindP.create(k($232)));
                  });
              };
          })(Data_Maybe.Just.create)(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 219, column 1 - line 219, column 44): " + [ v.constructor.name ]);
  };
  var searchParser = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Options_Applicative_Types.NilP) {
                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
              };
              if (v1 instanceof Options_Applicative_Types.OptP) {
                  return v(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.MultP) {
                  return Data_Exists.runExists(function (v2) {
                      var b = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value1))(function (p2$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(v2.value0)(p2$prime);
                      });
                      var a = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value0))(function (p1$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(p1$prime)(v2.value1);
                      });
                      return Options_Applicative_Internal.nondetTAltOp(dictMonad)(a)(b);
                  })(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.AltP) {
                  return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ searchParser(dictMonad)(v)(v1.value0), searchParser(dictMonad)(v)(v1.value1) ]);
              };
              if (v1 instanceof Options_Applicative_Types.BindP) {
                  return Control_Monad_Free["resume'"](function (p) {
                      return function (k) {
                          return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(p))(function (p$prime) {
                              return new Options_Applicative_Types.BindP(Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(p$prime))(k));
                          }), (function () {
                              var v2 = evalParser(p);
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return searchParser(dictMonad)(v)(new Options_Applicative_Types.BindP(k(v2.value0)));
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Common (line 134, column 7 - line 136, column 49): " + [ v2.constructor.name ]);
                          })() ]);
                      };
                  })(Data_Function["const"](Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad))))(v1.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 117, column 1 - line 119, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var searchOpt = function (dictMonadP) {
      return function (pprefs) {
          return function (w) {
              return searchParser(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(function (opt) {
                  var disambiguate = (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefDisambiguate && Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Internal.value);
                  var v = optMatches(dictMonadP)(disambiguate)((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain)(w);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Data_Functor.map(Control_Monad_State_Trans.functorStateT((dictMonadP.Alt1()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Common (line 143, column 3 - line 145, column 21): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var stepParser = function (dictMonadP) {
      return function (pprefs) {
          return function (v) {
              return function (arg) {
                  return function (p) {
                      if (v instanceof Options_Applicative_Types.AllPositionals) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      if (v instanceof Options_Applicative_Types.ForwardOptions) {
                          var v1 = parseWord(arg);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Alt.alt(Options_Applicative_Internal.nondetTAlt(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(searchOpt(dictMonadP)(pprefs)(v1.value0)(p))(searchArg(dictMonadP)(pprefs)(arg)(p));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return searchArg(dictMonadP)(pprefs)(arg)(p);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 173, column 42 - line 175, column 36): " + [ v1.constructor.name ]);
                      };
                      var v1 = parseWord(arg);
                      if (v1 instanceof Data_Maybe.Just) {
                          return searchOpt(dictMonadP)(pprefs)(v1.value0)(p);
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 176, column 29 - line 178, column 36): " + [ v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var searchArg = function (dictMonadP) {
      return function (prefs) {
          return function (arg) {
              return searchParser(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(function (opt) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Options_Applicative_Internal.nondetTBind(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.when(Options_Applicative_Internal.nondetTApplicative(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(isArg((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain))(Options_Applicative_Internal.cut(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))))(function () {
                      var v = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
                      if (v instanceof Options_Applicative_Types.CmdReader) {
                          var v1 = new Data_Tuple.Tuple(v.value2(arg), (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(prefs)).prefBacktrack);
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.NoBacktrack) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(dictMonadP.Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0())))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonadP.Monad0()))(Data_List_Types.Nil.value)))(function (args) {
                                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT((dictMonadP.Alt1()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Control_Apply.applyFirst(((dictMonadP.Monad0()).Bind1()).Apply0())(Control_Apply.applySecond(((dictMonadP.Monad0()).Bind1()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParserInfo(dictMonadP)(v1.value0.value0)(args)))(Options_Applicative_Internal.exitContext(dictMonadP))));
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.Backtrack) {
                              return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Monad_State_Trans.StateT(function (args) {
                                  return Control_Apply.applyFirst(((dictMonadP.Monad0()).Bind1()).Apply0())(Control_Apply.applySecond(((dictMonadP.Monad0()).Bind1()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParser(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoPolicy)(Options_Applicative_Types.CmdStart.value)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser)(args)))(Options_Applicative_Internal.exitContext(dictMonadP));
                              })));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.SubparserInline) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonadP.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0)))(function () {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonadP.Monad0()))((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser);
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Nothing) {
                              return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 153, column 7 - line 165, column 38): " + [ v1.constructor.name ]);
                      };
                      if (v instanceof Options_Applicative_Types.ArgReader) {
                          return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonadP.Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.CReader)(v.value0)).crReader)(arg))));
                      };
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0())));
                  });
              });
          };
      };
  };
  var runParserInfo = function (dictMonadP) {
      return function (i) {
          return runParserFully(dictMonadP)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(i)).infoPolicy)((Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(i)).infoParser);
      };
  };
  var runParserFully = function (dictMonadP) {
      return function (policy) {
          return function (p) {
              return function (args) {
                  return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(runParser(dictMonadP)(policy)(Options_Applicative_Types.CmdStart.value)(p)(args))(function (v) {
                      if (v.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure((dictMonadP.Monad0()).Applicative0())(v.value0);
                      };
                      if (v.value1 instanceof Data_List_Types.Cons) {
                          return Options_Applicative_Internal.errorP(dictMonadP)(unexpectedError(v.value1.value0)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Data_Unit.unit)));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 213, column 3 - line 215, column 66): " + [ v.value1.constructor.name ]);
                  });
              };
          };
      };
  };
  var runParser = function (dictMonadP) {
      return function (policy) {
          return function (isCmdStart) {
              return function (p) {
                  return function (args) {
                      var result = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(evalParser(p)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(args));
                      var newPolicy = function (a) {
                          if (policy instanceof Options_Applicative_Types.NoIntersperse) {
                              var $180 = Data_Maybe.isJust(parseWord(a));
                              if ($180) {
                                  return Options_Applicative_Types.NoIntersperse.value;
                              };
                              return Options_Applicative_Types.AllPositionals.value;
                          };
                          return policy;
                      };
                      var do_step = function (prefs) {
                          return function (arg) {
                              return function (argt) {
                                  return (function (v) {
                                      return Control_Monad_State_Trans.runStateT(v)(argt);
                                  })(Options_Applicative_Internal.disamb(Control_Monad_State_Trans.monadStateT(dictMonadP.Monad0()))(!(Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(prefs)).prefDisambiguate)(stepParser(dictMonadP)(prefs)(policy)(arg)(p)));
                              };
                          };
                      };
                      if (args instanceof Data_List_Types.Nil) {
                          return Options_Applicative_Internal.exitP(dictMonadP)(isCmdStart)(policy)(p)(result);
                      };
                      if (args instanceof Data_List_Types.Cons && (args.value0 === "--" && Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(policy)(Options_Applicative_Types.AllPositionals.value))) {
                          return runParser(dictMonadP)(Options_Applicative_Types.AllPositionals.value)(Options_Applicative_Types.CmdCont.value)(p)(args.value1);
                      };
                      if (args instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(Options_Applicative_Internal.getPrefs(dictMonadP))(function (prefs) {
                              return Control_Bind.bind((dictMonadP.Monad0()).Bind1())(do_step(prefs)(args.value0)(args.value1))(function (v) {
                                  if (v.value0 instanceof Data_Maybe.Nothing) {
                                      return Options_Applicative_Internal.hoistMaybe(dictMonadP)(unexpectedError(args.value0)(p))(result);
                                  };
                                  if (v.value0 instanceof Data_Maybe.Just) {
                                      return runParser(dictMonadP)(newPolicy(args.value0))(Options_Applicative_Types.CmdCont.value)(v.value0.value0)(v.value1);
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 191, column 5 - line 193, column 60): " + [ v.value0.constructor.name ]);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 185, column 38 - line 193, column 60): " + [ args.constructor.name ]);
                  };
              };
          };
      };
  };
  var treeMapParser = function (g) {
      var has_default = function (p) {
          return Data_Maybe.isJust(evalParser(p));
      };
      var hasArg = function (v) {
          if (v instanceof Options_Applicative_Types.NilP) {
              return false;
          };
          if (v instanceof Options_Applicative_Types.OptP) {
              return isArg((Data_Newtype.un()(Options_Applicative_Types.Option)(v.value0)).optMain);
          };
          if (v instanceof Options_Applicative_Types.MultP) {
              return Data_Exists.runExists(function (v1) {
                  return hasArg(v1.value0) || hasArg(v1.value1);
              })(v.value0);
          };
          if (v instanceof Options_Applicative_Types.AltP) {
              return hasArg(v.value0) || hasArg(v.value1);
          };
          if (v instanceof Options_Applicative_Types.BindP) {
              return Control_Monad_Free["resume'"](function (p) {
                  return function (v1) {
                      return hasArg(p);
                  };
              })(Data_Function["const"](false))(v.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 271, column 5 - line 271, column 44): " + [ v.constructor.name ]);
      };
      var go = function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          if (v4 instanceof Options_Applicative_Types.NilP) {
                              return new Options_Applicative_Types.MultNode([  ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.OptP) {
                              if (Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(v4.value0))(Options_Applicative_Types.Internal.value)) {
                                  return new Options_Applicative_Types.Leaf(v3({
                                      hinfoMulti: v,
                                      hinfoDefault: v1,
                                      hinfoUnreachableArgs: v2
                                  })(v4.value0));
                              };
                              if (Data_Boolean.otherwise) {
                                  return new Options_Applicative_Types.MultNode([  ]);
                              };
                          };
                          if (v4 instanceof Options_Applicative_Types.MultP) {
                              return Data_Exists.runExists(function (v5) {
                                  var r$prime = v2 || hasArg(v5.value0);
                                  return new Options_Applicative_Types.MultNode([ go(v)(v1)(v2)(v3)(v5.value0), go(v)(v1)(r$prime)(v3)(v5.value1) ]);
                              })(v4.value0);
                          };
                          if (v4 instanceof Options_Applicative_Types.AltP) {
                              var d$prime = v1 || (has_default(v4.value0) || has_default(v4.value1));
                              return new Options_Applicative_Types.AltNode([ go(v)(d$prime)(v2)(v3)(v4.value0), go(v)(d$prime)(v2)(v3)(v4.value1) ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.BindP) {
                              return Control_Monad_Free["resume'"](function (p) {
                                  return function (k) {
                                      var go$prime = go(true)(v1)(v2)(v3)(p);
                                      var v5 = evalParser(p);
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          return go$prime;
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return new Options_Applicative_Types.MultNode([ go$prime, go(true)(v1)(v2)(v3)(new Options_Applicative_Types.BindP(k(v5.value0))) ]);
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.Common (line 266, column 12 - line 268, column 68): " + [ v5.constructor.name ]);
                                  };
                              })(Data_Function["const"](new Options_Applicative_Types.MultNode([  ])))(v4.value0);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 247, column 5 - line 250, column 21): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name ]);
                      };
                  };
              };
          };
      };
      var $233 = go(false)(false)(false)(g);
      return function ($234) {
          return simplify($233($234));
      };
  };
  var mapParser = function (f) {
      var flatten = function (v) {
          if (v instanceof Options_Applicative_Types.Leaf) {
              return [ v.value0 ];
          };
          if (v instanceof Options_Applicative_Types.MultNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          if (v instanceof Options_Applicative_Types.AltNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 234, column 5 - line 234, column 27): " + [ v.constructor.name ]);
      };
      var $235 = treeMapParser(f);
      return function ($236) {
          return flatten($235($236));
      };
  };
  exports["liftOpt"] = liftOpt;
  exports["showOption"] = showOption;
  exports["runParserInfo"] = runParserInfo;
  exports["mapParser"] = mapParser;
  exports["treeMapParser"] = treeMapParser;
  exports["optionNames"] = optionNames;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Text.PrettyPrint.Leijen"] = $PS["Text.PrettyPrint.Leijen"] || {};
  var exports = $PS["Text.PrettyPrint.Leijen"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var SFail = (function () {
      function SFail() {

      };
      SFail.value = new SFail();
      return SFail;
  })();
  var SEmpty = (function () {
      function SEmpty() {

      };
      SEmpty.value = new SEmpty();
      return SEmpty;
  })();
  var SChar = (function () {
      function SChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar.create = function (value0) {
          return function (value1) {
              return new SChar(value0, value1);
          };
      };
      return SChar;
  })();
  var SText = (function () {
      function SText(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText(value0, value1, value2);
              };
          };
      };
      return SText;
  })();
  var SLine = (function () {
      function SLine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine.create = function (value0) {
          return function (value1) {
              return new SLine(value0, value1);
          };
      };
      return SLine;
  })();
  var SFail$prime = (function () {
      function SFail$prime() {

      };
      SFail$prime.value = new SFail$prime();
      return SFail$prime;
  })();
  var SEmpty$prime = (function () {
      function SEmpty$prime() {

      };
      SEmpty$prime.value = new SEmpty$prime();
      return SEmpty$prime;
  })();
  var SChar$prime = (function () {
      function SChar$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar$prime.create = function (value0) {
          return function (value1) {
              return new SChar$prime(value0, value1);
          };
      };
      return SChar$prime;
  })();
  var SText$prime = (function () {
      function SText$prime(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText$prime(value0, value1, value2);
              };
          };
      };
      return SText$prime;
  })();
  var SLine$prime = (function () {
      function SLine$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine$prime.create = function (value0) {
          return function (value1) {
              return new SLine$prime(value0, value1);
          };
      };
      return SLine$prime;
  })();
  var Fail = (function () {
      function Fail() {

      };
      Fail.value = new Fail();
      return Fail;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var FlatAlt = (function () {
      function FlatAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlatAlt.create = function (value0) {
          return function (value1) {
              return new FlatAlt(value0, value1);
          };
      };
      return FlatAlt;
  })();
  var Cat = (function () {
      function Cat(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cat.create = function (value0) {
          return function (value1) {
              return new Cat(value0, value1);
          };
      };
      return Cat;
  })();
  var Nest = (function () {
      function Nest(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nest.create = function (value0) {
          return function (value1) {
              return new Nest(value0, value1);
          };
      };
      return Nest;
  })();
  var Union = (function () {
      function Union(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Union.create = function (value0) {
          return function (value1) {
              return new Union(value0, value1);
          };
      };
      return Union;
  })();
  var Column = (function () {
      function Column(value0) {
          this.value0 = value0;
      };
      Column.create = function (value0) {
          return new Column(value0);
      };
      return Column;
  })();
  var Columns = (function () {
      function Columns(value0) {
          this.value0 = value0;
      };
      Columns.create = function (value0) {
          return new Columns(value0);
      };
      return Columns;
  })();
  var Nesting = (function () {
      function Nesting(value0) {
          this.value0 = value0;
      };
      Nesting.create = function (value0) {
          return new Nesting(value0);
      };
      return Nesting;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Cons(value0, value1, value2);
              };
          };
      };
      return Cons;
  })();
  var text = function (v) {
      if (v === "") {
          return Empty.value;
      };
      return new Text(Data_String_CodePoints.length(v), v);
  };                         
  var spaces = function (n) {
      if (n <= 0) {
          return "";
      };
      if (Data_Boolean.otherwise) {
          return Data_String_CodeUnits.fromCharArray(Data_Array.replicate(n)(" "));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 908, column 1 - line 908, column 24): " + [ n.constructor.name ]);
  };
  var space = new Char(" ");
  var rparen = new Char(")");
  var rbracket = new Char("]");
  var nesting = function (f) {
      return new Nesting(f);
  };
  var nest = function (i) {
      return function (x) {
          return new Nest(i, x);
      };
  };
  var lparen = new Char("(");
  var line = new FlatAlt(Line.value, space);
  var lbracket = new Char("[");
  var indentation = function (n) {
      return spaces(n);
  };
  var forceSimpleDoc = function (v) {
      if (v instanceof SFail$prime) {
          return SFail.value;
      };
      if (v instanceof SEmpty$prime) {
          return SEmpty.value;
      };
      if (v instanceof SChar$prime) {
          return new SChar(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      if (v instanceof SText$prime) {
          return new SText(v.value0, v.value1, forceSimpleDoc(Data_Lazy.force(v.value2)));
      };
      if (v instanceof SLine$prime) {
          return new SLine(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 600, column 18 - line 605, column 51): " + [ v.constructor.name ]);
  };
  var renderFits = function (fits) {
      return function (rfrac) {
          return function (w) {
              return function (headNode) {
                  var r = Data_Ord.max(Data_Ord.ordInt)(0)(Data_Ord.min(Data_Ord.ordInt)(w)(Data_Int.round(Data_Int.toNumber(w) * rfrac)));
                  var nicest$prime = function (n) {
                      return function (k) {
                          return function (i) {
                              return function (ds) {
                                  return function (x) {
                                      return function (y) {
                                          var x$prime = best(n)(k)(new Cons(i, x, ds));
                                          var width$prime = Data_Ord.min(Data_Ord.ordInt)(w - k | 0)((r - k | 0) + n | 0);
                                          var $170 = fits(w)(Data_Ord.min(Data_Ord.ordInt)(n)(k))(width$prime)(x$prime);
                                          if ($170) {
                                              return x$prime;
                                          };
                                          var y$prime = best(n)(k)(new Cons(i, y, ds));
                                          return y$prime;
                                      };
                                  };
                              };
                          };
                      };
                  };
                  var best = function (n) {
                      return function (k) {
                          return function (v) {
                              if (v instanceof Nil) {
                                  return SEmpty$prime.value;
                              };
                              if (v instanceof Cons) {
                                  if (v.value1 instanceof Fail) {
                                      return SFail$prime.value;
                                  };
                                  if (v.value1 instanceof Empty) {
                                      return best(n)(k)(v.value2);
                                  };
                                  if (v.value1 instanceof Char) {
                                      var k$prime = k + 1 | 0;
                                      return new SChar$prime(v.value1.value0, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Text) {
                                      var k$prime = k + v.value1.value0 | 0;
                                      return new SText$prime(v.value1.value0, v.value1.value1, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Line) {
                                      return new SLine$prime(v.value0, Data_Lazy.defer(function (v1) {
                                          return best(v.value0)(v.value0)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof FlatAlt) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, v.value2));
                                  };
                                  if (v.value1 instanceof Cat) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, new Cons(v.value0, v.value1.value1, v.value2)));
                                  };
                                  if (v.value1 instanceof Nest) {
                                      var i$prime = v.value0 + v.value1.value0 | 0;
                                      return best(n)(k)(new Cons(i$prime, v.value1.value1, v.value2));
                                  };
                                  if (v.value1 instanceof Union) {
                                      return nicest$prime(n)(k)(v.value0)(v.value2)(v.value1.value0)(v.value1.value1);
                                  };
                                  if (v.value1 instanceof Column) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(k), v.value2));
                                  };
                                  if (v.value1 instanceof Columns) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(new Data_Maybe.Just(w)), v.value2));
                                  };
                                  if (v.value1 instanceof Nesting) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(v.value0), v.value2));
                                  };
                                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 788, column 11 - line 802, column 56): " + [ v.value1.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 785, column 7 - line 785, column 50): " + [ n.constructor.name, k.constructor.name, v.constructor.name ]);
                          };
                      };
                  };
                  return forceSimpleDoc(best(0)(0)(new Cons(0, headNode, Nil.value)));
              };
          };
      };
  };
  var foldr1 = function (dictMonoid) {
      return function (f) {
          return function ($246) {
              return (function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(v.value0.last)(v.value0.init);
                  };
                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 122, column 29 - line 124, column 43): " + [ v.constructor.name ]);
              })(Data_Array.unsnoc($246));
          };
      };
  };
  var flatten = function (v) {
      if (v instanceof FlatAlt) {
          return v.value1;
      };
      if (v instanceof Cat) {
          return new Cat(flatten(v.value0), flatten(v.value1));
      };
      if (v instanceof Nest) {
          return new Nest(v.value0, flatten(v.value1));
      };
      if (v instanceof Line) {
          return Fail.value;
      };
      if (v instanceof Union) {
          return flatten(v.value0);
      };
      if (v instanceof Column) {
          return new Column(function ($247) {
              return flatten(v.value0($247));
          });
      };
      if (v instanceof Columns) {
          return new Columns(function ($248) {
              return flatten(v.value0($248));
          });
      };
      if (v instanceof Nesting) {
          return new Nesting(function ($249) {
              return flatten(v.value0($249));
          });
      };
      return v;
  };
  var group = function (x) {
      return new Union(flatten(x), x);
  };
  var softline = group(line);         
  var fits1 = function ($copy_v) {
      return function ($copy_v1) {
          return function ($copy_w) {
              return function ($copy_v2) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_var_w = $copy_w;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, w, v2) {
                      if (w < 0) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SFail$prime) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SEmpty$prime) {
                          $tco_done = true;
                          return true;
                      };
                      if (v2 instanceof SChar$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - 1 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value1);
                          return;
                      };
                      if (v2 instanceof SText$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - v2.value0 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value2);
                          return;
                      };
                      if (v2 instanceof SLine$prime) {
                          $tco_done = true;
                          return true;
                      };
                      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 819, column 1 - line 819, column 55): " + [ v.constructor.name, v1.constructor.name, w.constructor.name, v2.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_w, $copy_v2);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var renderPretty = renderFits(fits1);
  var empty = Empty.value;
  var linebreak = new FlatAlt(Line.value, empty);
  var displayS = function (v) {
      if (v instanceof SFail) {
          return Partial_Unsafe.unsafeCrashWith("@SFail@ can not appear uncaught in a rendered @SimpleDoc@");
      };
      if (v instanceof SEmpty) {
          return "";
      };
      if (v instanceof SChar) {
          return Data_String_CodeUnits.fromCharArray([ v.value0 ]) + displayS(v.value1);
      };
      if (v instanceof SText) {
          return v.value1 + displayS(v.value2);
      };
      if (v instanceof SLine) {
          return "\x0a" + (indentation(v.value0) + displayS(v.value1));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 893, column 1 - line 893, column 32): " + [ v.constructor.name ]);
  };
  var column = function (f) {
      return new Column(f);
  };                        
  var $$char = function (v) {
      if (v === "\x0a") {
          return line;
      };
      return new Char(v);
  };
  var beside = function (x) {
      return function (y) {
          return new Cat(x, y);
      };
  };
  var docSemigroup = {
      append: beside
  };
  var docMonoid = {
      mempty: empty,
      Semigroup0: function () {
          return docSemigroup;
      }
  };
  var string = (function () {
      var $252 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(docMonoid)(line);
      var $253 = Data_Functor.map(Data_Functor.functorArray)(text);
      var $254 = Data_String_Common.split("\x0a");
      return function ($255) {
          return $252($253($254($255)));
      };
  })();
  var enclose = function (l) {
      return function (r) {
          return function (x) {
              return Data_Semigroup.append(docSemigroup)(l)(Data_Semigroup.append(docSemigroup)(x)(r));
          };
      };
  };                                   
  var brackets = enclose(lbracket)(rbracket);
  var parens = enclose(lparen)(rparen);
  var width = function (d) {
      return function (f) {
          return column(function (k1) {
              return Data_Semigroup.append(docSemigroup)(d)(column(function (k2) {
                  return f(k2 - k1 | 0);
              }));
          });
      };
  };
  var fillBreak = function (f) {
      return function (x) {
          return width(x)(function (w) {
              var $241 = w > f;
              if ($241) {
                  return nest(f)(linebreak);
              };
              return text(spaces(f - w | 0));
          });
      };
  };                             
  var appendWithSpace = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(space)(y));
      };
  };
  var hsep = foldr1(docMonoid)(appendWithSpace);
  var appendWithSoftline = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softline)(y));
      };
  };                                                   
  var appendWithLinebreak = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(linebreak)(y));
      };
  };
  var vcat = foldr1(docMonoid)(appendWithLinebreak);
  var appendWithLine = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(line)(y));
      };
  };                                   
  var align = function (d) {
      return column(function (k) {
          return nesting(function (i) {
              return nest(k - i | 0)(d);
          });
      });
  };                                             
  var hang = function (i) {
      return function (d) {
          return align(nest(i)(d));
      };
  };
  var indent = function (i) {
      return function (d) {
          return hang(i)(Data_Semigroup.append(docSemigroup)(text(spaces(i)))(d));
      };
  };
  exports["hsep"] = hsep;
  exports["vcat"] = vcat;
  exports["appendWithSpace"] = appendWithSpace;
  exports["appendWithSoftline"] = appendWithSoftline;
  exports["appendWithLine"] = appendWithLine;
  exports["parens"] = parens;
  exports["brackets"] = brackets;
  exports["string"] = string;
  exports["fillBreak"] = fillBreak;
  exports["indent"] = indent;
  exports["align"] = align;
  exports["char"] = $$char;
  exports["text"] = text;
  exports["renderPretty"] = renderPretty;
  exports["displayS"] = displayS;
  exports["docSemigroup"] = docSemigroup;
  exports["docMonoid"] = docMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Help.Chunk"] = $PS["Options.Applicative.Help.Chunk"] || {};
  var exports = $PS["Options.Applicative.Help.Chunk"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Chunk = function (x) {
      return x;
  };
  var chunked = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v2;
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(v(v1.value0)(v2.value0));
              };
              throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 59, column 1 - line 60, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var chunkSemigroup = function (dictSemigroup) {
      return {
          append: chunked(Data_Semigroup.append(dictSemigroup))
      };
  };
  var extractChunk = function (dictMonoid) {
      var $31 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
      var $32 = Data_Newtype.un()(Chunk);
      return function ($33) {
          return $31($32($33));
      };
  };
  var isEmpty = (function () {
      var $34 = Data_Newtype.un()(Chunk);
      return function ($35) {
          return Data_Maybe.isNothing($34($35));
      };
  })();
  var chunkMonoid = function (dictSemigroup) {
      return {
          mempty: Data_Maybe.Nothing.value,
          Semigroup0: function () {
              return chunkSemigroup(dictSemigroup);
          }
      };
  };
  var vcatChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(Text_PrettyPrint_Leijen.appendWithLine))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var vsepChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(function (x) {
      return function (y) {
          return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid))(y));
      };
  }))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var chunkFunctor = Data_Maybe.functorMaybe;
  var chunkBesideOrBelow = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
  var chunkBeside = chunked(Text_PrettyPrint_Leijen.appendWithSpace);
  var chunkApply = Data_Maybe.applyMaybe;
  var chunkApplicative = Data_Maybe.applicativeMaybe;
  var listToChunk = function (dictMonoid) {
      return function (v) {
          if (v.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
          };
          return Control_Applicative.pure(chunkApplicative)(Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v));
      };
  };
  var stringChunk = function (v) {
      if (v === "") {
          return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
      };
      return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.text(v));
  };
  var paragraph = (function () {
      var $36 = Data_Foldable.foldr(Data_Foldable.foldableArray)((function () {
          var $38 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
          return function ($39) {
              return $38(stringChunk($39));
          };
      })())(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
      return function ($37) {
          return $36(Options_Applicative_Internal_Utils.words($37));
      };
  })();
  var tabulate$prime = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
          };
          return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.vcat(Data_Functor.mapFlipped(Data_Functor.functorArray)(v1)(function (v2) {
              return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
          })));
      };
  };
  var tabulate = tabulate$prime(24);
  exports["Chunk"] = Chunk;
  exports["chunked"] = chunked;
  exports["listToChunk"] = listToChunk;
  exports["chunkBeside"] = chunkBeside;
  exports["chunkBesideOrBelow"] = chunkBesideOrBelow;
  exports["vcatChunks"] = vcatChunks;
  exports["vsepChunks"] = vsepChunks;
  exports["isEmpty"] = isEmpty;
  exports["stringChunk"] = stringChunk;
  exports["paragraph"] = paragraph;
  exports["extractChunk"] = extractChunk;
  exports["tabulate"] = tabulate;
  exports["chunkFunctor"] = chunkFunctor;
  exports["chunkApply"] = chunkApply;
  exports["chunkApplicative"] = chunkApplicative;
  exports["chunkSemigroup"] = chunkSemigroup;
  exports["chunkMonoid"] = chunkMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Builder.Internal"] = $PS["Options.Applicative.Builder.Internal"] || {};
  var exports = $PS["Options.Applicative.Builder.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptionFields = function (x) {
      return x;
  };
  var FlagFields = function (x) {
      return x;
  };
  var DefaultProp = (function () {
      function DefaultProp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DefaultProp.create = function (value0) {
          return function (value1) {
              return new DefaultProp(value0, value1);
          };
      };
      return DefaultProp;
  })();
  var Mod = (function () {
      function Mod(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Mod(value0, value1, value2);
              };
          };
      };
      return Mod;
  })();
  var optionFieldsHasValue = {
      hasValueDummy: function (v) {
          return Data_Unit.unit;
      }
  };
  var optionFieldsHasMetavar = {
      hasMetavarDummy: function (v) {
          return Data_Unit.unit;
      }
  };
  var optionFieldsHasName = {
      name: function (n) {
          return Data_Newtype.over()()(OptionFields)(function (fields) {
              return {
                  optNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.optNames),
                  optCompleter: fields.optCompleter,
                  optNoArgError: fields.optNoArgError
              };
          });
      }
  };
  var name = function (dict) {
      return dict.name;
  };
  var flagFieldsHasName = {
      name: function (n) {
          return Data_Newtype.over()()(FlagFields)(function (fields) {
              return {
                  flagNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.flagNames),
                  flagActive: fields.flagActive
              };
          });
      }
  };
  var defaultPropSemigroup = {
      append: function (v) {
          return function (v1) {
              return new DefaultProp(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0)(v1.value0), Control_Alt.alt(Data_Maybe.altMaybe)(v.value1)(v1.value1));
          };
      }
  };
  var modSemigroup = {
      append: function (v) {
          return function (v1) {
              return new Mod(function ($53) {
                  return v1.value0(v.value0($53));
              }, Data_Semigroup.append(defaultPropSemigroup)(v1.value1)(v.value1), function ($54) {
                  return v1.value2(v.value2($54));
              });
          };
      }
  };
  var defaultPropMonoid = {
      mempty: new DefaultProp(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value),
      Semigroup0: function () {
          return defaultPropSemigroup;
      }
  };
  var fieldMod = function (f) {
      return new Mod(f, Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn));
  };
  var modMonoid = {
      mempty: new Mod(Control_Category.identity(Control_Category.categoryFn), Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn)),
      Semigroup0: function () {
          return modSemigroup;
      }
  };
  var optionMod = Mod.create(Control_Category.identity(Control_Category.categoryFn))(Data_Monoid.mempty(defaultPropMonoid));
  var internal = optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Options_Applicative_Types.Internal.value,
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var baseProps = {
      propMetaVar: "",
      propVisibility: Options_Applicative_Types.Visible.value,
      propHelp: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
      propShowDefault: Data_Maybe.Nothing.value,
      propDescMod: Data_Maybe.Nothing.value
  };
  var mkProps = function (v) {
      return function (g) {
          var props = Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (r) {
              return {
                  propShowDefault: Control_Apply.apply(Data_Maybe.applyMaybe)(v.value1)(v.value0),
                  propDescMod: r.propDescMod,
                  propHelp: r.propHelp,
                  propMetaVar: r.propMetaVar,
                  propVisibility: r.propVisibility
              };
          })(g(baseProps));
          return props;
      };
  };
  var mkOption = function (d) {
      return function (g) {
          return function (rdr) {
              return {
                  optMain: rdr,
                  optProps: mkProps(d)(g)
              };
          };
      };
  };
  var mkParser = function (v) {
      return function (g) {
          return function (rdr) {
              var o = Options_Applicative_Common.liftOpt(mkOption(v)(g)(rdr));
              return Data_Maybe.maybe(o)(function (a) {
                  return Control_Alt.alt(Options_Applicative_Types.parserAlt)(o)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(a));
              })(v.value0);
          };
      };
  };
  exports["Mod"] = Mod;
  exports["name"] = name;
  exports["OptionFields"] = OptionFields;
  exports["DefaultProp"] = DefaultProp;
  exports["optionMod"] = optionMod;
  exports["fieldMod"] = fieldMod;
  exports["mkParser"] = mkParser;
  exports["internal"] = internal;
  exports["optionFieldsHasName"] = optionFieldsHasName;
  exports["flagFieldsHasName"] = flagFieldsHasName;
  exports["optionFieldsHasValue"] = optionFieldsHasValue;
  exports["optionFieldsHasMetavar"] = optionFieldsHasMetavar;
  exports["modMonoid"] = modMonoid;
  exports["modSemigroup"] = modSemigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Builder"] = $PS["Options.Applicative.Builder"] || {};
  var exports = $PS["Options.Applicative.Builder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var ExitCodes = $PS["ExitCodes"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var PrefsMod = function (x) {
      return x;
  };
  var InfoMod = function (x) {
      return x;
  };
  var value = function (dictHasValue) {
      return function (x) {
          return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(new Data_Maybe.Just(x), Data_Maybe.Nothing.value), Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var str = Options_Applicative_Types.readerAsk;
  var showDefaultWith = function (s) {
      return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(Data_Maybe.Nothing.value, new Data_Maybe.Just(s)), Control_Category.identity(Control_Category.categoryFn));
  };
  var showDefault = function (dictShow) {
      return showDefaultWith(Data_Show.show(dictShow));
  };
  var $$short = function (dictHasName) {
      var $81 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($82) {
          return Options_Applicative_Builder_Internal.fieldMod($81(Options_Applicative_Types.OptShort.create($82)));
      };
  };
  var progDesc = function (s) {
      return Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoProgDesc: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy
          };
      });
  }; 
  var noArgError = function (e) {
      return Options_Applicative_Builder_Internal.fieldMod(Data_Newtype.over()()(Options_Applicative_Builder_Internal.OptionFields)(function (p) {
          return {
              optNoArgError: Data_Function["const"](e),
              optCompleter: p.optCompleter,
              optNames: p.optNames
          };
      }));
  };
  var prefs = function (m) {
      var base = {
          prefMultiSuffix: "",
          prefDisambiguate: false,
          prefShowHelpOnError: false,
          prefShowHelpOnEmpty: false,
          prefBacktrack: Options_Applicative_Types.Backtrack.value,
          prefColumns: 80
      };
      return Data_Newtype.un()(PrefsMod)(m)(base);
  };
  var prefsModSemigroup = {
      append: function (m1) {
          return function (m2) {
              var $83 = Data_Newtype.un()(PrefsMod)(m2);
              var $84 = Data_Newtype.un()(PrefsMod)(m1);
              return function ($85) {
                  return $83($84($85));
              };
          };
      }
  };
  var prefsModMonoid = {
      mempty: Control_Category.identity(Control_Category.categoryFn),
      Semigroup0: function () {
          return prefsModSemigroup;
      }
  };
  var metavar = function (dictHasMetavar) {
      return function ($$var) {
          return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
              return {
                  propMetaVar: $$var,
                  propDescMod: p.propDescMod,
                  propHelp: p.propHelp,
                  propShowDefault: p.propShowDefault,
                  propVisibility: p.propVisibility
              };
          }));
      };
  };
  var option = function (r) {
      return function (m) {
          var v = Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("ARG"))(m);
          var v1 = v.value0({
              optNames: [  ],
              optCompleter: Data_Monoid.mempty(Options_Applicative_Types.completerMonoid),
              optNoArgError: Options_Applicative_Types.ExpectsArgError.create
          });
          var crdr = {
              crCompleter: v1.optCompleter,
              crReader: r
          };
          var rdr = new Options_Applicative_Types.OptReader(v1.optNames, crdr, v1.optNoArgError);
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var strOption = option(str);
  var $$long = function (dictHasName) {
      var $86 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($87) {
          return Options_Applicative_Builder_Internal.fieldMod($86(Options_Applicative_Types.OptLong.create($87)));
      };
  };
  var infoModSemigroup = {
      append: function (m1) {
          return function (m2) {
              var $88 = Data_Newtype.un()(InfoMod)(m2);
              var $89 = Data_Newtype.un()(InfoMod)(m1);
              return function ($90) {
                  return $88($89($90));
              };
          };
      }
  };
  var info = function (parser) {
      return function (m) {
          var base = {
              infoParser: parser,
              infoFullDesc: true,
              infoProgDesc: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoHeader: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFooter: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFailureCode: ExitCodes["Error"].value,
              infoPolicy: Options_Applicative_Types.Intersperse.value
          };
          return Data_Newtype.un()(InfoMod)(m)(base);
      };
  };
  var idm = function (dictMonoid) {
      return Data_Monoid.mempty(dictMonoid);
  };
  var hidden = Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Data_Ord.min(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.Hidden.value)(p.propVisibility),
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var help = function (s) {
      return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over()()(Options_Applicative_Types.OptProperties)(function (p) {
          return {
              propHelp: Options_Applicative_Help_Chunk.paragraph(s),
              propDescMod: p.propDescMod,
              propMetaVar: p.propMetaVar,
              propShowDefault: p.propShowDefault,
              propVisibility: p.propVisibility
          };
      }));
  };
  var header = function (s) {
      return Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoHeader: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      });
  };
  var fullDesc = Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
      return {
          infoFullDesc: true,
          infoFailureCode: i.infoFailureCode,
          infoFooter: i.infoFooter,
          infoHeader: i.infoHeader,
          infoParser: i.infoParser,
          infoPolicy: i.infoPolicy,
          infoProgDesc: i.infoProgDesc
      };
  });
  var flag$prime = function (actv) {
      return function (v) {
          var rdr = (function () {
              var v1 = v.value0({
                  flagNames: [  ],
                  flagActive: actv
              });
              return new Options_Applicative_Types.FlagReader(v1.flagNames, v1.flagActive);
          })();
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var eitherReader = function (f) {
      return Control_Bind.bind(Options_Applicative_Types.readMBind)(Options_Applicative_Types.readerAsk)((function () {
          var $91 = Data_Either.either(Options_Applicative_Types.readerError)(Control_Applicative.pure(Options_Applicative_Types.readMApplicative));
          return function ($92) {
              return $91(f($92));
          };
      })());
  };
  var $$int = eitherReader(function (s) {
      var v = Data_Int.fromString(s);
      if (v instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left("Can't parse as Int: `" + (Data_Show.show(Data_Show.showString)(s) + "`"));
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Builder (line 124, column 28 - line 126, column 20): " + [ v.constructor.name ]);
  });                                                                     
  var defaultPrefs = prefs(idm(prefsModMonoid));
  var $$boolean = eitherReader(function ($95) {
      return (function (v) {
          if (v === "true") {
              return new Data_Either.Right(true);
          };
          if (v === "false") {
              return new Data_Either.Right(false);
          };
          return new Data_Either.Left("Can't parse as Boolean: `" + (Data_Show.show(Data_Show.showString)(v) + "`"));
      })(Data_String_Common.toLower($95));
  });
  var abortOption = function (err) {
      return function (m) {
          return option(Options_Applicative_Types.readerAbort(err))((function (v) {
              return Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(v)(m);
          })(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ noArgError(err), value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Control_Category.identity(Control_Category.categoryFn)), metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("") ])));
      };
  };
  exports["flag'"] = flag$prime;
  exports["abortOption"] = abortOption;
  exports["strOption"] = strOption;
  exports["option"] = option;
  exports["short"] = $$short;
  exports["long"] = $$long;
  exports["help"] = help;
  exports["value"] = value;
  exports["showDefault"] = showDefault;
  exports["metavar"] = metavar;
  exports["hidden"] = hidden;
  exports["int"] = $$int;
  exports["boolean"] = $$boolean;
  exports["fullDesc"] = fullDesc;
  exports["header"] = header;
  exports["progDesc"] = progDesc;
  exports["info"] = info;
  exports["defaultPrefs"] = defaultPrefs;
  exports["infoModSemigroup"] = infoModSemigroup;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };

  exports.copyArray = function (xs) {
    return function () {
      return xs.slice();
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];             
  var stdout = $foreign.process.stdout;           
  var stderr = $foreign.process.stderr;
  var argv = $foreign.copyArray($foreign.process.argv);
  exports["argv"] = argv;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["exit"] = $foreign.exit;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.BashCompletion"] = $PS["Options.Applicative.BashCompletion"] || {};
  var exports = $PS["Options.Applicative.BashCompletion"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Standard = (function () {
      function Standard() {

      };
      Standard.value = new Standard();
      return Standard;
  })();
  var Enriched = (function () {
      function Enriched(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Enriched.create = function (value0) {
          return function (value1) {
              return new Enriched(value0, value1);
          };
      };
      return Enriched;
  })();
  var zshCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "#compdef " + progn, "", "local request", "local completions", "local word", "local index=$((CURRENT - 1))", "", "request=(--bash-completion-enriched --bash-completion-index $index)", "for arg in ${words[@]}; do", "  request=(${request[@]} --bash-completion-word $arg)", "done", "", "IFS=$'\\n' completions=($( " + (prog + " \"${request[@]}\" ))"), "", "for word in $completions; do", "  local -a parts", "", "  # Split the line at a tab if there is one.", "  IFS=$'\\t' parts=($( echo $word ))", "", "  if [[ -n $parts[2] ]]; then", "     if [[ $word[1] == \"-\" ]]; then", "       local desc=(\"$parts[1] ($parts[2])\")", "       compadd -d desc -- $parts[1]", "     else", "       local desc=($(print -f  \"%-019s -- %s\" $parts[1] $parts[2]))", "       compadd -l -d desc -- $parts[1]", "     fi", "  else", "    compadd -f -- $word", "  fi", "done" ]);
      };
  };
  var fishCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ " function _" + progn, "    set -l cl (commandline --tokenize --current-process)", "    # Hack around fish issue #3934", "    set -l cn (commandline --tokenize --cut-at-cursor --current-process)", "    set -l cn (count $cn)", "    set -l tmpline --bash-completion-enriched --bash-completion-index $cn", "    for arg in $cl", "      set tmpline $tmpline --bash-completion-word $arg", "    end", "    for opt in (" + (prog + " $tmpline)"), "      if test -d $opt", "        echo -E \"$opt/\"", "      else", "        echo -E \"$opt\"", "      end", "    end", "end", "", "complete --no-files --command " + (progn + (" --arguments '(_" + (progn + ")'"))) ]);
      };
  };
  var bashCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "_" + (progn + "()"), "{", "    local CMDLINE", "    local IFS=$'\\n'", "    CMDLINE=(--bash-completion-index $COMP_CWORD)", "", "    for arg in ${COMP_WORDS[@]}; do", "        CMDLINE=(${CMDLINE[@]} --bash-completion-word $arg)", "    done", "", "    COMPREPLY=( $(" + (prog + " \"${CMDLINE[@]}\") )"), "}", "", "complete -o filenames -F _" + (progn + (" " + progn)) ]);
      };
  };
  var arraySplitAt = function (idx) {
      return function (arr) {
          if (idx === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          return {
              init: Data_Array.slice(0)(idx)(arr),
              rest: Data_Array.slice(idx)(Data_Array.length(arr))(arr)
          };
      };
  };
  var bashCompletionQuery = function (pinfo) {
      return function (pprefs) {
          return function (richness) {
              return function (ws) {
                  return function (i) {
                      return function (v) {
                          var v1 = arraySplitAt(i)(ws);
                          var run_completer = function (c) {
                              return Data_Newtype.un()(Options_Applicative_Types.Completer)(c)(Data_Maybe.fromMaybe("")(Data_Array.head(v1.rest)));
                          };
                          var render_line = function (len) {
                              return function (doc) {
                                  var v2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.uncons)(Data_Array_NonEmpty.fromArray(Options_Applicative_Internal_Utils.lines(Text_PrettyPrint_Leijen.displayS(Text_PrettyPrint_Leijen.renderPretty(1.0)(len)(doc)))));
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return "";
                                  };
                                  if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                      return v2.value0.head;
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return v2.value0.head + "...";
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 162, column 27 - line 165, column 43): " + [ v2.constructor.name ]);
                              };
                          };
                          var is_completion = (function () {
                              var v2 = Data_Array.head(v1.rest);
                              if (v2 instanceof Data_Maybe.Just) {
                                  return Options_Applicative_Internal_Utils.startsWith(v2.value0);
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](true);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 175, column 7 - line 177, column 30): " + [ v2.constructor.name ]);
                          })();
                          var filter_names = Data_Array.filter(is_completion);
                          var show_names = (function () {
                              var $84 = Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption);
                              return function ($85) {
                                  return filter_names($84($85));
                              };
                          })();
                          var compl = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.completionMonadP)(pinfo)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Array.drop(1)(v1.init)));
                          var add_opt_help = function (dictFunctor) {
                              return function (opt) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (o) {
                                          var h = Data_Newtype.un()(Options_Applicative_Help_Chunk.Chunk)(Options_Applicative_Types.optHelp(opt));
                                          return Data_Maybe.maybe(o)(function (h$prime) {
                                              return o + ("\x09" + render_line(richness.value0)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 138, column 24 - line 143, column 79): " + [ richness.constructor.name ]);
                              };
                          };
                          var add_cmd_help = function (dictFunctor) {
                              return function (p) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (cmd) {
                                          var h = Control_Bind.bind(Data_Maybe.bindMaybe)(p(cmd))((function () {
                                              var $86 = Data_Newtype.un()(Options_Applicative_Help_Chunk.Chunk);
                                              var $87 = Data_Newtype.un()(Options_Applicative_Types.ParserInfo);
                                              return function ($88) {
                                                  return $86((function (v2) {
                                                      return v2.infoProgDesc;
                                                  })($87($88)));
                                              };
                                          })());
                                          return Data_Maybe.maybe(cmd)(function (h$prime) {
                                              return cmd + ("\x09" + render_line(richness.value1)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 148, column 22 - line 153, column 85): " + [ richness.constructor.name ]);
                              };
                          };
                          var opt_completions = function (argPolicy) {
                              return function (hinfo) {
                                  return function (opt) {
                                      var v2 = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
                                      if (v2 instanceof Options_Applicative_Types.OptReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.FlagReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.ArgReader) {
                                          if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return run_completer((Data_Newtype.un()(Options_Applicative_Types.CReader)(v2.value0)).crCompleter);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.CmdReader) {
                                          if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_cmd_help(Data_Functor.functorArray)(v2.value2)(filter_names(v2.value1)));
                                          };
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 113, column 43 - line 133, column 53): " + [ v2.constructor.name ]);
                                  };
                              };
                          };
                          var list_options = function (a) {
                              var $89 = Data_Functor.map(Effect.functorEffect)(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray));
                              var $90 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
                              var $91 = Options_Applicative_Common.mapParser(opt_completions(a));
                              return function ($92) {
                                  return $89($90($91($92)));
                              };
                          };
                          var v2 = Options_Applicative_Internal.runCompletion(compl)(pprefs);
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Left) {
                              return Data_Exists.runExists(function (p) {
                                  return list_options(v2.value0.value0.value1)(p);
                              })(v2.value0.value0.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Right) {
                              return run_completer(v2.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 83, column 52 - line 89, column 15): " + [ v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var bashCompletionParser = function (pinfo) {
      return function (pprefs) {
          var failure = function (opts) {
              return {
                  execCompletion: function (progn) {
                      return Data_Functor.map(Effect.functorEffect)(Options_Applicative_Internal_Utils.unLines(Data_Foldable.foldableArray))(opts(progn));
                  }
              };
          };
          var complParser = Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionQuery(pinfo)(pprefs))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Options_Applicative_Builder["flag'"](Enriched.create)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("bash-completion-enriched"))(Options_Applicative_Builder_Internal.internal)))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-option-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-command-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Standard.value))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Array.fromFoldable(Data_List_Types.foldableList))(Options_Applicative_Types.many(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-word"))(Options_Applicative_Builder_Internal.internal))))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-index"))(Options_Applicative_Builder_Internal.internal)))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-script"))(Options_Applicative_Builder_Internal.internal))))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(fishCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("fish-completion-script"))(Options_Applicative_Builder_Internal.internal))))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(zshCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("zsh-completion-script"))(Options_Applicative_Builder_Internal.internal)))));
          return complParser;
      };
  };
  exports["bashCompletionParser"] = bashCompletionParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Help.Types"] = $PS["Options.Applicative.Help.Types"] || {};
  var exports = $PS["Options.Applicative.Help.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var ParserHelp = function (x) {
      return x;
  }
  var parserHelpMonoid = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpBody";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpError";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpFooter";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpHeader";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpSuggestions";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "helpUsage";
      }
  })(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordNil)))))));
  var helpText = function (v) {
      return Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.vsepChunks([ v.helpError, v.helpSuggestions, v.helpHeader, v.helpUsage, v.helpBody, v.helpFooter ]));
  };
  var renderHelp = function (cols) {
      var $2 = Text_PrettyPrint_Leijen.renderPretty(1.0)(cols);
      return function ($3) {
          return Text_PrettyPrint_Leijen.displayS($2(helpText($3)));
      };
  };
  exports["ParserHelp"] = ParserHelp;
  exports["renderHelp"] = renderHelp;
  exports["parserHelpMonoid"] = parserHelpMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Help.Core"] = $PS["Options.Applicative.Help.Core"] || {};
  var exports = $PS["Options.Applicative.Help.Core"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptDescStyle = function (x) {
      return x;
  };
  var usageHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpUsage: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var suggestionsHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpSuggestions: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var intersperse = function (sep) {
      var $28 = Data_Array.fold(Data_Monoid.monoidArray);
      var $29 = Data_Array.mapWithIndex(function (idx) {
          return function (e) {
              var $13 = idx === 0;
              if ($13) {
                  return [ e ];
              };
              return [ sep, e ];
          };
      });
      return function ($30) {
          return $28($29($30));
      };
  };
  var optDesc = function (pprefs) {
      return function (style) {
          return function (info) {
              return function (opt) {
                  var suffix = (function () {
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoMulti) {
                          return Options_Applicative_Help_Chunk.stringChunk((Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefMultiSuffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 58, column 7 - line 62, column 17): " + [  ]);
                  })();
                  var show_opt = (function () {
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault && !(Data_Newtype.un()(OptDescStyle)(style)).descOptional) {
                          return false;
                      };
                      if (Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Hidden.value)) {
                          return (Data_Newtype.un()(OptDescStyle)(style)).descHidden;
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Visible.value);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 51, column 7 - line 57, column 39): " + [  ]);
                  })();
                  var ns = Options_Applicative_Common.optionNames((Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain);
                  var mv = Options_Applicative_Help_Chunk.stringChunk(Options_Applicative_Types.optMetaVar(opt));
                  var descs = Data_Functor.map(Data_Functor.functorArray)(function ($31) {
                      return Text_PrettyPrint_Leijen.string(Options_Applicative_Common.showOption($31));
                  })(Data_Array.sort(Options_Applicative_Types.optNameOrd)(ns));
                  var render = function (chunk) {
                      if (!show_opt) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (Options_Applicative_Help_Chunk.isEmpty(chunk) || !(Data_Newtype.un()(OptDescStyle)(style)).descSurround) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if ((Data_Newtype.un()(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.brackets)(chunk))(suffix);
                      };
                      if (Data_Array["null"](Data_Array.drop(1)(descs))) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(chunk))(suffix);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 63, column 7 - line 73, column 43): " + [ chunk.constructor.name ]);
                  };
                  var desc$prime = Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.listToChunk(Text_PrettyPrint_Leijen.docMonoid)(intersperse((Data_Newtype.un()(OptDescStyle)(style)).descSep)(descs)))(mv);
                  return Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor))(Options_Applicative_Types.optDescMod(opt))(render(desc$prime));
              };
          };
      };
  };
  var headerHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpHeader: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fullDesc = function (pprefs) {
      var style = {
          descSep: Text_PrettyPrint_Leijen.string(","),
          descHidden: true,
          descOptional: true,
          descSurround: false
      };
      var doc = function (info) {
          return function (opt) {
              var show_def = function (s) {
                  return Text_PrettyPrint_Leijen.parens(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.string("default:"))(Text_PrettyPrint_Leijen.string(s)));
              };
              var n = optDesc(pprefs)(style)(info)(opt);
              var hdef = Data_Functor.map(Data_Maybe.functorMaybe)(show_def)(Options_Applicative_Types.optShowDefault(opt));
              var h = Options_Applicative_Types.optHelp(opt);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Options_Applicative_Help_Chunk.isEmpty(n)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!Options_Applicative_Help_Chunk.isEmpty(h)))(function () {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(n), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.chunkBeside(h)(hdef)))));
                  });
              });
          };
      };
      var $32 = Options_Applicative_Common.mapParser(doc);
      return function ($33) {
          return Options_Applicative_Help_Chunk.tabulate(Data_Array.catMaybes($32($33)));
      };
  };
  var footerHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpFooter: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fold_tree = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          return Data_Array.foldr(function ($34) {
              return Options_Applicative_Help_Chunk.chunkBesideOrBelow(fold_tree($34));
          })(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var alt_node = function (v1) {
              if (v1.length === 1) {
                  return v1[0];
              };
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(Data_Array.foldr(Options_Applicative_Help_Chunk.chunked(function (x) {
                  return function (y) {
                      return Text_PrettyPrint_Leijen.appendWithSoftline(x)(Text_PrettyPrint_Leijen.appendWithSoftline(Text_PrettyPrint_Leijen["char"]("|"))(y));
                  };
              }))(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v1));
          };
          return alt_node(Data_Array.filter((function () {
              var $35 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              return function ($36) {
                  return $35(Options_Applicative_Help_Chunk.isEmpty($36));
              };
          })())(Data_Functor.map(Data_Functor.functorArray)(fold_tree)(v.value0)));
      };
      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 116, column 1 - line 116, column 46): " + [ v.constructor.name ]);
  };
  var errorHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpError: chunk,
              helpBody: v.helpBody,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var cmdDesc = (function () {
      var desc = function (v) {
          return function (opt) {
              var v1 = (Data_Newtype.un()(Options_Applicative_Types.Option)(opt)).optMain;
              if (v1 instanceof Options_Applicative_Types.CmdReader) {
                  return new Data_Tuple.Tuple(v1.value0, Options_Applicative_Help_Chunk.tabulate(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.reverse(v1.value1))(function (cmd) {
                      return Control_Bind.bind(Control_Bind.bindArray)(Data_Maybe.maybe([  ])(Control_Applicative.pure(Control_Applicative.applicativeArray))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $37 = Data_Newtype.un()(Options_Applicative_Types.ParserInfo);
                          return function ($38) {
                              return (function (v2) {
                                  return v2.infoProgDesc;
                              })($37($38));
                          };
                      })())(v1.value2(cmd))))(function (d) {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(Text_PrettyPrint_Leijen.string(cmd), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(d))));
                      });
                  })));
              };
              return Data_Monoid.mempty(Data_Tuple.monoidTuple(Data_Maybe.monoidMaybe(Data_Semigroup.semigroupString))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
          };
      };
      return Options_Applicative_Common.mapParser(desc);
  })();
  var briefDesc$prime = function (showOptional) {
      return function (pprefs) {
          var style = {
              descSep: Text_PrettyPrint_Leijen.string("|"),
              descHidden: false,
              descOptional: showOptional,
              descSurround: true
          };
          var $39 = Options_Applicative_Common.treeMapParser(optDesc(pprefs)(style));
          return function ($40) {
              return fold_tree($39($40));
          };
      };
  };
  var missingDesc = briefDesc$prime(false);
  var briefDesc = briefDesc$prime(true);
  var parserUsage = function (pprefs) {
      return function (p) {
          return function (progn) {
              return Text_PrettyPrint_Leijen.hsep([ Text_PrettyPrint_Leijen.string("Usage:"), Text_PrettyPrint_Leijen.string(progn), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(briefDesc(pprefs)(p))) ]);
          };
      };
  };
  var bodyHelp = function (chunk) {
      return Data_Newtype.over()()(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpBody: chunk,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var parserHelp = function (pprefs) {
      return function (p) {
          var with_title = function (title) {
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(function (v) {
                  return Text_PrettyPrint_Leijen.appendWithLine(Text_PrettyPrint_Leijen.string(title))(v);
              });
          };
          var group_title = function (arr) {
              var v = Data_Array_NonEmpty.uncons(arr);
              return with_title(Data_Maybe.fromMaybe("Available commands:")(Data_Tuple.fst(v.head)))(Options_Applicative_Help_Chunk.vcatChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Tuple.snd(v.head) ])(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail))));
          };
          var cs = Data_Array.groupBy(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString)))(Data_Tuple.fst))(cmdDesc(p));
          return bodyHelp(Options_Applicative_Help_Chunk.vsepChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ with_title("Available options:")(fullDesc(pprefs)(p)) ])(Data_Functor.map(Data_Functor.functorArray)(group_title)(cs))));
      };
  };
  exports["missingDesc"] = missingDesc;
  exports["errorHelp"] = errorHelp;
  exports["headerHelp"] = headerHelp;
  exports["suggestionsHelp"] = suggestionsHelp;
  exports["usageHelp"] = usageHelp;
  exports["footerHelp"] = footerHelp;
  exports["parserHelp"] = parserHelp;
  exports["parserUsage"] = parserUsage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Min = function (x) {
      return x;
  };
  var semigroupMin = function (dictOrd) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Ord.min(dictOrd)(v)(v1);
              };
          }
      };
  };
  exports["Min"] = Min;
  exports["semigroupMin"] = semigroupMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  };
  exports["minimum"] = minimum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Help.Levenshtein"] = $PS["Options.Applicative.Help.Levenshtein"] || {};
  var exports = $PS["Options.Applicative.Help.Levenshtein"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function_Memoize = $PS["Data.Function.Memoize"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];                
  var editDistance = function (dictEq) {
      return function (xs) {
          return function (ys) {
              var dist$prime = Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateNat)(Data_Function_Memoize.tabulateNat)(function (a) {
                  return function (b) {
                      return dist(a)(b);
                  };
              });
              var dist = function (v) {
                  return function (v1) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 === 0) {
                          return v;
                      };
                      return Data_Semigroup_Foldable.minimum(Data_Ord.ordInt)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(dist$prime(v - 1 | 0)(v1) + 1 | 0, [ dist$prime(v)(v1 - 1 | 0) + 1 | 0, (function () {
                          var $5 = Data_Eq.eq(dictEq)(xs[v - 1 | 0])(ys[v1 - 1 | 0]);
                          if ($5) {
                              return dist$prime(v - 1 | 0)(v1 - 1 | 0);
                          };
                          return 1 + dist$prime(v - 1 | 0)(v1 - 1 | 0) | 0;
                      })() ]));
                  };
              };
              return dist$prime(Data_Array.length(xs))(Data_Array.length(ys));
          };
      };
  };
  exports["editDistance"] = editDistance;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Options.Applicative.Extra"] = $PS["Options.Applicative.Extra"] || {};
  var exports = $PS["Options.Applicative.Extra"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var ExitCodes = $PS["ExitCodes"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var Options_Applicative_BashCompletion = $PS["Options.Applicative.BashCompletion"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Core = $PS["Options.Applicative.Help.Core"];
  var Options_Applicative_Help_Levenshtein = $PS["Options.Applicative.Help.Levenshtein"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var renderFailure = function (failure) {
      return function (progn) {
          var v = Data_Newtype.un()(Options_Applicative_Types.ParserFailure)(failure)(progn);
          return new Data_Tuple.Tuple(Options_Applicative_Help_Types.renderHelp(v.value1.value1.value0)(v.value0), v.value1.value0);
      };
  };
  var parserFailure = function (pprefs) {
      return function (pinfo) {
          return function (msg) {
              return function (ctx) {
                  var with_context = function (arr) {
                      return function (i) {
                          return function (f) {
                              var v = Data_Array.head(arr);
                              if (v instanceof Data_Maybe.Nothing) {
                                  return f([  ])(i);
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return Data_Exists.runExists(function (i$prime) {
                                      return f(Options_Applicative_Internal.contextNames(arr))(i$prime);
                                  })(v.value0.value1);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Extra (line 183, column 28 - line 185, column 73): " + [ v.constructor.name ]);
                          };
                      };
                  };
                  var usage_help = function (progn) {
                      return function (names) {
                          return function (v) {
                              if (msg instanceof Options_Applicative_Types.InfoMsg) {
                                  return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                              };
                              return Options_Applicative_Help_Core.usageHelp(Options_Applicative_Help_Chunk.vcatChunks([ Control_Applicative.pure(Options_Applicative_Help_Chunk.chunkApplicative)(Options_Applicative_Help_Core.parserUsage(pprefs)(v.infoParser)(Options_Applicative_Internal_Utils.unWords(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ progn ])(names)))), Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(2))(v.infoProgDesc) ]));
                          };
                      };
                  };
                  var suggestion_help = Options_Applicative_Help_Core.suggestionsHelp((function () {
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var opt_completions = function (v) {
                              return function (v1) {
                                  if (v1.optMain instanceof Options_Applicative_Types.OptReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.FlagReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.ArgReader) {
                                      return [  ];
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.CmdReader) {
                                      if (v.hinfoUnreachableArgs) {
                                          return [  ];
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return v1.optMain.value1;
                                      };
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Extra (line 273, column 64 - line 280, column 37): " + [ v1.optMain.constructor.name ]);
                              };
                          };
                          var possibles = Data_Array.fold(Data_Monoid.monoidArray)(Data_Exists.runExists(function (zz) {
                              return Options_Applicative_Common.mapParser(opt_completions)(zz);
                          })(msg.value1.value0));
                          var isClose = function (a) {
                              return Data_Function.on(Options_Applicative_Help_Levenshtein.editDistance(Data_Eq.eqChar))(Data_String_CodeUnits.toCharArray)(a)(msg.value0) < 3;
                          };
                          var good = Data_Array.filter(isClose)(possibles);
                          var prose = (function () {
                              var $43 = Data_Array.length(good) < 2;
                              if ($43) {
                                  return Options_Applicative_Help_Chunk.stringChunk("Did you mean this?");
                              };
                              return Options_Applicative_Help_Chunk.stringChunk("Did you mean one of these?");
                          })();
                          var suggestions = Control_Apply.apply(Options_Applicative_Help_Chunk.chunkApply)(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.appendWithLine)(prose))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(4))(Options_Applicative_Help_Chunk.vcatChunks(Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Help_Chunk.stringChunk)(good))));
                          return suggestions;
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                  })());
                  var show_full_help = (function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return true;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return true;
                      };
                      return (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnError;
                  })();
                  var exit_code = (function () {
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          return (Data_Newtype.un()(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return ExitCodes.Success.value;
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return ExitCodes.Success.value;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 171, column 17 - line 177, column 44): " + [ msg.constructor.name ]);
                  })();
                  var error_help = Options_Applicative_Help_Core.errorHelp((function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return Data_Exists.runExists(function (x) {
                              return Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.stringChunk("Missing:"))(Options_Applicative_Help_Core.missingDesc(pprefs)(x));
                          })(msg.value1.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return Options_Applicative_Help_Chunk.stringChunk("The option `" + (msg.value0 + "` expects an argument."));
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var msg$prime = (function () {
                              var $67 = Options_Applicative_Internal_Utils.startsWith("-")(msg.value0);
                              if ($67) {
                                  return "Invalid option `" + (msg.value0 + "'");
                              };
                              return "Invalid argument `" + (msg.value0 + "'");
                          })();
                          return Options_Applicative_Help_Chunk.stringChunk(msg$prime);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 196, column 30 - line 225, column 30): " + [ msg.constructor.name ]);
                  })());
                  var base_help = function (v) {
                      var h = Options_Applicative_Help_Core.headerHelp(v.infoHeader);
                      var f = Options_Applicative_Help_Core.footerHelp(v.infoFooter);
                      if (show_full_help) {
                          return Data_Array.fold(Options_Applicative_Help_Types.parserHelpMonoid)([ h, f, Options_Applicative_Help_Core.parserHelp(pprefs)(v.infoParser) ]);
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                  };
                  return function (progn) {
                      var h = with_context(ctx)(pinfo)(function (names) {
                          return function (pinfo$prime) {
                              return Data_Array.fold(Options_Applicative_Help_Types.parserHelpMonoid)([ base_help(pinfo$prime), usage_help(progn)(names)(pinfo$prime), suggestion_help, error_help ]);
                          };
                      });
                      return new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(exit_code, new Data_Tuple.Tuple((Data_Newtype.un()(Options_Applicative_Types.ParserPrefs)(pprefs)).prefColumns, Data_Unit.unit)));
                  };
              };
          };
      };
  };
  var helper = Options_Applicative_Builder.abortOption(Options_Applicative_Types.ShowHelpText.value)(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("help"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("h"), Options_Applicative_Builder.help("Show this help text"), Options_Applicative_Builder.hidden ]));
  var getProgName = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(function (args) {
      return Data_Maybe.fromMaybe("")(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(args)(1))(function (executablePath) {
          return Data_Array.last(Data_String_Common.split("/")(executablePath));
      }));
  });
  var getArgs = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(Data_Array.drop(2));
  var exitWith = function (c) {
      return Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(c));
  };
  var exitSuccess = Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(ExitCodes.Success.value));
  var handleParseResult = function (v) {
      if (v instanceof Options_Applicative_Types.Success) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      if (v instanceof Options_Applicative_Types.Failure) {
          return function __do() {
              var progn = getProgName();
              var v1 = renderFailure(v.value0)(progn);
              var stream = (function () {
                  if (v1.value1 instanceof ExitCodes.Success) {
                      return Node_Process.stdout;
                  };
                  return Node_Process.stderr;
              })();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(v1.value0 + "\x0a")(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitWith(v1.value1)();
          };
      };
      if (v instanceof Options_Applicative_Types.CompletionInvoked) {
          return function __do() {
              var progn = getProgName();
              var msg = (Data_Newtype.un()(Options_Applicative_Types.CompletionResult)(v.value0)).execCompletion(progn)();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_Process.stdout)(Node_Encoding.UTF8.value)(msg)(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitSuccess();
          };
      };
      throw new Error("Failed pattern match at Options.Applicative.Extra (line 110, column 1 - line 110, column 58): " + [ v.constructor.name ]);
  };
  var execParserPure = function (pprefs) {
      return function (pinfo) {
          return function (args) {
              var pinfo$prime = Data_Newtype.over()()(Options_Applicative_Types.ParserInfo)(function (i) {
                  return {
                      infoParser: Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Left.create)(Options_Applicative_BashCompletion.bashCompletionParser(pinfo)(pprefs)))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Right.create)(i.infoParser)),
                      infoFailureCode: i.infoFailureCode,
                      infoFooter: i.infoFooter,
                      infoFullDesc: i.infoFullDesc,
                      infoHeader: i.infoHeader,
                      infoPolicy: i.infoPolicy,
                      infoProgDesc: i.infoProgDesc
                  };
              })(pinfo);
              var p = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.pMonadP)(pinfo$prime)(Data_List.fromFoldable(Data_Foldable.foldableArray)(args));
              var v = Options_Applicative_Internal.runP(p)(pprefs);
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Right) {
                  return new Options_Applicative_Types.Success(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Left) {
                  return new Options_Applicative_Types.CompletionInvoked(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return new Options_Applicative_Types.Failure(parserFailure(pprefs)(pinfo)(v.value0.value0)(v.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Extra (line 144, column 3 - line 147, column 73): " + [ v.constructor.name ]);
          };
      };
  };
  var customExecParser = function (pprefs) {
      return function (pinfo) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(execParserPure(pprefs)(pinfo))(getArgs))(handleParseResult);
      };
  };
  var execParser = customExecParser(Options_Applicative_Builder.defaultPrefs);
  exports["helper"] = helper;
  exports["execParser"] = execParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.GeneratorMain"] = $PS["Data.GeneratorMain"] || {};
  var exports = $PS["Data.GeneratorMain"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_CodeGen = $PS["Data.CodeGen"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Extra = $PS["Options.Applicative.Extra"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var Args = (function () {
      function Args(value0) {
          this.value0 = value0;
      };
      Args.create = function (value0) {
          return new Args(value0);
      };
      return Args;
  })();
  var argsParser = Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      return new Args({
                          jsonDir: v,
                          pursDir: v1,
                          truffle: v4,
                          exprPrefix: v2,
                          modulePrefix: v3
                      });
                  };
              };
          };
      };
  })(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("abis"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("ABIS"), Options_Applicative_Builder.showDefault(Data_Show.showString), Options_Applicative_Builder.help("The abi source directory.") ]))))(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("dest"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DEST"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)("./src"), Options_Applicative_Builder.showDefault(Data_Show.showString), Options_Applicative_Builder.help("The destination directory for purescript code.") ]))))(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("prefix"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("PREFIX"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(""), Options_Applicative_Builder.help("The expression prefix for the generated purescript code (used to get around solidity identifiers that generate invalide Purescript).") ]))))(Options_Applicative_Builder.strOption(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("module"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("MODULE"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)("Contracts"), Options_Applicative_Builder.help("The module name prefix for the generated purescript code.") ]))))(Options_Applicative_Builder.option(Options_Applicative_Builder["boolean"])(Data_Array.fold(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("truffle"), Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("TRUFFLE"), Options_Applicative_Builder.help("Are the abi files truffle artifacts"), Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(false) ])));
  var generatorMain = (function () {
      var opts = Options_Applicative_Builder.info(Options_Applicative_Internal_Utils.apApplyFlipped(Options_Applicative_Types.parserApply)(argsParser)(Options_Applicative_Extra.helper))(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.fullDesc)(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.progDesc("Purescript Web3 Generator"))(Options_Applicative_Builder.header("ps-web3-generator - generate Purescript bindings to your solidity contracts"))));
      return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Options_Applicative_Extra.execParser(opts)))(function (v) {
          return Data_CodeGen.generatePS(v.value0);
      }));
  })();
  exports["generatorMain"] = generatorMain;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Generator"] = $PS["Generator"] || {};
  var exports = $PS["Generator"];
  var Data_GeneratorMain = $PS["Data.GeneratorMain"];                
  var main = Data_GeneratorMain.generatorMain;
  exports["main"] = main;
})(PS);
PS["Generator"].main();